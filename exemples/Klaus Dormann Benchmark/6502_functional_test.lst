AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6244 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    2
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
0000 =                  zero_page = $0  
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
8000 =                  code_segment = $8000  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0001 =                  disable_selfmod = 1
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    3
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                        ;set B flag value; in real hardware B flag is always 0, the BRK instrution pushes  
                        ;it ON on the stack. But a lot of emulators set it to 1.
0000 =                  B_flag = 0
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    4
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    5
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
                         if B_flag = 0
0020 =                  fao     equ reserv          ;only the reserved flag is always on
                         else
                        fao     equ break+reserv    ;bits always on after PHP, BRK
                         endif
                        
0024 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0028 =                  faod    equ fao+decmode     ;+ ignore decimal
002c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking test of break bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                        
                        
                         if B_flag = 0
                             if disable_decimal < 2
                                 if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    cmp #((\1|fao)&~break)&m8i   ;I_flag is always enabled and break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)&~break   ;mask I, invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                                 if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    cmp #((\1|fai)&~break)&m8    ;I_flag is always disabled and break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai))&~break       ;invert expected flags and break disabled + always on bits + I
                                    endm
                                 endif
                                 if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                        			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    6
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #((\1|fao)&~break)&m8i   ;expected flags and break disabled + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)&~break   ;mask I, invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                                 if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    cmp #((\1|fao)&~break)&m8    ;expected flags break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fao)&~break         ;invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                             else
                                 if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #((\1|faod)&~break)&m8i  ;I_flag is always enabled break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)&~break  ;mask I, invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                                 if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #((\1|faid)&~break)&m8   ;I_flag is always disabled break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)&~break      ;invert expected flags and break disabled + always on bits + I
                                    endm
                                 endif
                                 if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #((\1|faod)&~break)&m8i  ;expected flags break disabled + always on bits, mask I
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    7
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)&~break  ;mask I, invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                                 if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                        			and #~break         ;force B flag to become 0
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #((\1|faod)&~break)&m8   ;expected flags break disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faod)&~break        ;invert expected flags and break disabled + always on bits
                                    endm
                                 endif
                             endif
                         else
                             if disable_decimal < 2
                                 if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                 endif
                                 if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                 endif
                                 if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                 endif
                                 if I_flag = 3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    8
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                 endif
                             else
                                 if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                 endif
                                 if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                 endif
                                 if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                 endif
                                 if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    9
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                 endif
                             endif
                         endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   10
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   11
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   12
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   13
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
0000 =                          org zero_page
                        ;break test interrupt save
0000 : 00               irq_a   ds  1               ;a register
0001 : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
0002 :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
0002 : 00               adfc    ds  1               ;carry flag before op
0003 : 00               ad1     ds  1               ;operand 1 - accumulator
0004 : 00               ad2     ds  1               ;operand 2 - memory / immediate
0005 : 00               adrl    ds  1               ;expected result bits 0-7
0006 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0007 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0008 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0009 :                  zp_bss
0009 : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
000b : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
000f : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
0010 : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
0014 : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0018 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
001c : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
001e : 1902                     dw  abs1+1
0020 : 1a02                     dw  abs1+2
0022 : 1b02                     dw  abs1+3
0024 : 1c02                     dw  abs7f
0026 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0028 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
002a : 0402                     dw  abst+1
002c : 0502                     dw  abst+2
002e : 0602                     dw  abst+3
0030 : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
0032 : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
0034 : 6002                     dw  absAN+1
0036 : 6102                     dw  absAN+2
0038 : 6202                     dw  absAN+3
003a : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
003c : 6402                     dw  absEO+1
003e : 6502                     dw  absEO+2
0040 : 6602                     dw  absEO+3
0042 : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
0044 : 5c02                     dw  absOR+1
0046 : 5d02                     dw  absOR+2
0048 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
004a : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
004c : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
004e : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
0050 : 0501             sbiy2   dw  sba2-$ff
0052 :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   14
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 :                  fLSR 
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
8000 =                          org code_segment
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   15
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8000 : d8               start   cld
8001 : a2ff                     ldx #$ff
8003 : 9a                       txs
8004 : a900                     lda #0          ;*** test 0 = initialize
8006 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
8009 : a205                     ldx #5
800b : 4c3380                   jmp psb_test
800e :                  psb_bwok
800e : a005                     ldy #5
8010 : d008                     bne psb_forw
                                trap        ;branch should be taken
8012 : 4c1280          >        jmp *           ;failed anyway
                        
8015 : 88                       dey         ;forward landing zone
8016 : 88                       dey
8017 : 88                       dey
8018 : 88                       dey
8019 : 88                       dey
801a :                  psb_forw
801a : 88                       dey
801b : 88                       dey
801c : 88                       dey
801d : 88                       dey
801e : 88                       dey
801f : f017                     beq psb_fwok
                                trap        ;forward offset
8021 : 4c2180          >        jmp *           ;failed anyway
                        
                        
8024 : ca                       dex         ;backward landing zone
8025 : ca                       dex
8026 : ca                       dex
8027 : ca                       dex
8028 : ca                       dex
8029 :                  psb_back
8029 : ca                       dex
802a : ca                       dex
802b : ca                       dex
802c : ca                       dex
802d : ca                       dex
802e : f0de                     beq psb_bwok
                                trap        ;backward offset
8030 : 4c3080          >        jmp *           ;failed anyway
                        
8033 :                  psb_test
8033 : d0f4                     bne psb_back
                                trap        ;branch should be taken
8035 : 4c3580          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   16
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8038 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   17
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
8038 : ad0002          >            lda test_case   ;previous test
803b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
803d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
803f : a901            >            lda #test_num   ;*** next tests' number
8041 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
                                ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
                        range_loop
                                dey             ;next relative address
                                tya
                                tax             ;precharge count to end of loop
                                bpl range_fw    ;calculate relative address
                                clc             ;avoid branch self or to relative address of branch
                                adc #2
                                nop             ;offset landing zone - tolerate +/-5 offset to branch
                                nop
                                nop
                                nop
                                nop
                        range_fw
                                nop
                                nop
                                nop
                                nop
                                nop
                                eor #$7f        ;complement except sign
                                sta range_adr   ;load into test target
                                lda #0          ;should set zero flag in status register
                                jmp range_op
                                
                                dex             ; offset landing zone - backward branch too far
                                dex
                                dex
                                dex
                                dex
                                ;relative address target field with branch under test in the middle
                                dex             ;-128 - max backward
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-120
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   18
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                dex
                                dex
                                dex             ;-110
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-100
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-90
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-80
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-70
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-60
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   19
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                dex             ;-50
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-40
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-30
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-20
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-10
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;-3
                        range_op                ;test target with zero flag=0, z=1 if previous dex
                        range_adr   = *+1       ;modifiable relative address
                                beq *+64        ;+64 if called without modification
                                dex             ;+0
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+10
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   20
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+20
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+30
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+40
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+50
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+60
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+70
                                dex
                                dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   21
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+80
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+90
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+100
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+110
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex             ;+120
                                dex
                                dex
                                dex
                                dex
                                dex
                                dex
                                nop             ;offset landing zone - forward branch too far
                                nop
                                nop
                                nop
                                nop
                                beq range_ok    ;+127 - max forward
                                trap            ; bad range
                                nop             ;offset landing zone - tolerate +/-5 offset to branch
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   22
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                nop
                                nop
                                nop
                                nop
                        range_ok
                                nop
                                nop
                                nop
                                nop
                                nop
                                cpy #0
                                beq range_end   
                                jmp range_loop
                        range_end               ;range test successful
                            endif
                                next_test
8044 : ad0002          >            lda test_case   ;previous test
8047 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8049 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
804b : a902            >            lda #test_num   ;*** next tests' number
804d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
8050 : c001                     cpy #1          ;testing BNE true
8052 : d003                     bne test_bne
                                trap 
8054 : 4c5480          >        jmp *           ;failed anyway
                        
8057 :                  test_bne
8057 : a900                     lda #0 
8059 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
805b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
805d : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
805f : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
8061 : c901                     cmp #1
                                trap_eq 
8063 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
8065 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
8067 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
8069 : aa                       tax 
806a : e000                     cpx #0          ;test compare x immediate
                                trap_ne
806c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
806e : 90fe            >        bcc *           ;failed carry clear
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   23
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_mi
8070 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
8072 : e001                     cpx #1
                                trap_eq 
8074 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
8076 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
8078 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
807a : a8                       tay 
807b : c000                     cpy #0          ;test compare y immediate
                                trap_ne
807d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
807f : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
8081 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
8083 : c001                     cpy #1
                                trap_eq 
8085 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
8087 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
8089 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
808b : ad0002          >            lda test_case   ;previous test
808e : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8090 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
8092 : a903            >            lda #test_num   ;*** next tests' number
8094 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
8097 : a2ff                     ldx #$ff        ;initialize stack
8099 : 9a                       txs
809a : a955                     lda #$55
809c : 48                       pha
809d : a9aa                     lda #$aa
809f : 48                       pha
80a0 : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
80a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
80a5 : ba                       tsx
80a6 : 8a                       txa             ;overwrite accu
80a7 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   24
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

80a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
80ab : 68                       pla
80ac : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
80ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
80b0 : 68                       pla
80b1 : c955                     cmp #$55
                                trap_ne
80b3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
80b5 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
80b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
80ba : ba                       tsx
80bb : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
80bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
80bf : ad0002          >            lda test_case   ;previous test
80c2 : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
80c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
80c6 : a904            >            lda #test_num   ;*** next tests' number
80c8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
80cb : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
80cd : 29ef            >			and #~break         ;force B flag to become 0
                       >
80cf : 48              >            pha         ;use stack to load status
80d0 : 28              >            plp
                        
80d1 : 101a                     bpl nbr1        ;branches should not be taken
80d3 : 501b                     bvc nbr2
80d5 : 901c                     bcc nbr3
80d7 : d01d                     bne nbr4
80d9 : 3003                     bmi br1         ;branches should be taken
                                trap 
80db : 4cdb80          >        jmp *           ;failed anyway
                        
80de : 7003             br1     bvs br2
                                trap 
80e0 : 4ce080          >        jmp *           ;failed anyway
                        
80e3 : b003             br2     bcs br3
                                trap 
80e5 : 4ce580          >        jmp *           ;failed anyway
                        
80e8 : f00f             br3     beq br4
                                trap 
80ea : 4cea80          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   25
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

80ed :                  nbr1
                                trap            ;previous bpl taken 
80ed : 4ced80          >        jmp *           ;failed anyway
                        
80f0 :                  nbr2
                                trap            ;previous bvc taken
80f0 : 4cf080          >        jmp *           ;failed anyway
                        
80f3 :                  nbr3
                                trap            ;previous bcc taken
80f3 : 4cf380          >        jmp *           ;failed anyway
                        
80f6 :                  nbr4
                                trap            ;previous bne taken
80f6 : 4cf680          >        jmp *           ;failed anyway
                        
80f9 : 08               br4     php
80fa : ba                       tsx
80fb : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
80fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
80ff : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
8100 : 0908            >            ora #decmode        ;ignore decimal mode bit
8102 : c9ef            >            cmp #(($ff    |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8104 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8106 : ba                       tsx
8107 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
8109 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
810b : a900            >            lda #0                   ;allow test to change I-flag (no mask)
810d : 29ef            >			and #~break         ;force B flag to become 0
                       >
810f : 48              >            pha         ;use stack to load status
8110 : 28              >            plp
                        
8111 : 301a                     bmi nbr11       ;branches should not be taken
8113 : 701b                     bvs nbr12
8115 : b01c                     bcs nbr13
8117 : f01d                     beq nbr14
8119 : 1003                     bpl br11        ;branches should be taken
                                trap 
811b : 4c1b81          >        jmp *           ;failed anyway
                        
811e : 5003             br11    bvc br12
                                trap 
8120 : 4c2081          >        jmp *           ;failed anyway
                        
8123 : 9003             br12    bcc br13
                                trap 
8125 : 4c2581          >        jmp *           ;failed anyway
                        
8128 : d00f             br13    bne br14
                                trap 
812a : 4c2a81          >        jmp *           ;failed anyway
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   26
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
812d :                  nbr11
                                trap            ;previous bmi taken 
812d : 4c2d81          >        jmp *           ;failed anyway
                        
8130 :                  nbr12
                                trap            ;previous bvs taken 
8130 : 4c3081          >        jmp *           ;failed anyway
                        
8133 :                  nbr13
                                trap            ;previous bcs taken 
8133 : 4c3381          >        jmp *           ;failed anyway
                        
8136 :                  nbr14
                                trap            ;previous beq taken 
8136 : 4c3681          >        jmp *           ;failed anyway
                        
8139 : 08               br14    php
813a : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
813b : 0908            >            ora #decmode        ;ignore decimal mode bit
813d : c928            >            cmp #((0      |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
813f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
8141 : a902            >            lda #zero             ;allow test to change I-flag (no mask)
8143 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8145 : 48              >            pha         ;use stack to load status
8146 : 28              >            plp
                        
8147 : d002                     bne brzs1
8149 : f003                     beq brzs2
814b :                  brzs1
                                trap            ;branch zero/non zero
814b : 4c4b81          >        jmp *           ;failed anyway
                        
814e : b002             brzs2   bcs brzs3
8150 : 9003                     bcc brzs4
8152 :                  brzs3
                                trap            ;branch carry/no carry
8152 : 4c5281          >        jmp *           ;failed anyway
                        
8155 : 3002             brzs4   bmi brzs5
8157 : 1003                     bpl brzs6
8159 :                  brzs5
                                trap            ;branch minus/plus
8159 : 4c5981          >        jmp *           ;failed anyway
                        
815c : 7002             brzs6   bvs brzs7
815e : 5003                     bvc brzs8
8160 :                  brzs7
                                trap            ;branch overflow/no overflow
8160 : 4c6081          >        jmp *           ;failed anyway
                        
8163 :                  brzs8
                                set_stat carry
                       >            load_flag carry
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   27
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8163 : a901            >            lda #carry             ;allow test to change I-flag (no mask)
8165 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8167 : 48              >            pha         ;use stack to load status
8168 : 28              >            plp
                        
8169 : f002                     beq brcs1
816b : d003                     bne brcs2
816d :                  brcs1
                                trap            ;branch zero/non zero
816d : 4c6d81          >        jmp *           ;failed anyway
                        
8170 : 9002             brcs2   bcc brcs3
8172 : b003                     bcs brcs4
8174 :                  brcs3
                                trap            ;branch carry/no carry
8174 : 4c7481          >        jmp *           ;failed anyway
                        
8177 : 3002             brcs4   bmi brcs5
8179 : 1003                     bpl brcs6
817b :                  brcs5
                                trap            ;branch minus/plus
817b : 4c7b81          >        jmp *           ;failed anyway
                        
817e : 7002             brcs6   bvs brcs7
8180 : 5003                     bvc brcs8
8182 :                  brcs7
                                trap            ;branch overflow/no overflow
8182 : 4c8281          >        jmp *           ;failed anyway
                        
                        
8185 :                  brcs8
                                set_stat minus
                       >            load_flag minus
8185 : a980            >            lda #minus             ;allow test to change I-flag (no mask)
8187 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8189 : 48              >            pha         ;use stack to load status
818a : 28              >            plp
                        
818b : f002                     beq brmi1
818d : d003                     bne brmi2
818f :                  brmi1
                                trap            ;branch zero/non zero
818f : 4c8f81          >        jmp *           ;failed anyway
                        
8192 : b002             brmi2   bcs brmi3
8194 : 9003                     bcc brmi4
8196 :                  brmi3
                                trap            ;branch carry/no carry
8196 : 4c9681          >        jmp *           ;failed anyway
                        
8199 : 1002             brmi4   bpl brmi5
819b : 3003                     bmi brmi6
819d :                  brmi5
                                trap            ;branch minus/plus
819d : 4c9d81          >        jmp *           ;failed anyway
                        
81a0 : 7002             brmi6   bvs brmi7
81a2 : 5003                     bvc brmi8
81a4 :                  brmi7
                                trap            ;branch overflow/no overflow
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   28
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

81a4 : 4ca481          >        jmp *           ;failed anyway
                        
81a7 :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
81a7 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
81a9 : 29ef            >			and #~break         ;force B flag to become 0
                       >
81ab : 48              >            pha         ;use stack to load status
81ac : 28              >            plp
                        
81ad : f002                     beq brvs1
81af : d003                     bne brvs2
81b1 :                  brvs1
                                trap            ;branch zero/non zero
81b1 : 4cb181          >        jmp *           ;failed anyway
                        
81b4 : b002             brvs2   bcs brvs3
81b6 : 9003                     bcc brvs4
81b8 :                  brvs3
                                trap            ;branch carry/no carry
81b8 : 4cb881          >        jmp *           ;failed anyway
                        
81bb : 3002             brvs4   bmi brvs5
81bd : 1003                     bpl brvs6
81bf :                  brvs5
                                trap            ;branch minus/plus
81bf : 4cbf81          >        jmp *           ;failed anyway
                        
81c2 : 5002             brvs6   bvc brvs7
81c4 : 7003                     bvs brvs8
81c6 :                  brvs7
                                trap            ;branch overflow/no overflow
81c6 : 4cc681          >        jmp *           ;failed anyway
                        
81c9 :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
81c9 : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
81cb : 29ef            >			and #~break         ;force B flag to become 0
                       >
81cd : 48              >            pha         ;use stack to load status
81ce : 28              >            plp
                        
81cf : f002                     beq brzc1
81d1 : d003                     bne brzc2
81d3 :                  brzc1
                                trap            ;branch zero/non zero
81d3 : 4cd381          >        jmp *           ;failed anyway
                        
81d6 : 9002             brzc2   bcc brzc3
81d8 : b003                     bcs brzc4
81da :                  brzc3
                                trap            ;branch carry/no carry
81da : 4cda81          >        jmp *           ;failed anyway
                        
81dd : 1002             brzc4   bpl brzc5
81df : 3003                     bmi brzc6
81e1 :                  brzc5
                                trap            ;branch minus/plus
81e1 : 4ce181          >        jmp *           ;failed anyway
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   29
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

81e4 : 5002             brzc6   bvc brzc7
81e6 : 7003                     bvs brzc8
81e8 :                  brzc7
                                trap            ;branch overflow/no overflow
81e8 : 4ce881          >        jmp *           ;failed anyway
                        
81eb :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
81eb : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
81ed : 29ef            >			and #~break         ;force B flag to become 0
                       >
81ef : 48              >            pha         ;use stack to load status
81f0 : 28              >            plp
                        
81f1 : d002                     bne brcc1
81f3 : f003                     beq brcc2
81f5 :                  brcc1
                                trap            ;branch zero/non zero
81f5 : 4cf581          >        jmp *           ;failed anyway
                        
81f8 : b002             brcc2   bcs brcc3
81fa : 9003                     bcc brcc4
81fc :                  brcc3
                                trap            ;branch carry/no carry
81fc : 4cfc81          >        jmp *           ;failed anyway
                        
81ff : 1002             brcc4   bpl brcc5
8201 : 3003                     bmi brcc6
8203 :                  brcc5
                                trap            ;branch minus/plus
8203 : 4c0382          >        jmp *           ;failed anyway
                        
8206 : 5002             brcc6   bvc brcc7
8208 : 7003                     bvs brcc8
820a :                  brcc7
                                trap            ;branch overflow/no overflow
820a : 4c0a82          >        jmp *           ;failed anyway
                        
820d :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
820d : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
820f : 29ef            >			and #~break         ;force B flag to become 0
                       >
8211 : 48              >            pha         ;use stack to load status
8212 : 28              >            plp
                        
8213 : d002                     bne brpl1
8215 : f003                     beq brpl2
8217 :                  brpl1
                                trap            ;branch zero/non zero
8217 : 4c1782          >        jmp *           ;failed anyway
                        
821a : 9002             brpl2   bcc brpl3
821c : b003                     bcs brpl4
821e :                  brpl3
                                trap            ;branch carry/no carry
821e : 4c1e82          >        jmp *           ;failed anyway
                        
8221 : 3002             brpl4   bmi brpl5
8223 : 1003                     bpl brpl6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   30
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8225 :                  brpl5
                                trap            ;branch minus/plus
8225 : 4c2582          >        jmp *           ;failed anyway
                        
8228 : 5002             brpl6   bvc brpl7
822a : 7003                     bvs brpl8
822c :                  brpl7
                                trap            ;branch overflow/no overflow
822c : 4c2c82          >        jmp *           ;failed anyway
                        
822f :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
822f : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
8231 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8233 : 48              >            pha         ;use stack to load status
8234 : 28              >            plp
                        
8235 : d002                     bne brvc1
8237 : f003                     beq brvc2
8239 :                  brvc1
                                trap            ;branch zero/non zero
8239 : 4c3982          >        jmp *           ;failed anyway
                        
823c : 9002             brvc2   bcc brvc3
823e : b003                     bcs brvc4
8240 :                  brvc3
                                trap            ;branch carry/no carry
8240 : 4c4082          >        jmp *           ;failed anyway
                        
8243 : 1002             brvc4   bpl brvc5
8245 : 3003                     bmi brvc6
8247 :                  brvc5
                                trap            ;branch minus/plus
8247 : 4c4782          >        jmp *           ;failed anyway
                        
824a : 7002             brvc6   bvs brvc7
824c : 5003                     bvc brvc8
824e :                  brvc7
                                trap            ;branch overflow/no overflow
824e : 4c4e82          >        jmp *           ;failed anyway
                        
8251 :                  brvc8
                                next_test
8251 : ad0002          >            lda test_case   ;previous test
8254 : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8256 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
8258 : a905            >            lda #test_num   ;*** next tests' number
825a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
825d : a255                     ldx #$55        ;x & y protected
825f : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
8261 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   31
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8263 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8265 : 48              >            pha         ;use stack to load status
8266 : a901            >            lda #1     ;precharge accu
8268 : 28              >            plp
                        
8269 : 48                       pha
                                tst_a 1,$ff
826a : 08              >            php         ;save flags
826b : c901            >            cmp #1     ;test result
                       >            trap_ne
826d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
826f : 68              >            pla         ;load status
8270 : 48              >            pha
                       >            cmp_flag $ff
8271 : 0908            >            ora #decmode        ;ignore decimal mode bit
8273 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8275 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8277 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
8278 : a900            >            lda #0             ;allow test to change I-flag (no mask)
827a : 29ef            >			and #~break         ;force B flag to become 0
                       >
827c : 48              >            pha         ;use stack to load status
827d : a900            >            lda #0     ;precharge accu
827f : 28              >            plp
                        
8280 : 48                       pha
                                tst_a 0,0
8281 : 08              >            php         ;save flags
8282 : c900            >            cmp #0     ;test result
                       >            trap_ne
8284 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8286 : 68              >            pla         ;load status
8287 : 48              >            pha
                       >            cmp_flag 0
8288 : 0908            >            ora #decmode        ;ignore decimal mode bit
828a : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
828c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
828e : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
828f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8291 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8293 : 48              >            pha         ;use stack to load status
8294 : a9ff            >            lda #$ff     ;precharge accu
8296 : 28              >            plp
                        
8297 : 48                       pha
                                tst_a $ff,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   32
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8298 : 08              >            php         ;save flags
8299 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
829b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
829d : 68              >            pla         ;load status
829e : 48              >            pha
                       >            cmp_flag $ff
829f : 0908            >            ora #decmode        ;ignore decimal mode bit
82a1 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
82a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82a5 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
82a6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
82a8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
82aa : 48              >            pha         ;use stack to load status
82ab : a901            >            lda #1     ;precharge accu
82ad : 28              >            plp
                        
82ae : 48                       pha
                                tst_a 1,0
82af : 08              >            php         ;save flags
82b0 : c901            >            cmp #1     ;test result
                       >            trap_ne
82b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82b4 : 68              >            pla         ;load status
82b5 : 48              >            pha
                       >            cmp_flag 0
82b6 : 0908            >            ora #decmode        ;ignore decimal mode bit
82b8 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
82ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82bc : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
82bd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
82bf : 29ef            >			and #~break         ;force B flag to become 0
                       >
82c1 : 48              >            pha         ;use stack to load status
82c2 : a900            >            lda #0     ;precharge accu
82c4 : 28              >            plp
                        
82c5 : 48                       pha
                                tst_a 0,$ff
82c6 : 08              >            php         ;save flags
82c7 : c900            >            cmp #0     ;test result
                       >            trap_ne
82c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82cb : 68              >            pla         ;load status
82cc : 48              >            pha
                       >            cmp_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   33
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

82cd : 0908            >            ora #decmode        ;ignore decimal mode bit
82cf : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
82d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82d3 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
82d4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
82d6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
82d8 : 48              >            pha         ;use stack to load status
82d9 : a9ff            >            lda #$ff     ;precharge accu
82db : 28              >            plp
                        
82dc : 48                       pha
                                tst_a $ff,0
82dd : 08              >            php         ;save flags
82de : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
82e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82e2 : 68              >            pla         ;load status
82e3 : 48              >            pha
                       >            cmp_flag 0
82e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
82e6 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
82e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82ea : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
82eb : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
82ed : 29ef            >			and #~break         ;force B flag to become 0
                       >
82ef : 48              >            pha         ;use stack to load status
82f0 : a900            >            lda #0     ;precharge accu
82f2 : 28              >            plp
                        
82f3 : 68                       pla
                                tst_a $ff,$ff-zero
82f4 : 08              >            php         ;save flags
82f5 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
82f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
82f9 : 68              >            pla         ;load status
82fa : 48              >            pha
                       >            cmp_flag $ff-zero
82fb : 0908            >            ora #decmode        ;ignore decimal mode bit
82fd : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
82ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8301 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   34
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_a $ff,0
                       >            load_flag 0
8302 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8304 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8306 : 48              >            pha         ;use stack to load status
8307 : a9ff            >            lda #$ff     ;precharge accu
8309 : 28              >            plp
                        
830a : 68                       pla
                                tst_a 0,zero
830b : 08              >            php         ;save flags
830c : c900            >            cmp #0     ;test result
                       >            trap_ne
830e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8310 : 68              >            pla         ;load status
8311 : 48              >            pha
                       >            cmp_flag zero
8312 : 0908            >            ora #decmode        ;ignore decimal mode bit
8314 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8316 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8318 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
8319 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
831b : 29ef            >			and #~break         ;force B flag to become 0
                       >
831d : 48              >            pha         ;use stack to load status
831e : a9fe            >            lda #$fe     ;precharge accu
8320 : 28              >            plp
                        
8321 : 68                       pla
                                tst_a 1,$ff-zero-minus
8322 : 08              >            php         ;save flags
8323 : c901            >            cmp #1     ;test result
                       >            trap_ne
8325 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8327 : 68              >            pla         ;load status
8328 : 48              >            pha
                       >            cmp_flag $ff-zero-minus
8329 : 0908            >            ora #decmode        ;ignore decimal mode bit
832b : c96d            >            cmp #(($ff-zero-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
832d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
832f : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
8330 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8332 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8334 : 48              >            pha         ;use stack to load status
8335 : a900            >            lda #0     ;precharge accu
8337 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   35
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
8338 : 68                       pla
                                tst_a $ff,minus
8339 : 08              >            php         ;save flags
833a : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
833c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
833e : 68              >            pla         ;load status
833f : 48              >            pha
                       >            cmp_flag minus
8340 : 0908            >            ora #decmode        ;ignore decimal mode bit
8342 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8344 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8346 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
8347 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8349 : 29ef            >			and #~break         ;force B flag to become 0
                       >
834b : 48              >            pha         ;use stack to load status
834c : a9ff            >            lda #$ff     ;precharge accu
834e : 28              >            plp
                        
834f : 68                       pla
                                tst_a 0,$ff-minus
8350 : 08              >            php         ;save flags
8351 : c900            >            cmp #0     ;test result
                       >            trap_ne
8353 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8355 : 68              >            pla         ;load status
8356 : 48              >            pha
                       >            cmp_flag $ff-minus
8357 : 0908            >            ora #decmode        ;ignore decimal mode bit
8359 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
835b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
835d : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
835e : a900            >            lda #0             ;allow test to change I-flag (no mask)
8360 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8362 : 48              >            pha         ;use stack to load status
8363 : a9fe            >            lda #$fe     ;precharge accu
8365 : 28              >            plp
                        
8366 : 68                       pla
                                tst_a 1,0
8367 : 08              >            php         ;save flags
8368 : c901            >            cmp #1     ;test result
                       >            trap_ne
836a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   36
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

836c : 68              >            pla         ;load status
836d : 48              >            pha
                       >            cmp_flag 0
836e : 0908            >            ora #decmode        ;ignore decimal mode bit
8370 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8372 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8374 : 28              >            plp         ;restore status
                        
8375 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
8377 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8379 : c0aa                     cpy #$aa
                                trap_ne
837b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
837d : ad0002          >            lda test_case   ;previous test
8380 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8382 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
8384 : a906            >            lda #test_num   ;*** next tests' number
8386 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
8389 : a900            >            lda #0             ;allow test to change I-flag (no mask)
838b : 29ef            >			and #~break         ;force B flag to become 0
                       >
838d : 48              >            pha         ;use stack to load status
838e : a93c            >            lda #$3c     ;precharge accu
8390 : 28              >            plp
                        
8391 : 49c3                     eor #$c3
                                tst_a $ff,fn
8393 : 08              >            php         ;save flags
8394 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
8396 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8398 : 68              >            pla         ;load status
8399 : 48              >            pha
                       >            cmp_flag fn
839a : 0908            >            ora #decmode        ;ignore decimal mode bit
839c : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
839e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83a0 : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
83a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   37
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

83a3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
83a5 : 48              >            pha         ;use stack to load status
83a6 : a9c3            >            lda #$c3     ;precharge accu
83a8 : 28              >            plp
                        
83a9 : 49c3                     eor #$c3
                                tst_a 0,fz
83ab : 08              >            php         ;save flags
83ac : c900            >            cmp #0     ;test result
                       >            trap_ne
83ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83b0 : 68              >            pla         ;load status
83b1 : 48              >            pha
                       >            cmp_flag fz
83b2 : 0908            >            ora #decmode        ;ignore decimal mode bit
83b4 : c92a            >            cmp #((fz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
83b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83b8 : 28              >            plp         ;restore status
                        
                                next_test
83b9 : ad0002          >            lda test_case   ;previous test
83bc : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
83be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
83c0 : a907            >            lda #test_num   ;*** next tests' number
83c2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
83c5 : a224                     ldx #$24
83c7 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
83c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
83cb : 29ef            >			and #~break         ;force B flag to become 0
                       >
83cd : 48              >            pha         ;use stack to load status
83ce : a918            >            lda #$18     ;precharge accu
83d0 : 28              >            plp
                        
83d1 : ea                       nop
                                tst_a $18,0
83d2 : 08              >            php         ;save flags
83d3 : c918            >            cmp #$18     ;test result
                       >            trap_ne
83d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83d7 : 68              >            pla         ;load status
83d8 : 48              >            pha
                       >            cmp_flag 0
83d9 : 0908            >            ora #decmode        ;ignore decimal mode bit
83db : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   38
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
83dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83df : 28              >            plp         ;restore status
                        
83e0 : e024                     cpx #$24
                                trap_ne
83e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
83e4 : c042                     cpy #$42
                                trap_ne
83e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
83e8 : a2db                     ldx #$db
83ea : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
83ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
83ee : 29ef            >			and #~break         ;force B flag to become 0
                       >
83f0 : 48              >            pha         ;use stack to load status
83f1 : a9e7            >            lda #$e7     ;precharge accu
83f3 : 28              >            plp
                        
83f4 : ea                       nop
                                tst_a $e7,$ff
83f5 : 08              >            php         ;save flags
83f6 : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
83f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
83fa : 68              >            pla         ;load status
83fb : 48              >            pha
                       >            cmp_flag $ff
83fc : 0908            >            ora #decmode        ;ignore decimal mode bit
83fe : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8400 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8402 : 28              >            plp         ;restore status
                        
8403 : e0db                     cpx #$db
                                trap_ne
8405 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8407 : c0bd                     cpy #$bd
                                trap_ne
8409 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
840b : ad0002          >            lda test_case   ;previous test
840e : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8410 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
8412 : a908            >            lda #test_num   ;*** next tests' number
8414 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   39
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
8417 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
8419 : 29ef            >			and #~break         ;force B flag to become 0
                       >
841b : 48              >            pha         ;use stack to load status
841c : 28              >            plp
                        
841d : a946                     lda #'F'
841f : a241                     ldx #'A'
8421 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
8423 : 4c67b5                   jmp test_far
8426 : ea                       nop
8427 : ea                       nop
                                trap_ne         ;runover protection
8428 : d0fe            >        bne *           ;failed not equal (non zero)
                        
842a : e8                       inx
842b : e8                       inx
842c :                  far_ret 
                                trap_eq         ;returned flags OK?
842c : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
842e : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
8430 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
8432 : 50fe            >        bvc *           ;failed overflow clear
                        
8434 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
8436 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8438 : e042                     cpx #('A'+1)
                                trap_ne
843a : d0fe            >        bne *           ;failed not equal (non zero)
                        
843c : c04f                     cpy #('R'-3)
                                trap_ne
843e : d0fe            >        bne *           ;failed not equal (non zero)
                        
8440 : ca                       dex
8441 : c8                       iny
8442 : c8                       iny
8443 : c8                       iny
8444 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
8446 : 4c4f84                   jmp test_near
8449 : ea                       nop
844a : ea                       nop
                                trap_ne         ;runover protection
844b : d0fe            >        bne *           ;failed not equal (non zero)
                        
844d : e8                       inx
844e : e8                       inx
844f :                  test_near
                                trap_eq         ;passed flags OK?
844f : f0fe            >        beq *           ;failed equal (zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   40
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_mi
8451 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
8453 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
8455 : 50fe            >        bvc *           ;failed overflow clear
                        
8457 : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
8459 : d0fe            >        bne *           ;failed not equal (non zero)
                        
845b : e041                     cpx #'A'
                                trap_ne
845d : d0fe            >        bne *           ;failed not equal (non zero)
                        
845f : c052                     cpy #'R'
                                trap_ne
8461 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
8463 : ad0002          >            lda test_case   ;previous test
8466 : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8468 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
846a : a909            >            lda #test_num   ;*** next tests' number
846c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
846f : a900            >            lda #0             ;allow test to change I-flag (no mask)
8471 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8473 : 48              >            pha         ;use stack to load status
8474 : 28              >            plp
                        
8475 : a949                     lda #'I'
8477 : a24e                     ldx #'N'
8479 : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
847b : 6c98b5                   jmp (ptr_tst_ind)
847e : ea                       nop
                                trap_ne         ;runover protection
847f : d0fe            >        bne *           ;failed not equal (non zero)
                        
8481 : 88                       dey
8482 : 88                       dey
8483 :                  ind_ret 
8483 : 08                       php             ;either SP or Y count will fail, if we do not hit
8484 : 88                       dey
8485 : 88                       dey
8486 : 88                       dey
8487 : 28                       plp
                                trap_eq         ;returned flags OK?
8488 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   41
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

848a : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
848c : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
848e : 50fe            >        bvc *           ;failed overflow clear
                        
8490 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
8492 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8494 : e04f                     cpx #('N'+1)
                                trap_ne
8496 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8498 : c03e                     cpy #('D'-6)
                                trap_ne
849a : d0fe            >        bne *           ;failed not equal (non zero)
                        
849c : ba                       tsx             ;SP check
849d : e0ff                     cpx #$ff
                                trap_ne
849f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
84a1 : ad0002          >            lda test_case   ;previous test
84a4 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
84a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
84a8 : a90a            >            lda #test_num   ;*** next tests' number
84aa : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
84ad : a900            >            lda #0             ;allow test to change I-flag (no mask)
84af : 29ef            >			and #~break         ;force B flag to become 0
                       >
84b1 : 48              >            pha         ;use stack to load status
84b2 : 28              >            plp
                        
84b3 : a94a                     lda #'J'
84b5 : a253                     ldx #'S'
84b7 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
84b9 : 20d9b5                   jsr test_jsr
84bb =                  jsr_ret = *-1           ;last address of jsr = return address
84bc : 08                       php             ;either SP or Y count will fail, if we do not hit
84bd : 88                       dey
84be : 88                       dey
84bf : 88                       dey
84c0 : 28                       plp
                                trap_eq         ;returned flags OK?
84c1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
84c3 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   42
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_cc
84c5 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
84c7 : 50fe            >        bvc *           ;failed overflow clear
                        
84c9 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
84cb : d0fe            >        bne *           ;failed not equal (non zero)
                        
84cd : e054                     cpx #('S'+1)
                                trap_ne
84cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
84d1 : c04c                     cpy #('R'-6)
                                trap_ne
84d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
84d5 : ba                       tsx             ;sp?
84d6 : e0ff                     cpx #$ff
                                trap_ne
84d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
84da : ad0002          >            lda test_case   ;previous test
84dd : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
84df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
84e1 : a90b            >            lda #test_num   ;*** next tests' number
84e3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
84e6 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
84e8 : 29ef            >			and #~break         ;force B flag to become 0
                        
84ea : 48                       pha
84eb : a942                     lda #'B'
84ed : a252                     ldx #'R'
84ef : a04b                     ldy #'K'
84f1 : 28                       plp             ;N=0, V=0, Z=0, C=0
84f2 : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   43
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

84f3 : 88                       dey             ;should not be executed
84f4 :                  brk_ret0                ;address of break return
84f4 : 08                       php             ;either SP or Y count will fail, if we do not hit
84f5 : 88                       dey
84f6 : 88                       dey
84f7 : 88                       dey
84f8 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
84fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
84fc : e053                     cpx #'R'+1
                                trap_ne
84fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
8500 : c045                     cpy #'K'-6
                                trap_ne
8502 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8504 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
8505 : 0908            >            ora #decmode        ;ignore decimal mode bit
8507 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8509 : d0fe            >        bne *           ;failed not equal (non zero)
                        
850b : ba                       tsx             ;sp?
850c : e0ff                     cpx #$ff
                                trap_ne
850e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
8510 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
8512 : 29ef            >			and #~break         ;force B flag to become 0
                        
8514 : 48                       pha
8515 : a9bd                     lda #$ff-'B'
8517 : a2ad                     ldx #$ff-'R'
8519 : a0b4                     ldy #$ff-'K'
851b : 28                       plp             ;N=1, V=1, Z=1, C=1
851c : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
851d : 88                       dey             ;should not be executed
851e :                  brk_ret1                ;address of break return
851e : 08                       php             ;either SP or Y count will fail, if we do not hit
851f : 88                       dey
8520 : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   44
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8521 : 88                       dey
8522 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
8524 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8526 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
8528 : d0fe            >        bne *           ;failed not equal (non zero)
                        
852a : c0ae                     cpy #$ff-'K'-6
                                trap_ne
852c : d0fe            >        bne *           ;failed not equal (non zero)
                        
852e : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
852f : 0908            >            ora #decmode        ;ignore decimal mode bit
8531 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8533 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8535 : ba                       tsx             ;sp?
8536 : e0ff                     cpx #$ff
                                trap_ne
8538 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
853a : ad0002          >            lda test_case   ;previous test
853d : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
853f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
8541 : a90c            >            lda #test_num   ;*** next tests' number
8543 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
8546 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8548 : 29ef            >			and #~break         ;force B flag to become 0
                       >
854a : 48              >            pha         ;use stack to load status
854b : 28              >            plp
                        
854c : 18                       clc
                                tst_stat $ff-carry
854d : 08              >            php         ;save status
854e : 68              >            pla         ;use stack to retrieve status
854f : 48              >            pha
                       >            cmp_flag $ff-carry
8550 : 0908            >            ora #decmode        ;ignore decimal mode bit
8552 : c9ee            >            cmp #(($ff-carry|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8554 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8556 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   45
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8557 : 38                       sec
                                tst_stat $ff
8558 : 08              >            php         ;save status
8559 : 68              >            pla         ;use stack to retrieve status
855a : 48              >            pha
                       >            cmp_flag $ff
855b : 0908            >            ora #decmode        ;ignore decimal mode bit
855d : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
855f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8561 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
8562 : 58                       cli
                                tst_stat $ff-intdis
8563 : 08              >            php         ;save status
8564 : 68              >            pla         ;use stack to retrieve status
8565 : 48              >            pha
                       >            cmp_flag $ff-intdis
8566 : 0908            >            ora #decmode        ;ignore decimal mode bit
8568 : c9eb            >            cmp #(($ff-intdis|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
856a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
856c : 28              >            plp         ;restore status
                        
856d : 78                       sei
                                tst_stat $ff
856e : 08              >            php         ;save status
856f : 68              >            pla         ;use stack to retrieve status
8570 : 48              >            pha
                       >            cmp_flag $ff
8571 : 0908            >            ora #decmode        ;ignore decimal mode bit
8573 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8575 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8577 : 28              >            plp         ;restore status
                        
                            endif
8578 : d8                       cld
                                tst_stat $ff-decmode
8579 : 08              >            php         ;save status
857a : 68              >            pla         ;use stack to retrieve status
857b : 48              >            pha
                       >            cmp_flag $ff-decmode
857c : 0908            >            ora #decmode        ;ignore decimal mode bit
857e : c9ef            >            cmp #(($ff-decmode|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8580 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8582 : 28              >            plp         ;restore status
                        
8583 : f8                       sed
                                tst_stat $ff
8584 : 08              >            php         ;save status
8585 : 68              >            pla         ;use stack to retrieve status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   46
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8586 : 48              >            pha
                       >            cmp_flag $ff
8587 : 0908            >            ora #decmode        ;ignore decimal mode bit
8589 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
858b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
858d : 28              >            plp         ;restore status
                        
858e : b8                       clv
                                tst_stat $ff-overfl
858f : 08              >            php         ;save status
8590 : 68              >            pla         ;use stack to retrieve status
8591 : 48              >            pha
                       >            cmp_flag $ff-overfl
8592 : 0908            >            ora #decmode        ;ignore decimal mode bit
8594 : c9af            >            cmp #(($ff-overfl|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8596 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8598 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
8599 : a900            >            lda #0             ;allow test to change I-flag (no mask)
859b : 29ef            >			and #~break         ;force B flag to become 0
                       >
859d : 48              >            pha         ;use stack to load status
859e : 28              >            plp
                        
                                tst_stat 0
859f : 08              >            php         ;save status
85a0 : 68              >            pla         ;use stack to retrieve status
85a1 : 48              >            pha
                       >            cmp_flag 0
85a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
85a4 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85a8 : 28              >            plp         ;restore status
                        
85a9 : 38                       sec
                                tst_stat carry
85aa : 08              >            php         ;save status
85ab : 68              >            pla         ;use stack to retrieve status
85ac : 48              >            pha
                       >            cmp_flag carry
85ad : 0908            >            ora #decmode        ;ignore decimal mode bit
85af : c929            >            cmp #((carry|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85b3 : 28              >            plp         ;restore status
                        
85b4 : 18                       clc
                                tst_stat 0  
85b5 : 08              >            php         ;save status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   47
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

85b6 : 68              >            pla         ;use stack to retrieve status
85b7 : 48              >            pha
                       >            cmp_flag 0  
85b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
85ba : c928            >            cmp #((0  |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85be : 28              >            plp         ;restore status
                        
                            if I_flag = 3
85bf : 78                       sei
                                tst_stat intdis
85c0 : 08              >            php         ;save status
85c1 : 68              >            pla         ;use stack to retrieve status
85c2 : 48              >            pha
                       >            cmp_flag intdis
85c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
85c5 : c92c            >            cmp #((intdis|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85c9 : 28              >            plp         ;restore status
                        
85ca : 58                       cli
                                tst_stat 0
85cb : 08              >            php         ;save status
85cc : 68              >            pla         ;use stack to retrieve status
85cd : 48              >            pha
                       >            cmp_flag 0
85ce : 0908            >            ora #decmode        ;ignore decimal mode bit
85d0 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85d4 : 28              >            plp         ;restore status
                        
                            endif  
85d5 : f8                       sed
                                tst_stat decmode
85d6 : 08              >            php         ;save status
85d7 : 68              >            pla         ;use stack to retrieve status
85d8 : 48              >            pha
                       >            cmp_flag decmode
85d9 : 0908            >            ora #decmode        ;ignore decimal mode bit
85db : c928            >            cmp #((decmode|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85df : 28              >            plp         ;restore status
                        
85e0 : d8                       cld
                                tst_stat 0  
85e1 : 08              >            php         ;save status
85e2 : 68              >            pla         ;use stack to retrieve status
85e3 : 48              >            pha
                       >            cmp_flag 0  
85e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   48
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

85e6 : c928            >            cmp #((0  |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85ea : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
85eb : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
85ed : 29ef            >			and #~break         ;force B flag to become 0
                       >
85ef : 48              >            pha         ;use stack to load status
85f0 : 28              >            plp
                        
                                tst_stat overfl
85f1 : 08              >            php         ;save status
85f2 : 68              >            pla         ;use stack to retrieve status
85f3 : 48              >            pha
                       >            cmp_flag overfl
85f4 : 0908            >            ora #decmode        ;ignore decimal mode bit
85f6 : c968            >            cmp #((overfl|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
85f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
85fa : 28              >            plp         ;restore status
                        
85fb : b8                       clv
                                tst_stat 0
85fc : 08              >            php         ;save status
85fd : 68              >            pla         ;use stack to retrieve status
85fe : 48              >            pha
                       >            cmp_flag 0
85ff : 0908            >            ora #decmode        ;ignore decimal mode bit
8601 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8603 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8605 : 28              >            plp         ;restore status
                        
                                next_test
8606 : ad0002          >            lda test_case   ;previous test
8609 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
860b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
860d : a90d            >            lda #test_num   ;*** next tests' number
860f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
8612 : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
8614 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8616 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8618 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   49
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8619 : 28              >            plp
                        
861a : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
861b : 08              >            php         ;save flags
861c : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
861e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8620 : 68              >            pla         ;load status
8621 : 48              >            pha
                       >            cmp_flag $ff-zero
8622 : 0908            >            ora #decmode        ;ignore decimal mode bit
8624 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8626 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8628 : 28              >            plp         ;restore status
                        
8629 : e8                       inx             ;00
                                tst_x 0,$ff-minus
862a : 08              >            php         ;save flags
862b : e000            >            cpx #0     ;test result
                       >            trap_ne
862d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
862f : 68              >            pla         ;load status
8630 : 48              >            pha
                       >            cmp_flag $ff-minus
8631 : 0908            >            ora #decmode        ;ignore decimal mode bit
8633 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8635 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8637 : 28              >            plp         ;restore status
                        
8638 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
8639 : 08              >            php         ;save flags
863a : e001            >            cpx #1     ;test result
                       >            trap_ne
863c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
863e : 68              >            pla         ;load status
863f : 48              >            pha
                       >            cmp_flag $ff-minus-zero
8640 : 0908            >            ora #decmode        ;ignore decimal mode bit
8642 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8644 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8646 : 28              >            plp         ;restore status
                        
8647 : ca                       dex             ;00
                                tst_x 0,$ff-minus
8648 : 08              >            php         ;save flags
8649 : e000            >            cpx #0     ;test result
                       >            trap_ne
864b : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   50
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
864d : 68              >            pla         ;load status
864e : 48              >            pha
                       >            cmp_flag $ff-minus
864f : 0908            >            ora #decmode        ;ignore decimal mode bit
8651 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8653 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8655 : 28              >            plp         ;restore status
                        
8656 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
8657 : 08              >            php         ;save flags
8658 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
865a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
865c : 68              >            pla         ;load status
865d : 48              >            pha
                       >            cmp_flag $ff-zero
865e : 0908            >            ora #decmode        ;ignore decimal mode bit
8660 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8662 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8664 : 28              >            plp         ;restore status
                        
8665 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
8666 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8668 : 29ef            >			and #~break         ;force B flag to become 0
                       >
866a : 48              >            pha         ;use stack to load status
866b : 28              >            plp
                        
866c : e8                       inx             ;ff
                                tst_x $ff,minus
866d : 08              >            php         ;save flags
866e : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
8670 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8672 : 68              >            pla         ;load status
8673 : 48              >            pha
                       >            cmp_flag minus
8674 : 0908            >            ora #decmode        ;ignore decimal mode bit
8676 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8678 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
867a : 28              >            plp         ;restore status
                        
867b : e8                       inx             ;00
                                tst_x 0,zero
867c : 08              >            php         ;save flags
867d : e000            >            cpx #0     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   51
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

867f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8681 : 68              >            pla         ;load status
8682 : 48              >            pha
                       >            cmp_flag zero
8683 : 0908            >            ora #decmode        ;ignore decimal mode bit
8685 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8687 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8689 : 28              >            plp         ;restore status
                        
868a : e8                       inx             ;01
                                tst_x 1,0
868b : 08              >            php         ;save flags
868c : e001            >            cpx #1     ;test result
                       >            trap_ne
868e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8690 : 68              >            pla         ;load status
8691 : 48              >            pha
                       >            cmp_flag 0
8692 : 0908            >            ora #decmode        ;ignore decimal mode bit
8694 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8696 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8698 : 28              >            plp         ;restore status
                        
8699 : ca                       dex             ;00
                                tst_x 0,zero
869a : 08              >            php         ;save flags
869b : e000            >            cpx #0     ;test result
                       >            trap_ne
869d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
869f : 68              >            pla         ;load status
86a0 : 48              >            pha
                       >            cmp_flag zero
86a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
86a3 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
86a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86a7 : 28              >            plp         ;restore status
                        
86a8 : ca                       dex             ;ff
                                tst_x $ff,minus
86a9 : 08              >            php         ;save flags
86aa : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
86ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86ae : 68              >            pla         ;load status
86af : 48              >            pha
                       >            cmp_flag minus
86b0 : 0908            >            ora #decmode        ;ignore decimal mode bit
86b2 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   52
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
86b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86b6 : 28              >            plp         ;restore status
                        
                        
86b7 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
86b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
86bb : 29ef            >			and #~break         ;force B flag to become 0
                       >
86bd : 48              >            pha         ;use stack to load status
86be : 28              >            plp
                        
86bf : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
86c0 : 08              >            php         ;save flags
86c1 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
86c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86c5 : 68              >            pla         ;load status
86c6 : 48              >            pha
                       >            cmp_flag $ff-zero
86c7 : 0908            >            ora #decmode        ;ignore decimal mode bit
86c9 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
86cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86cd : 28              >            plp         ;restore status
                        
86ce : c8                       iny             ;00
                                tst_y 0,$ff-minus
86cf : 08              >            php         ;save flags
86d0 : c000            >            cpy #0     ;test result
                       >            trap_ne
86d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86d4 : 68              >            pla         ;load status
86d5 : 48              >            pha
                       >            cmp_flag $ff-minus
86d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
86d8 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
86da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86dc : 28              >            plp         ;restore status
                        
86dd : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
86de : 08              >            php         ;save flags
86df : c001            >            cpy #1     ;test result
                       >            trap_ne
86e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86e3 : 68              >            pla         ;load status
86e4 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
86e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   53
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

86e7 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
86e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86eb : 28              >            plp         ;restore status
                        
86ec : 88                       dey             ;00
                                tst_y 0,$ff-minus
86ed : 08              >            php         ;save flags
86ee : c000            >            cpy #0     ;test result
                       >            trap_ne
86f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86f2 : 68              >            pla         ;load status
86f3 : 48              >            pha
                       >            cmp_flag $ff-minus
86f4 : 0908            >            ora #decmode        ;ignore decimal mode bit
86f6 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
86f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
86fa : 28              >            plp         ;restore status
                        
86fb : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
86fc : 08              >            php         ;save flags
86fd : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
86ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8701 : 68              >            pla         ;load status
8702 : 48              >            pha
                       >            cmp_flag $ff-zero
8703 : 0908            >            ora #decmode        ;ignore decimal mode bit
8705 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8707 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8709 : 28              >            plp         ;restore status
                        
870a : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
870b : a900            >            lda #0             ;allow test to change I-flag (no mask)
870d : 29ef            >			and #~break         ;force B flag to become 0
                       >
870f : 48              >            pha         ;use stack to load status
8710 : 28              >            plp
                        
8711 : c8                       iny             ;ff
                                tst_y $ff,0+minus
8712 : 08              >            php         ;save flags
8713 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
8715 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8717 : 68              >            pla         ;load status
8718 : 48              >            pha
                       >            cmp_flag 0+minus
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   54
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8719 : 0908            >            ora #decmode        ;ignore decimal mode bit
871b : c9a8            >            cmp #((0+minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
871d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
871f : 28              >            plp         ;restore status
                        
8720 : c8                       iny             ;00
                                tst_y 0,zero
8721 : 08              >            php         ;save flags
8722 : c000            >            cpy #0     ;test result
                       >            trap_ne
8724 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8726 : 68              >            pla         ;load status
8727 : 48              >            pha
                       >            cmp_flag zero
8728 : 0908            >            ora #decmode        ;ignore decimal mode bit
872a : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
872c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
872e : 28              >            plp         ;restore status
                        
872f : c8                       iny             ;01
                                tst_y 1,0
8730 : 08              >            php         ;save flags
8731 : c001            >            cpy #1     ;test result
                       >            trap_ne
8733 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8735 : 68              >            pla         ;load status
8736 : 48              >            pha
                       >            cmp_flag 0
8737 : 0908            >            ora #decmode        ;ignore decimal mode bit
8739 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
873b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
873d : 28              >            plp         ;restore status
                        
873e : 88                       dey             ;00
                                tst_y 0,zero
873f : 08              >            php         ;save flags
8740 : c000            >            cpy #0     ;test result
                       >            trap_ne
8742 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8744 : 68              >            pla         ;load status
8745 : 48              >            pha
                       >            cmp_flag zero
8746 : 0908            >            ora #decmode        ;ignore decimal mode bit
8748 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
874a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
874c : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   55
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

874d : 88                       dey             ;ff
                                tst_y $ff,minus
874e : 08              >            php         ;save flags
874f : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
8751 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8753 : 68              >            pla         ;load status
8754 : 48              >            pha
                       >            cmp_flag minus
8755 : 0908            >            ora #decmode        ;ignore decimal mode bit
8757 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8759 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
875b : 28              >            plp         ;restore status
                        
                                        
875c : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
875e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8760 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8762 : 48              >            pha         ;use stack to load status
8763 : 28              >            plp
                        
8764 : 8a                       txa
                                tst_a $ff,$ff-zero
8765 : 08              >            php         ;save flags
8766 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
8768 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
876a : 68              >            pla         ;load status
876b : 48              >            pha
                       >            cmp_flag $ff-zero
876c : 0908            >            ora #decmode        ;ignore decimal mode bit
876e : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8770 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8772 : 28              >            plp         ;restore status
                        
8773 : 08                       php
8774 : e8                       inx             ;00
8775 : 28                       plp
8776 : 8a                       txa
                                tst_a 0,$ff-minus
8777 : 08              >            php         ;save flags
8778 : c900            >            cmp #0     ;test result
                       >            trap_ne
877a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
877c : 68              >            pla         ;load status
877d : 48              >            pha
                       >            cmp_flag $ff-minus
877e : 0908            >            ora #decmode        ;ignore decimal mode bit
8780 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   56
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
8782 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8784 : 28              >            plp         ;restore status
                        
8785 : 08                       php
8786 : e8                       inx             ;01
8787 : 28                       plp
8788 : 8a                       txa
                                tst_a 1,$ff-minus-zero
8789 : 08              >            php         ;save flags
878a : c901            >            cmp #1     ;test result
                       >            trap_ne
878c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
878e : 68              >            pla         ;load status
878f : 48              >            pha
                       >            cmp_flag $ff-minus-zero
8790 : 0908            >            ora #decmode        ;ignore decimal mode bit
8792 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8796 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
8797 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8799 : 29ef            >			and #~break         ;force B flag to become 0
                       >
879b : 48              >            pha         ;use stack to load status
879c : 28              >            plp
                        
879d : 8a                       txa
                                tst_a 1,0
879e : 08              >            php         ;save flags
879f : c901            >            cmp #1     ;test result
                       >            trap_ne
87a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87a3 : 68              >            pla         ;load status
87a4 : 48              >            pha
                       >            cmp_flag 0
87a5 : 0908            >            ora #decmode        ;ignore decimal mode bit
87a7 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
87a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87ab : 28              >            plp         ;restore status
                        
87ac : 08                       php
87ad : ca                       dex             ;00
87ae : 28                       plp
87af : 8a                       txa
                                tst_a 0,zero
87b0 : 08              >            php         ;save flags
87b1 : c900            >            cmp #0     ;test result
                       >            trap_ne
87b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   57
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

87b5 : 68              >            pla         ;load status
87b6 : 48              >            pha
                       >            cmp_flag zero
87b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
87b9 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
87bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87bd : 28              >            plp         ;restore status
                        
87be : 08                       php
87bf : ca                       dex             ;ff
87c0 : 28                       plp
87c1 : 8a                       txa
                                tst_a $ff,minus
87c2 : 08              >            php         ;save flags
87c3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
87c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87c7 : 68              >            pla         ;load status
87c8 : 48              >            pha
                       >            cmp_flag minus
87c9 : 0908            >            ora #decmode        ;ignore decimal mode bit
87cb : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
87cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87cf : 28              >            plp         ;restore status
                        
                                                
87d0 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
87d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
87d4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
87d6 : 48              >            pha         ;use stack to load status
87d7 : 28              >            plp
                        
87d8 : 98                       tya
                                tst_a $ff,$ff-zero
87d9 : 08              >            php         ;save flags
87da : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
87dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87de : 68              >            pla         ;load status
87df : 48              >            pha
                       >            cmp_flag $ff-zero
87e0 : 0908            >            ora #decmode        ;ignore decimal mode bit
87e2 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
87e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87e6 : 28              >            plp         ;restore status
                        
87e7 : 08                       php
87e8 : c8                       iny             ;00
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   58
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

87e9 : 28                       plp
87ea : 98                       tya
                                tst_a 0,$ff-minus
87eb : 08              >            php         ;save flags
87ec : c900            >            cmp #0     ;test result
                       >            trap_ne
87ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87f0 : 68              >            pla         ;load status
87f1 : 48              >            pha
                       >            cmp_flag $ff-minus
87f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
87f4 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
87f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
87f8 : 28              >            plp         ;restore status
                        
87f9 : 08                       php
87fa : c8                       iny             ;01
87fb : 28                       plp
87fc : 98                       tya
                                tst_a 1,$ff-minus-zero
87fd : 08              >            php         ;save flags
87fe : c901            >            cmp #1     ;test result
                       >            trap_ne
8800 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8802 : 68              >            pla         ;load status
8803 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
8804 : 0908            >            ora #decmode        ;ignore decimal mode bit
8806 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8808 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
880a : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
880b : a900            >            lda #0             ;allow test to change I-flag (no mask)
880d : 29ef            >			and #~break         ;force B flag to become 0
                       >
880f : 48              >            pha         ;use stack to load status
8810 : 28              >            plp
                        
8811 : 98                       tya
                                tst_a 1,0
8812 : 08              >            php         ;save flags
8813 : c901            >            cmp #1     ;test result
                       >            trap_ne
8815 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8817 : 68              >            pla         ;load status
8818 : 48              >            pha
                       >            cmp_flag 0
8819 : 0908            >            ora #decmode        ;ignore decimal mode bit
881b : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   59
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

881d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
881f : 28              >            plp         ;restore status
                        
8820 : 08                       php
8821 : 88                       dey             ;00
8822 : 28                       plp
8823 : 98                       tya
                                tst_a 0,zero
8824 : 08              >            php         ;save flags
8825 : c900            >            cmp #0     ;test result
                       >            trap_ne
8827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8829 : 68              >            pla         ;load status
882a : 48              >            pha
                       >            cmp_flag zero
882b : 0908            >            ora #decmode        ;ignore decimal mode bit
882d : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
882f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8831 : 28              >            plp         ;restore status
                        
8832 : 08                       php
8833 : 88                       dey             ;ff
8834 : 28                       plp
8835 : 98                       tya
                                tst_a $ff,minus
8836 : 08              >            php         ;save flags
8837 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
8839 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
883b : 68              >            pla         ;load status
883c : 48              >            pha
                       >            cmp_flag minus
883d : 0908            >            ora #decmode        ;ignore decimal mode bit
883f : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8841 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8843 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
8844 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8846 : 29ef            >			and #~break         ;force B flag to become 0
                        
8848 : 48                       pha
8849 : a2ff                     ldx #$ff        ;ff
884b : 8a                       txa
884c : 28                       plp             
884d : a8                       tay
                                tst_y $ff,$ff-zero
884e : 08              >            php         ;save flags
884f : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
8851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   60
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8853 : 68              >            pla         ;load status
8854 : 48              >            pha
                       >            cmp_flag $ff-zero
8855 : 0908            >            ora #decmode        ;ignore decimal mode bit
8857 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8859 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
885b : 28              >            plp         ;restore status
                        
885c : 08                       php
885d : e8                       inx             ;00
885e : 8a                       txa
885f : 28                       plp
8860 : a8                       tay
                                tst_y 0,$ff-minus
8861 : 08              >            php         ;save flags
8862 : c000            >            cpy #0     ;test result
                       >            trap_ne
8864 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8866 : 68              >            pla         ;load status
8867 : 48              >            pha
                       >            cmp_flag $ff-minus
8868 : 0908            >            ora #decmode        ;ignore decimal mode bit
886a : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
886c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
886e : 28              >            plp         ;restore status
                        
886f : 08                       php
8870 : e8                       inx             ;01
8871 : 8a                       txa
8872 : 28                       plp
8873 : a8                       tay
                                tst_y 1,$ff-minus-zero
8874 : 08              >            php         ;save flags
8875 : c001            >            cpy #1     ;test result
                       >            trap_ne
8877 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8879 : 68              >            pla         ;load status
887a : 48              >            pha
                       >            cmp_flag $ff-minus-zero
887b : 0908            >            ora #decmode        ;ignore decimal mode bit
887d : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
887f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8881 : 28              >            plp         ;restore status
                        
                                load_flag 0
8882 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8884 : 29ef            >			and #~break         ;force B flag to become 0
                        
8886 : 48                       pha
8887 : a900                     lda #0
8889 : 8a                       txa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   61
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

888a : 28                       plp
888b : a8                       tay
                                tst_y 1,0
888c : 08              >            php         ;save flags
888d : c001            >            cpy #1     ;test result
                       >            trap_ne
888f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8891 : 68              >            pla         ;load status
8892 : 48              >            pha
                       >            cmp_flag 0
8893 : 0908            >            ora #decmode        ;ignore decimal mode bit
8895 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8897 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8899 : 28              >            plp         ;restore status
                        
889a : 08                       php
889b : ca                       dex             ;00
889c : 8a                       txa
889d : 28                       plp
889e : a8                       tay
                                tst_y 0,zero
889f : 08              >            php         ;save flags
88a0 : c000            >            cpy #0     ;test result
                       >            trap_ne
88a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88a4 : 68              >            pla         ;load status
88a5 : 48              >            pha
                       >            cmp_flag zero
88a6 : 0908            >            ora #decmode        ;ignore decimal mode bit
88a8 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
88aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88ac : 28              >            plp         ;restore status
                        
88ad : 08                       php
88ae : ca                       dex             ;ff
88af : 8a                       txa
88b0 : 28                       plp
88b1 : a8                       tay
                                tst_y $ff,minus
88b2 : 08              >            php         ;save flags
88b3 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
88b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88b7 : 68              >            pla         ;load status
88b8 : 48              >            pha
                       >            cmp_flag minus
88b9 : 0908            >            ora #decmode        ;ignore decimal mode bit
88bb : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
88bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88bf : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   62
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        
                        
                                load_flag $ff
88c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
88c2 : 29ef            >			and #~break         ;force B flag to become 0
                        
88c4 : 48                       pha
88c5 : a0ff                     ldy #$ff        ;ff
88c7 : 98                       tya
88c8 : 28                       plp
88c9 : aa                       tax
                                tst_x $ff,$ff-zero
88ca : 08              >            php         ;save flags
88cb : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
88cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88cf : 68              >            pla         ;load status
88d0 : 48              >            pha
                       >            cmp_flag $ff-zero
88d1 : 0908            >            ora #decmode        ;ignore decimal mode bit
88d3 : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
88d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88d7 : 28              >            plp         ;restore status
                        
88d8 : 08                       php
88d9 : c8                       iny             ;00
88da : 98                       tya
88db : 28                       plp
88dc : aa                       tax
                                tst_x 0,$ff-minus
88dd : 08              >            php         ;save flags
88de : e000            >            cpx #0     ;test result
                       >            trap_ne
88e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88e2 : 68              >            pla         ;load status
88e3 : 48              >            pha
                       >            cmp_flag $ff-minus
88e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
88e6 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
88e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88ea : 28              >            plp         ;restore status
                        
88eb : 08                       php
88ec : c8                       iny             ;01
88ed : 98                       tya
88ee : 28                       plp
88ef : aa                       tax
                                tst_x 1,$ff-minus-zero
88f0 : 08              >            php         ;save flags
88f1 : e001            >            cpx #1     ;test result
                       >            trap_ne
88f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   63
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

88f5 : 68              >            pla         ;load status
88f6 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
88f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
88f9 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
88fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
88fd : 28              >            plp         ;restore status
                        
                                load_flag 0
88fe : a900            >            lda #0             ;allow test to change I-flag (no mask)
8900 : 29ef            >			and #~break         ;force B flag to become 0
                        
8902 : 48                       pha
8903 : a900                     lda #0          ;preset status
8905 : 98                       tya
8906 : 28                       plp
8907 : aa                       tax
                                tst_x 1,0
8908 : 08              >            php         ;save flags
8909 : e001            >            cpx #1     ;test result
                       >            trap_ne
890b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
890d : 68              >            pla         ;load status
890e : 48              >            pha
                       >            cmp_flag 0
890f : 0908            >            ora #decmode        ;ignore decimal mode bit
8911 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8913 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8915 : 28              >            plp         ;restore status
                        
8916 : 08                       php
8917 : 88                       dey             ;00
8918 : 98                       tya
8919 : 28                       plp
891a : aa                       tax
                                tst_x 0,zero
891b : 08              >            php         ;save flags
891c : e000            >            cpx #0     ;test result
                       >            trap_ne
891e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8920 : 68              >            pla         ;load status
8921 : 48              >            pha
                       >            cmp_flag zero
8922 : 0908            >            ora #decmode        ;ignore decimal mode bit
8924 : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8926 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8928 : 28              >            plp         ;restore status
                        
8929 : 08                       php
892a : 88                       dey             ;ff
892b : 98                       tya
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   64
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

892c : 28                       plp
892d : aa                       tax
                                tst_x $ff,minus
892e : 08              >            php         ;save flags
892f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
8931 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
8933 : 68              >            pla         ;load status
8934 : 48              >            pha
                       >            cmp_flag minus
8935 : 0908            >            ora #decmode        ;ignore decimal mode bit
8937 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
8939 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
893b : 28              >            plp         ;restore status
                        
                                next_test
893c : ad0002          >            lda test_case   ;previous test
893f : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8941 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
8943 : a90e            >            lda #test_num   ;*** next tests' number
8945 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
8948 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
894a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
894c : 29ef            >			and #~break         ;force B flag to become 0
                       >
894e : 48              >            pha         ;use stack to load status
894f : 28              >            plp
                        
8950 : 9a                       txs
8951 : 08                       php
8952 : ad0101                   lda $101
                                cmp_flag $ff
8955 : 0908            >            ora #decmode        ;ignore decimal mode bit
8957 : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8959 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
895b : a900            >            lda #0             ;allow test to change I-flag (no mask)
895d : 29ef            >			and #~break         ;force B flag to become 0
                       >
895f : 48              >            pha         ;use stack to load status
8960 : 28              >            plp
                        
8961 : 9a                       txs
8962 : 08                       php
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   65
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8963 : ad0101                   lda $101
                                cmp_flag 0
8966 : 0908            >            ora #decmode        ;ignore decimal mode bit
8968 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
896a : d0fe            >        bne *           ;failed not equal (non zero)
                        
896c : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
896d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
896f : 29ef            >			and #~break         ;force B flag to become 0
                       >
8971 : 48              >            pha         ;use stack to load status
8972 : 28              >            plp
                        
8973 : 9a                       txs
8974 : 08                       php
8975 : ad0001                   lda $100
                                cmp_flag $ff
8978 : 0908            >            ora #decmode        ;ignore decimal mode bit
897a : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
897c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
897e : a900            >            lda #0             ;allow test to change I-flag (no mask)
8980 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8982 : 48              >            pha         ;use stack to load status
8983 : 28              >            plp
                        
8984 : 9a                       txs
8985 : 08                       php
8986 : ad0001                   lda $100
                                cmp_flag 0
8989 : 0908            >            ora #decmode        ;ignore decimal mode bit
898b : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
898d : d0fe            >        bne *           ;failed not equal (non zero)
                        
898f : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
8990 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8992 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8994 : 48              >            pha         ;use stack to load status
8995 : 28              >            plp
                        
8996 : 9a                       txs
8997 : 08                       php
8998 : adff01                   lda $1ff
                                cmp_flag $ff
899b : 0908            >            ora #decmode        ;ignore decimal mode bit
899d : c9ef            >            cmp #(($ff|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   66
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

899f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
89a1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
89a3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
89a5 : 48              >            pha         ;use stack to load status
89a6 : 28              >            plp
                        
89a7 : 9a                       txs
89a8 : 08                       php
89a9 : adff01                   lda $1ff
                                cmp_flag 0
89ac : 0908            >            ora #decmode        ;ignore decimal mode bit
89ae : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                
89b0 : a201                     ldx #1
89b2 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
89b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
89b5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
89b7 : 48              >            pha         ;use stack to load status
89b8 : 28              >            plp
                        
89b9 : ba                       tsx             ;clears Z, N
89ba : 08                       php             ;sp=00
89bb : e001                     cpx #1
                                trap_ne
89bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
89bf : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
89c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
89c4 : c96d            >            cmp #(($ff-minus-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
89c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
89c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
89ca : 29ef            >			and #~break         ;force B flag to become 0
                       >
89cc : 48              >            pha         ;use stack to load status
89cd : 28              >            plp
                        
89ce : ba                       tsx             ;clears N, sets Z
89cf : 08                       php             ;sp=ff
89d0 : e000                     cpx #0
                                trap_ne
89d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
89d4 : ad0001                   lda $100
                                cmp_flag $ff-minus
89d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
89d9 : c96f            >            cmp #(($ff-minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   67
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

89db : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
89dd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
89df : 29ef            >			and #~break         ;force B flag to become 0
                       >
89e1 : 48              >            pha         ;use stack to load status
89e2 : 28              >            plp
                        
89e3 : ba                       tsx             ;clears N, sets Z
89e4 : 08                       php             ;sp=fe
89e5 : e0ff                     cpx #$ff
                                trap_ne
89e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
89e9 : adff01                   lda $1ff
                                cmp_flag $ff-zero
89ec : 0908            >            ora #decmode        ;ignore decimal mode bit
89ee : c9ed            >            cmp #(($ff-zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
89f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
89f2 : a201                     ldx #1
89f4 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
89f5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
89f7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
89f9 : 48              >            pha         ;use stack to load status
89fa : 28              >            plp
                        
89fb : ba                       tsx             ;clears Z, N
89fc : 08                       php             ;sp=00
89fd : e001                     cpx #1
                                trap_ne
89ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a01 : ad0101                   lda $101
                                cmp_flag 0
8a04 : 0908            >            ora #decmode        ;ignore decimal mode bit
8a06 : c928            >            cmp #((0|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8a08 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8a0a : a900            >            lda #0             ;allow test to change I-flag (no mask)
8a0c : 29ef            >			and #~break         ;force B flag to become 0
                       >
8a0e : 48              >            pha         ;use stack to load status
8a0f : 28              >            plp
                        
8a10 : ba                       tsx             ;clears N, sets Z
8a11 : 08                       php             ;sp=ff
8a12 : e000                     cpx #0
                                trap_ne
8a14 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   68
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
8a16 : ad0001                   lda $100
                                cmp_flag zero
8a19 : 0908            >            ora #decmode        ;ignore decimal mode bit
8a1b : c92a            >            cmp #((zero|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8a1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8a1f : a900            >            lda #0             ;allow test to change I-flag (no mask)
8a21 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8a23 : 48              >            pha         ;use stack to load status
8a24 : 28              >            plp
                        
8a25 : ba                       tsx             ;clears N, sets Z
8a26 : 08                       php             ;sp=fe
8a27 : e0ff                     cpx #$ff
                                trap_ne
8a29 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a2b : adff01                   lda $1ff
                                cmp_flag minus
8a2e : 0908            >            ora #decmode        ;ignore decimal mode bit
8a30 : c9a8            >            cmp #((minus|faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
8a32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a34 : 68                       pla             ;sp=ff
                                next_test
8a35 : ad0002          >            lda test_case   ;previous test
8a38 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8a3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
8a3c : a90f            >            lda #test_num   ;*** next tests' number
8a3e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
8a41 : a003                     ldy #3
8a43 :                  tldx    
                                set_stat 0
                       >            load_flag 0
8a43 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8a45 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8a47 : 48              >            pha         ;use stack to load status
8a48 : 28              >            plp
                        
8a49 : b60b                     ldx zp1,y
8a4b : 08                       php         ;test stores do not alter flags
8a4c : 8a                       txa
8a4d : 49c3                     eor #$c3
8a4f : 28                       plp
8a50 : 990302                   sta abst,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   69
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8a53 : 08                       php         ;flags after load/store sequence
8a54 : 49c3                     eor #$c3
8a56 : d91802                   cmp abs1,y  ;test result
                                trap_ne
8a59 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a5b : 68                       pla         ;load status
                                eor_flag 0
8a5c : 0908            >            ora #decmode        ;ignore decimal mode bit
8a5e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8a60 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
8a63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a65 : 88                       dey
8a66 : 10db                     bpl tldx                  
                        
8a68 : a003                     ldy #3
8a6a :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
8a6a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8a6c : 29ef            >			and #~break         ;force B flag to become 0
                       >
8a6e : 48              >            pha         ;use stack to load status
8a6f : 28              >            plp
                        
8a70 : b60b                     ldx zp1,y
8a72 : 08                       php         ;test stores do not alter flags
8a73 : 8a                       txa
8a74 : 49c3                     eor #$c3
8a76 : 28                       plp
8a77 : 990302                   sta abst,y
8a7a : 08                       php         ;flags after load/store sequence
8a7b : 49c3                     eor #$c3
8a7d : d91802                   cmp abs1,y  ;test result
                                trap_ne
8a80 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a82 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8a83 : 0908            >            ora #decmode        ;ignore decimal mode bit
8a85 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8a87 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
8a8a : d0fe            >        bne *           ;failed not equal (non zero)
                        
8a8c : 88                       dey
8a8d : 10db                     bpl tldx1                  
                        
8a8f : a003                     ldy #3
8a91 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
8a91 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8a93 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8a95 : 48              >            pha         ;use stack to load status
8a96 : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   70
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8a97 : be1802                   ldx abs1,y
8a9a : 08                       php         ;test stores do not alter flags
8a9b : 8a                       txa
8a9c : 49c3                     eor #$c3
8a9e : aa                       tax
8a9f : 28                       plp
8aa0 : 9602                     stx zpt,y
8aa2 : 08                       php         ;flags after load/store sequence
8aa3 : 49c3                     eor #$c3
8aa5 : d90b00                   cmp zp1,y   ;test result
                                trap_ne
8aa8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8aaa : 68                       pla         ;load status
                                eor_flag 0
8aab : 0908            >            ora #decmode        ;ignore decimal mode bit
8aad : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8aaf : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
8ab2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8ab4 : 88                       dey
8ab5 : 10da                     bpl tldx2                  
                        
8ab7 : a003                     ldy #3
8ab9 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
8ab9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8abb : 29ef            >			and #~break         ;force B flag to become 0
                       >
8abd : 48              >            pha         ;use stack to load status
8abe : 28              >            plp
                        
8abf : be1802                   ldx abs1,y
8ac2 : 08                       php         ;test stores do not alter flags
8ac3 : 8a                       txa
8ac4 : 49c3                     eor #$c3
8ac6 : aa                       tax
8ac7 : 28                       plp
8ac8 : 9602                     stx zpt,y
8aca : 08                       php         ;flags after load/store sequence
8acb : 49c3                     eor #$c3
8acd : d90b00                   cmp zp1,y   ;test result
                                trap_ne
8ad0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8ad2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8ad3 : 0908            >            ora #decmode        ;ignore decimal mode bit
8ad5 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8ad7 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
8ada : d0fe            >        bne *           ;failed not equal (non zero)
                        
8adc : 88                       dey
8add : 10da                     bpl tldx3
                                
8adf : a003                     ldy #3      ;testing store result
8ae1 : a200                     ldx #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   71
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8ae3 : b90200           tstx    lda zpt,y
8ae6 : 49c3                     eor #$c3
8ae8 : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
8aeb : d0fe            >        bne *           ;failed not equal (non zero)
                        
8aed : 9602                     stx zpt,y   ;clear                
8aef : b90302                   lda abst,y
8af2 : 49c3                     eor #$c3
8af4 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
8af7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8af9 : 8a                       txa
8afa : 990302                   sta abst,y  ;clear                
8afd : 88                       dey
8afe : 10e3                     bpl tstx
                                next_test
8b00 : ad0002          >            lda test_case   ;previous test
8b03 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8b05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
8b07 : a910            >            lda #test_num   ;*** next tests' number
8b09 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
8b0c : a0fd                     ldy #3+$fa
8b0e : b611             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
8b10 : 8a                       txa
8b11 : 990901                   sta abst-$fa,y      ;no STX abs,y!
8b14 : 88                       dey
8b15 : c0fa                     cpy #$fa
8b17 : b0f5                     bcs tldx4                  
8b19 : a0fd                     ldy #3+$fa
8b1b : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
8b1e : 9608                     stx zpt-$fa&$ff,y
8b20 : 88                       dey
8b21 : c0fa                     cpy #$fa
8b23 : b0f6                     bcs tldx5                  
8b25 : a003                     ldy #3      ;testing wraparound result
8b27 : a200                     ldx #0
8b29 : b90200           tstx1   lda zpt,y
8b2c : d90b00                   cmp zp1,y
                                trap_ne     ;store to zp data
8b2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b31 : 9602                     stx zpt,y   ;clear                
8b33 : b90302                   lda abst,y
8b36 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
8b39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b3b : 8a                       txa
8b3c : 990302                   sta abst,y  ;clear                
8b3f : 88                       dey
8b40 : 10e7                     bpl tstx1
                                next_test
8b42 : ad0002          >            lda test_case   ;previous test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   72
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8b45 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8b47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
8b49 : a911            >            lda #test_num   ;*** next tests' number
8b4b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
8b4e : a203                     ldx #3
8b50 :                  tldy    
                                set_stat 0
                       >            load_flag 0
8b50 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8b52 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8b54 : 48              >            pha         ;use stack to load status
8b55 : 28              >            plp
                        
8b56 : b40b                     ldy zp1,x
8b58 : 08                       php         ;test stores do not alter flags
8b59 : 98                       tya
8b5a : 49c3                     eor #$c3
8b5c : 28                       plp
8b5d : 9d0302                   sta abst,x
8b60 : 08                       php         ;flags after load/store sequence
8b61 : 49c3                     eor #$c3
8b63 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
8b66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b68 : 68                       pla         ;load status
                                eor_flag 0
8b69 : 0908            >            ora #decmode        ;ignore decimal mode bit
8b6b : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8b6d : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
8b70 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b72 : ca                       dex
8b73 : 10db                     bpl tldy                  
                        
8b75 : a203                     ldx #3
8b77 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
8b77 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8b79 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8b7b : 48              >            pha         ;use stack to load status
8b7c : 28              >            plp
                        
8b7d : b40b                     ldy zp1,x
8b7f : 08                       php         ;test stores do not alter flags
8b80 : 98                       tya
8b81 : 49c3                     eor #$c3
8b83 : 28                       plp
8b84 : 9d0302                   sta abst,x
8b87 : 08                       php         ;flags after load/store sequence
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   73
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8b88 : 49c3                     eor #$c3
8b8a : dd1802                   cmp abs1,x  ;test result
                                trap_ne
8b8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b8f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8b90 : 0908            >            ora #decmode        ;ignore decimal mode bit
8b92 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8b94 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
8b97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8b99 : ca                       dex
8b9a : 10db                     bpl tldy1                  
                        
8b9c : a203                     ldx #3
8b9e :                  tldy2   
                                set_stat 0
                       >            load_flag 0
8b9e : a900            >            lda #0             ;allow test to change I-flag (no mask)
8ba0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8ba2 : 48              >            pha         ;use stack to load status
8ba3 : 28              >            plp
                        
8ba4 : bc1802                   ldy abs1,x
8ba7 : 08                       php         ;test stores do not alter flags
8ba8 : 98                       tya
8ba9 : 49c3                     eor #$c3
8bab : a8                       tay
8bac : 28                       plp
8bad : 9402                     sty zpt,x
8baf : 08                       php         ;flags after load/store sequence
8bb0 : 49c3                     eor #$c3
8bb2 : d50b                     cmp zp1,x   ;test result
                                trap_ne
8bb4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8bb6 : 68                       pla         ;load status
                                eor_flag 0
8bb7 : 0908            >            ora #decmode        ;ignore decimal mode bit
8bb9 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8bbb : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
8bbe : d0fe            >        bne *           ;failed not equal (non zero)
                        
8bc0 : ca                       dex
8bc1 : 10db                     bpl tldy2                  
                        
8bc3 : a203                     ldx #3
8bc5 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
8bc5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8bc7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8bc9 : 48              >            pha         ;use stack to load status
8bca : 28              >            plp
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   74
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8bcb : bc1802                   ldy abs1,x
8bce : 08                       php         ;test stores do not alter flags
8bcf : 98                       tya
8bd0 : 49c3                     eor #$c3
8bd2 : a8                       tay
8bd3 : 28                       plp
8bd4 : 9402                     sty zpt,x
8bd6 : 08                       php         ;flags after load/store sequence
8bd7 : 49c3                     eor #$c3
8bd9 : d50b                     cmp zp1,x   ;test result
                                trap_ne
8bdb : d0fe            >        bne *           ;failed not equal (non zero)
                        
8bdd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8bde : 0908            >            ora #decmode        ;ignore decimal mode bit
8be0 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8be2 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
8be5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8be7 : ca                       dex
8be8 : 10db                     bpl tldy3
                        
8bea : a203                     ldx #3      ;testing store result
8bec : a000                     ldy #0
8bee : b502             tsty    lda zpt,x
8bf0 : 49c3                     eor #$c3
8bf2 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
8bf4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8bf6 : 9402                     sty zpt,x   ;clear                
8bf8 : bd0302                   lda abst,x
8bfb : 49c3                     eor #$c3
8bfd : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
8c00 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8c02 : 8a                       txa
8c03 : 9d0302                   sta abst,x  ;clear                
8c06 : ca                       dex
8c07 : 10e5                     bpl tsty
                                next_test
8c09 : ad0002          >            lda test_case   ;previous test
8c0c : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
8c10 : a912            >            lda #test_num   ;*** next tests' number
8c12 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
8c15 : a2fd                     ldx #3+$fa
8c17 : b411             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
8c19 : 98                       tya
8c1a : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
8c1d : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   75
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8c1e : e0fa                     cpx #$fa
8c20 : b0f5                     bcs tldy4                  
8c22 : a2fd                     ldx #3+$fa
8c24 : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
8c27 : 9408                     sty zpt-$fa&$ff,x
8c29 : ca                       dex
8c2a : e0fa                     cpx #$fa
8c2c : b0f6                     bcs tldy5                  
8c2e : a203                     ldx #3      ;testing wraparound result
8c30 : a000                     ldy #0
8c32 : b502             tsty1   lda zpt,x
8c34 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
8c36 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8c38 : 9402                     sty zpt,x   ;clear                
8c3a : bd0302                   lda abst,x
8c3d : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
8c40 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8c42 : 8a                       txa
8c43 : 9d0302                   sta abst,x  ;clear                
8c46 : ca                       dex
8c47 : 10e9                     bpl tsty1
                                next_test
8c49 : ad0002          >            lda test_case   ;previous test
8c4c : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8c4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
8c50 : a913            >            lda #test_num   ;*** next tests' number
8c52 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
8c55 : a900            >            lda #0               ;allow test to change I-flag (no mask)
8c57 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8c59 : 48              >            pha         ;use stack to load status
8c5a : 28              >            plp
                        
8c5b : a60b                     ldx zp1
8c5d : 08                       php         ;test stores do not alter flags
8c5e : 8a                       txa
8c5f : 49c3                     eor #$c3
8c61 : aa                       tax
8c62 : 28                       plp
8c63 : 8e0302                   stx abst
8c66 : 08                       php         ;flags after load/store sequence
8c67 : 49c3                     eor #$c3
8c69 : aa                       tax
8c6a : e0c3                     cpx #$c3    ;test result
                                trap_ne
8c6c : d0fe            >        bne *           ;failed not equal (non zero)
                        
8c6e : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   76
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8c6f : 0908            >            ora #decmode        ;ignore decimal mode bit
8c71 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8c73 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8c76 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8c78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8c7a : 29ef            >			and #~break         ;force B flag to become 0
                       >
8c7c : 48              >            pha         ;use stack to load status
8c7d : 28              >            plp
                        
8c7e : a60c                     ldx zp1+1
8c80 : 08                       php         ;test stores do not alter flags
8c81 : 8a                       txa
8c82 : 49c3                     eor #$c3
8c84 : aa                       tax
8c85 : 28                       plp
8c86 : 8e0402                   stx abst+1
8c89 : 08                       php         ;flags after load/store sequence
8c8a : 49c3                     eor #$c3
8c8c : aa                       tax
8c8d : e082                     cpx #$82    ;test result
                                trap_ne
8c8f : d0fe            >        bne *           ;failed not equal (non zero)
                        
8c91 : 68                       pla         ;load status
                                eor_flag 0
8c92 : 0908            >            ora #decmode        ;ignore decimal mode bit
8c94 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8c96 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8c99 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8c9b : a900            >            lda #0             ;allow test to change I-flag (no mask)
8c9d : 29ef            >			and #~break         ;force B flag to become 0
                       >
8c9f : 48              >            pha         ;use stack to load status
8ca0 : 28              >            plp
                        
8ca1 : a60d                     ldx zp1+2
8ca3 : 08                       php         ;test stores do not alter flags
8ca4 : 8a                       txa
8ca5 : 49c3                     eor #$c3
8ca7 : aa                       tax
8ca8 : 28                       plp
8ca9 : 8e0502                   stx abst+2
8cac : 08                       php         ;flags after load/store sequence
8cad : 49c3                     eor #$c3
8caf : aa                       tax
8cb0 : e041                     cpx #$41    ;test result
                                trap_ne
8cb2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8cb4 : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   77
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8cb5 : 0908            >            ora #decmode        ;ignore decimal mode bit
8cb7 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8cb9 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8cbc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8cbe : a900            >            lda #0             ;allow test to change I-flag (no mask)
8cc0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8cc2 : 48              >            pha         ;use stack to load status
8cc3 : 28              >            plp
                        
8cc4 : a60e                     ldx zp1+3
8cc6 : 08                       php         ;test stores do not alter flags
8cc7 : 8a                       txa
8cc8 : 49c3                     eor #$c3
8cca : aa                       tax
8ccb : 28                       plp
8ccc : 8e0602                   stx abst+3
8ccf : 08                       php         ;flags after load/store sequence
8cd0 : 49c3                     eor #$c3
8cd2 : aa                       tax
8cd3 : e000                     cpx #0      ;test result
                                trap_ne
8cd5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8cd7 : 68                       pla         ;load status
                                eor_flag 0
8cd8 : 0908            >            ora #decmode        ;ignore decimal mode bit
8cda : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8cdc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8cdf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
8ce1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8ce3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8ce5 : 48              >            pha         ;use stack to load status
8ce6 : 28              >            plp
                        
8ce7 : a60b                     ldx zp1  
8ce9 : 08                       php         ;test stores do not alter flags
8cea : 8a                       txa
8ceb : 49c3                     eor #$c3
8ced : aa                       tax
8cee : 28                       plp
8cef : 8e0302                   stx abst  
8cf2 : 08                       php         ;flags after load/store sequence
8cf3 : 49c3                     eor #$c3
8cf5 : aa                       tax
8cf6 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
8cf8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8cfa : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   78
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag lo~fnz ;mask bits not altered
8cfb : 0908            >            ora #decmode        ;ignore decimal mode bit
8cfd : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8cff : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8d02 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8d04 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8d06 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8d08 : 48              >            pha         ;use stack to load status
8d09 : 28              >            plp
                        
8d0a : a60c                     ldx zp1+1
8d0c : 08                       php         ;test stores do not alter flags
8d0d : 8a                       txa
8d0e : 49c3                     eor #$c3
8d10 : aa                       tax
8d11 : 28                       plp
8d12 : 8e0402                   stx abst+1
8d15 : 08                       php         ;flags after load/store sequence
8d16 : 49c3                     eor #$c3
8d18 : aa                       tax
8d19 : e082                     cpx #$82    ;test result
                                trap_ne
8d1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
8d1d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8d1e : 0908            >            ora #decmode        ;ignore decimal mode bit
8d20 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8d22 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8d25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8d27 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8d29 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8d2b : 48              >            pha         ;use stack to load status
8d2c : 28              >            plp
                        
8d2d : a60d                     ldx zp1+2
8d2f : 08                       php         ;test stores do not alter flags
8d30 : 8a                       txa
8d31 : 49c3                     eor #$c3
8d33 : aa                       tax
8d34 : 28                       plp
8d35 : 8e0502                   stx abst+2
8d38 : 08                       php         ;flags after load/store sequence
8d39 : 49c3                     eor #$c3
8d3b : aa                       tax
8d3c : e041                     cpx #$41    ;test result
                                trap_ne     ;
8d3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
8d40 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   79
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag lo~fnz ;mask bits not altered
8d41 : 0908            >            ora #decmode        ;ignore decimal mode bit
8d43 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8d45 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8d48 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8d4a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8d4c : 29ef            >			and #~break         ;force B flag to become 0
                       >
8d4e : 48              >            pha         ;use stack to load status
8d4f : 28              >            plp
                        
8d50 : a60e                     ldx zp1+3
8d52 : 08                       php         ;test stores do not alter flags
8d53 : 8a                       txa
8d54 : 49c3                     eor #$c3
8d56 : aa                       tax
8d57 : 28                       plp
8d58 : 8e0602                   stx abst+3
8d5b : 08                       php         ;flags after load/store sequence
8d5c : 49c3                     eor #$c3
8d5e : aa                       tax
8d5f : e000                     cpx #0      ;test result
                                trap_ne
8d61 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8d63 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8d64 : 0908            >            ora #decmode        ;ignore decimal mode bit
8d66 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8d68 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8d6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
8d6d : a900            >            lda #0             ;allow test to change I-flag (no mask)
8d6f : 29ef            >			and #~break         ;force B flag to become 0
                       >
8d71 : 48              >            pha         ;use stack to load status
8d72 : 28              >            plp
                        
8d73 : ae1802                   ldx abs1  
8d76 : 08                       php         ;test stores do not alter flags
8d77 : 8a                       txa
8d78 : 49c3                     eor #$c3
8d7a : aa                       tax
8d7b : 28                       plp
8d7c : 8602                     stx zpt  
8d7e : 08                       php         ;flags after load/store sequence
8d7f : 49c3                     eor #$c3
8d81 : c50b                     cmp zp1     ;test result
                                trap_ne
8d83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8d85 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   80
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag 0
8d86 : 0908            >            ora #decmode        ;ignore decimal mode bit
8d88 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8d8a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8d8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8d8f : a900            >            lda #0             ;allow test to change I-flag (no mask)
8d91 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8d93 : 48              >            pha         ;use stack to load status
8d94 : 28              >            plp
                        
8d95 : ae1902                   ldx abs1+1
8d98 : 08                       php         ;test stores do not alter flags
8d99 : 8a                       txa
8d9a : 49c3                     eor #$c3
8d9c : aa                       tax
8d9d : 28                       plp
8d9e : 8603                     stx zpt+1
8da0 : 08                       php         ;flags after load/store sequence
8da1 : 49c3                     eor #$c3
8da3 : c50c                     cmp zp1+1   ;test result
                                trap_ne
8da5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8da7 : 68                       pla         ;load status
                                eor_flag 0
8da8 : 0908            >            ora #decmode        ;ignore decimal mode bit
8daa : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8dac : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8daf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8db1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8db3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8db5 : 48              >            pha         ;use stack to load status
8db6 : 28              >            plp
                        
8db7 : ae1a02                   ldx abs1+2
8dba : 08                       php         ;test stores do not alter flags
8dbb : 8a                       txa
8dbc : 49c3                     eor #$c3
8dbe : aa                       tax
8dbf : 28                       plp
8dc0 : 8604                     stx zpt+2
8dc2 : 08                       php         ;flags after load/store sequence
8dc3 : 49c3                     eor #$c3
8dc5 : c50d                     cmp zp1+2   ;test result
                                trap_ne
8dc7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8dc9 : 68                       pla         ;load status
                                eor_flag 0
8dca : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   81
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8dcc : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8dce : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8dd1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8dd3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8dd5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8dd7 : 48              >            pha         ;use stack to load status
8dd8 : 28              >            plp
                        
8dd9 : ae1b02                   ldx abs1+3
8ddc : 08                       php         ;test stores do not alter flags
8ddd : 8a                       txa
8dde : 49c3                     eor #$c3
8de0 : aa                       tax
8de1 : 28                       plp
8de2 : 8605                     stx zpt+3
8de4 : 08                       php         ;flags after load/store sequence
8de5 : 49c3                     eor #$c3
8de7 : c50e                     cmp zp1+3   ;test result
                                trap_ne
8de9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8deb : 68                       pla         ;load status
                                eor_flag 0
8dec : 0908            >            ora #decmode        ;ignore decimal mode bit
8dee : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8df0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8df3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
8df5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8df7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8df9 : 48              >            pha         ;use stack to load status
8dfa : 28              >            plp
                        
8dfb : ae1802                   ldx abs1  
8dfe : 08                       php         ;test stores do not alter flags
8dff : 8a                       txa
8e00 : 49c3                     eor #$c3
8e02 : aa                       tax
8e03 : 28                       plp
8e04 : 8602                     stx zpt  
8e06 : 08                       php         ;flags after load/store sequence
8e07 : 49c3                     eor #$c3
8e09 : aa                       tax
8e0a : e40b                     cpx zp1     ;test result
                                trap_ne
8e0c : d0fe            >        bne *           ;failed not equal (non zero)
                        
8e0e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8e0f : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   82
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8e11 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8e13 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8e16 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8e18 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8e1a : 29ef            >			and #~break         ;force B flag to become 0
                       >
8e1c : 48              >            pha         ;use stack to load status
8e1d : 28              >            plp
                        
8e1e : ae1902                   ldx abs1+1
8e21 : 08                       php         ;test stores do not alter flags
8e22 : 8a                       txa
8e23 : 49c3                     eor #$c3
8e25 : aa                       tax
8e26 : 28                       plp
8e27 : 8603                     stx zpt+1
8e29 : 08                       php         ;flags after load/store sequence
8e2a : 49c3                     eor #$c3
8e2c : aa                       tax
8e2d : e40c                     cpx zp1+1   ;test result
                                trap_ne
8e2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
8e31 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8e32 : 0908            >            ora #decmode        ;ignore decimal mode bit
8e34 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8e36 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8e39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8e3b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8e3d : 29ef            >			and #~break         ;force B flag to become 0
                       >
8e3f : 48              >            pha         ;use stack to load status
8e40 : 28              >            plp
                        
8e41 : ae1a02                   ldx abs1+2
8e44 : 08                       php         ;test stores do not alter flags
8e45 : 8a                       txa
8e46 : 49c3                     eor #$c3
8e48 : aa                       tax
8e49 : 28                       plp
8e4a : 8604                     stx zpt+2
8e4c : 08                       php         ;flags after load/store sequence
8e4d : 49c3                     eor #$c3
8e4f : aa                       tax
8e50 : e40d                     cpx zp1+2   ;test result
                                trap_ne
8e52 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8e54 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8e55 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   83
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8e57 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8e59 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8e5c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8e5e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8e60 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8e62 : 48              >            pha         ;use stack to load status
8e63 : 28              >            plp
                        
8e64 : ae1b02                   ldx abs1+3
8e67 : 08                       php         ;test stores do not alter flags
8e68 : 8a                       txa
8e69 : 49c3                     eor #$c3
8e6b : aa                       tax
8e6c : 28                       plp
8e6d : 8605                     stx zpt+3
8e6f : 08                       php         ;flags after load/store sequence
8e70 : 49c3                     eor #$c3
8e72 : aa                       tax
8e73 : e40e                     cpx zp1+3   ;test result
                                trap_ne
8e75 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8e77 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8e78 : 0908            >            ora #decmode        ;ignore decimal mode bit
8e7a : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8e7c : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8e7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
8e81 : a900            >            lda #0               ;allow test to change I-flag (no mask)
8e83 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8e85 : 48              >            pha         ;use stack to load status
8e86 : 28              >            plp
                        
8e87 : a2c3                     ldx #$c3
8e89 : 08                       php
8e8a : ec1802                   cpx abs1    ;test result
                                trap_ne
8e8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
8e8f : 68                       pla         ;load status
                                eor_flag 0
8e90 : 0908            >            ora #decmode        ;ignore decimal mode bit
8e92 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8e94 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8e97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   84
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
8e99 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8e9b : 29ef            >			and #~break         ;force B flag to become 0
                       >
8e9d : 48              >            pha         ;use stack to load status
8e9e : 28              >            plp
                        
8e9f : a282                     ldx #$82
8ea1 : 08                       php
8ea2 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
8ea5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8ea7 : 68                       pla         ;load status
                                eor_flag 0
8ea8 : 0908            >            ora #decmode        ;ignore decimal mode bit
8eaa : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8eac : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8eaf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8eb1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8eb3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8eb5 : 48              >            pha         ;use stack to load status
8eb6 : 28              >            plp
                        
8eb7 : a241                     ldx #$41
8eb9 : 08                       php
8eba : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
8ebd : d0fe            >        bne *           ;failed not equal (non zero)
                        
8ebf : 68                       pla         ;load status
                                eor_flag 0
8ec0 : 0908            >            ora #decmode        ;ignore decimal mode bit
8ec2 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8ec4 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8ec7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8ec9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8ecb : 29ef            >			and #~break         ;force B flag to become 0
                       >
8ecd : 48              >            pha         ;use stack to load status
8ece : 28              >            plp
                        
8ecf : a200                     ldx #0
8ed1 : 08                       php
8ed2 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
8ed5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8ed7 : 68                       pla         ;load status
                                eor_flag 0
8ed8 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   85
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8eda : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8edc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8edf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
8ee1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8ee3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8ee5 : 48              >            pha         ;use stack to load status
8ee6 : 28              >            plp
                        
8ee7 : a2c3                     ldx #$c3  
8ee9 : 08                       php
8eea : ec1802                   cpx abs1    ;test result
                                trap_ne
8eed : d0fe            >        bne *           ;failed not equal (non zero)
                        
8eef : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8ef0 : 0908            >            ora #decmode        ;ignore decimal mode bit
8ef2 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8ef4 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8ef7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8ef9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8efb : 29ef            >			and #~break         ;force B flag to become 0
                       >
8efd : 48              >            pha         ;use stack to load status
8efe : 28              >            plp
                        
8eff : a282                     ldx #$82
8f01 : 08                       php
8f02 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
8f05 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f07 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8f08 : 0908            >            ora #decmode        ;ignore decimal mode bit
8f0a : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8f0c : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8f0f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8f11 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8f13 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8f15 : 48              >            pha         ;use stack to load status
8f16 : 28              >            plp
                        
8f17 : a241                     ldx #$41
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   86
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8f19 : 08                       php
8f1a : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
8f1d : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f1f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8f20 : 0908            >            ora #decmode        ;ignore decimal mode bit
8f22 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8f24 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
8f27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
8f29 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
8f2b : 29ef            >			and #~break         ;force B flag to become 0
                       >
8f2d : 48              >            pha         ;use stack to load status
8f2e : 28              >            plp
                        
8f2f : a200                     ldx #0
8f31 : 08                       php
8f32 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
8f35 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f37 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
8f38 : 0908            >            ora #decmode        ;ignore decimal mode bit
8f3a : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8f3c : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
8f3f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
8f41 : a200                     ldx #0
8f43 : a502                     lda zpt  
8f45 : 49c3                     eor #$c3
8f47 : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
8f49 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f4b : 8602                     stx zpt     ;clear                
8f4d : ad0302                   lda abst  
8f50 : 49c3                     eor #$c3
8f52 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
8f55 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f57 : 8e0302                   stx abst    ;clear                
8f5a : a503                     lda zpt+1
8f5c : 49c3                     eor #$c3
8f5e : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
8f60 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f62 : 8603                     stx zpt+1   ;clear                
8f64 : ad0402                   lda abst+1
8f67 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   87
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8f69 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
8f6c : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f6e : 8e0402                   stx abst+1  ;clear                
8f71 : a504                     lda zpt+2
8f73 : 49c3                     eor #$c3
8f75 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
8f77 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f79 : 8604                     stx zpt+2   ;clear                
8f7b : ad0502                   lda abst+2
8f7e : 49c3                     eor #$c3
8f80 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
8f83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f85 : 8e0502                   stx abst+2  ;clear                
8f88 : a505                     lda zpt+3
8f8a : 49c3                     eor #$c3
8f8c : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
8f8e : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f90 : 8605                     stx zpt+3   ;clear                
8f92 : ad0602                   lda abst+3
8f95 : 49c3                     eor #$c3
8f97 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
8f9a : d0fe            >        bne *           ;failed not equal (non zero)
                        
8f9c : 8e0602                   stx abst+3  ;clear                
                                next_test
8f9f : ad0002          >            lda test_case   ;previous test
8fa2 : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
8fa4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
8fa6 : a914            >            lda #test_num   ;*** next tests' number
8fa8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
8fab : a900            >            lda #0             ;allow test to change I-flag (no mask)
8fad : 29ef            >			and #~break         ;force B flag to become 0
                       >
8faf : 48              >            pha         ;use stack to load status
8fb0 : 28              >            plp
                        
8fb1 : a40b                     ldy zp1  
8fb3 : 08                       php         ;test stores do not alter flags
8fb4 : 98                       tya
8fb5 : 49c3                     eor #$c3
8fb7 : a8                       tay
8fb8 : 28                       plp
8fb9 : 8c0302                   sty abst  
8fbc : 08                       php         ;flags after load/store sequence
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   88
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

8fbd : 49c3                     eor #$c3
8fbf : a8                       tay
8fc0 : c0c3                     cpy #$c3    ;test result
                                trap_ne
8fc2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8fc4 : 68                       pla         ;load status
                                eor_flag 0
8fc5 : 0908            >            ora #decmode        ;ignore decimal mode bit
8fc7 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8fc9 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
8fcc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8fce : a900            >            lda #0             ;allow test to change I-flag (no mask)
8fd0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8fd2 : 48              >            pha         ;use stack to load status
8fd3 : 28              >            plp
                        
8fd4 : a40c                     ldy zp1+1
8fd6 : 08                       php         ;test stores do not alter flags
8fd7 : 98                       tya
8fd8 : 49c3                     eor #$c3
8fda : a8                       tay
8fdb : 28                       plp
8fdc : 8c0402                   sty abst+1
8fdf : 08                       php         ;flags after load/store sequence
8fe0 : 49c3                     eor #$c3
8fe2 : a8                       tay
8fe3 : c082                     cpy #$82    ;test result
                                trap_ne
8fe5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
8fe7 : 68                       pla         ;load status
                                eor_flag 0
8fe8 : 0908            >            ora #decmode        ;ignore decimal mode bit
8fea : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
8fec : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
8fef : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
8ff1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
8ff3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
8ff5 : 48              >            pha         ;use stack to load status
8ff6 : 28              >            plp
                        
8ff7 : a40d                     ldy zp1+2
8ff9 : 08                       php         ;test stores do not alter flags
8ffa : 98                       tya
8ffb : 49c3                     eor #$c3
8ffd : a8                       tay
8ffe : 28                       plp
8fff : 8c0502                   sty abst+2
9002 : 08                       php         ;flags after load/store sequence
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   89
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9003 : 49c3                     eor #$c3
9005 : a8                       tay
9006 : c041                     cpy #$41    ;test result
                                trap_ne
9008 : d0fe            >        bne *           ;failed not equal (non zero)
                        
900a : 68                       pla         ;load status
                                eor_flag 0
900b : 0908            >            ora #decmode        ;ignore decimal mode bit
900d : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
900f : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
9012 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
9014 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9016 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9018 : 48              >            pha         ;use stack to load status
9019 : 28              >            plp
                        
901a : a40e                     ldy zp1+3
901c : 08                       php         ;test stores do not alter flags
901d : 98                       tya
901e : 49c3                     eor #$c3
9020 : a8                       tay
9021 : 28                       plp
9022 : 8c0602                   sty abst+3
9025 : 08                       php         ;flags after load/store sequence
9026 : 49c3                     eor #$c3
9028 : a8                       tay
9029 : c000                     cpy #0      ;test result
                                trap_ne
902b : d0fe            >        bne *           ;failed not equal (non zero)
                        
902d : 68                       pla         ;load status
                                eor_flag 0
902e : 0908            >            ora #decmode        ;ignore decimal mode bit
9030 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9032 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
9035 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
9037 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9039 : 29ef            >			and #~break         ;force B flag to become 0
                       >
903b : 48              >            pha         ;use stack to load status
903c : 28              >            plp
                        
903d : a40b                     ldy zp1  
903f : 08                       php         ;test stores do not alter flags
9040 : 98                       tya
9041 : 49c3                     eor #$c3
9043 : a8                       tay
9044 : 28                       plp
9045 : 8c0302                   sty abst  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   90
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9048 : 08                       php         ;flags after load/store sequence
9049 : 49c3                     eor #$c3
904b : a8                       tay
904c : c0c3                     cpy #$c3    ;test result
                                trap_ne
904e : d0fe            >        bne *           ;failed not equal (non zero)
                        
9050 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9051 : 0908            >            ora #decmode        ;ignore decimal mode bit
9053 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9055 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
9058 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
905a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
905c : 29ef            >			and #~break         ;force B flag to become 0
                       >
905e : 48              >            pha         ;use stack to load status
905f : 28              >            plp
                        
9060 : a40c                     ldy zp1+1
9062 : 08                       php         ;test stores do not alter flags
9063 : 98                       tya
9064 : 49c3                     eor #$c3
9066 : a8                       tay
9067 : 28                       plp
9068 : 8c0402                   sty abst+1
906b : 08                       php         ;flags after load/store sequence
906c : 49c3                     eor #$c3
906e : a8                       tay
906f : c082                     cpy #$82   ;test result
                                trap_ne
9071 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9073 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9074 : 0908            >            ora #decmode        ;ignore decimal mode bit
9076 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9078 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
907b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
907d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
907f : 29ef            >			and #~break         ;force B flag to become 0
                       >
9081 : 48              >            pha         ;use stack to load status
9082 : 28              >            plp
                        
9083 : a40d                     ldy zp1+2
9085 : 08                       php         ;test stores do not alter flags
9086 : 98                       tya
9087 : 49c3                     eor #$c3
9089 : a8                       tay
908a : 28                       plp
908b : 8c0502                   sty abst+2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   91
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

908e : 08                       php         ;flags after load/store sequence
908f : 49c3                     eor #$c3
9091 : a8                       tay
9092 : c041                     cpy #$41    ;test result
                                trap_ne
9094 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9096 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9097 : 0908            >            ora #decmode        ;ignore decimal mode bit
9099 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
909b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
909e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
90a0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
90a2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
90a4 : 48              >            pha         ;use stack to load status
90a5 : 28              >            plp
                        
90a6 : a40e                     ldy zp1+3
90a8 : 08                       php         ;test stores do not alter flags
90a9 : 98                       tya
90aa : 49c3                     eor #$c3
90ac : a8                       tay
90ad : 28                       plp
90ae : 8c0602                   sty abst+3
90b1 : 08                       php         ;flags after load/store sequence
90b2 : 49c3                     eor #$c3
90b4 : a8                       tay
90b5 : c000                     cpy #0      ;test result
                                trap_ne
90b7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
90b9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
90ba : 0908            >            ora #decmode        ;ignore decimal mode bit
90bc : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
90be : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
90c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
90c3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
90c5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
90c7 : 48              >            pha         ;use stack to load status
90c8 : 28              >            plp
                        
90c9 : ac1802                   ldy abs1  
90cc : 08                       php         ;test stores do not alter flags
90cd : 98                       tya
90ce : 49c3                     eor #$c3
90d0 : a8                       tay
90d1 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   92
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

90d2 : 8402                     sty zpt  
90d4 : 08                       php         ;flags after load/store sequence
90d5 : 49c3                     eor #$c3
90d7 : a8                       tay
90d8 : c40b                     cpy zp1     ;test result
                                trap_ne
90da : d0fe            >        bne *           ;failed not equal (non zero)
                        
90dc : 68                       pla         ;load status
                                eor_flag 0
90dd : 0908            >            ora #decmode        ;ignore decimal mode bit
90df : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
90e1 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
90e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
90e6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
90e8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
90ea : 48              >            pha         ;use stack to load status
90eb : 28              >            plp
                        
90ec : ac1902                   ldy abs1+1
90ef : 08                       php         ;test stores do not alter flags
90f0 : 98                       tya
90f1 : 49c3                     eor #$c3
90f3 : a8                       tay
90f4 : 28                       plp
90f5 : 8403                     sty zpt+1
90f7 : 08                       php         ;flags after load/store sequence
90f8 : 49c3                     eor #$c3
90fa : a8                       tay
90fb : c40c                     cpy zp1+1   ;test result
                                trap_ne
90fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
90ff : 68                       pla         ;load status
                                eor_flag 0
9100 : 0908            >            ora #decmode        ;ignore decimal mode bit
9102 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9104 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
9107 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
9109 : a900            >            lda #0             ;allow test to change I-flag (no mask)
910b : 29ef            >			and #~break         ;force B flag to become 0
                       >
910d : 48              >            pha         ;use stack to load status
910e : 28              >            plp
                        
910f : ac1a02                   ldy abs1+2
9112 : 08                       php         ;test stores do not alter flags
9113 : 98                       tya
9114 : 49c3                     eor #$c3
9116 : a8                       tay
9117 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   93
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9118 : 8404                     sty zpt+2
911a : 08                       php         ;flags after load/store sequence
911b : 49c3                     eor #$c3
911d : a8                       tay
911e : c40d                     cpy zp1+2   ;test result
                                trap_ne
9120 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9122 : 68                       pla         ;load status
                                eor_flag 0
9123 : 0908            >            ora #decmode        ;ignore decimal mode bit
9125 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9127 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
912a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
912c : a900            >            lda #0             ;allow test to change I-flag (no mask)
912e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9130 : 48              >            pha         ;use stack to load status
9131 : 28              >            plp
                        
9132 : ac1b02                   ldy abs1+3
9135 : 08                       php         ;test stores do not alter flags
9136 : 98                       tya
9137 : 49c3                     eor #$c3
9139 : a8                       tay
913a : 28                       plp
913b : 8405                     sty zpt+3
913d : 08                       php         ;flags after load/store sequence
913e : 49c3                     eor #$c3
9140 : a8                       tay
9141 : c40e                     cpy zp1+3   ;test result
                                trap_ne
9143 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9145 : 68                       pla         ;load status
                                eor_flag 0
9146 : 0908            >            ora #decmode        ;ignore decimal mode bit
9148 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
914a : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
914d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
914f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9151 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9153 : 48              >            pha         ;use stack to load status
9154 : 28              >            plp
                        
9155 : ac1802                   ldy abs1  
9158 : 08                       php         ;test stores do not alter flags
9159 : 98                       tya
915a : 49c3                     eor #$c3
915c : a8                       tay
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   94
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

915d : 28                       plp
915e : 8402                     sty zpt  
9160 : 08                       php         ;flags after load/store sequence
9161 : 49c3                     eor #$c3
9163 : a8                       tay
9164 : c50b                     cmp zp1     ;test result
                                trap_ne
9166 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9168 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9169 : 0908            >            ora #decmode        ;ignore decimal mode bit
916b : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
916d : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
9170 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9172 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9174 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9176 : 48              >            pha         ;use stack to load status
9177 : 28              >            plp
                        
9178 : ac1902                   ldy abs1+1
917b : 08                       php         ;test stores do not alter flags
917c : 98                       tya
917d : 49c3                     eor #$c3
917f : a8                       tay
9180 : 28                       plp
9181 : 8403                     sty zpt+1
9183 : 08                       php         ;flags after load/store sequence
9184 : 49c3                     eor #$c3
9186 : a8                       tay
9187 : c50c                     cmp zp1+1   ;test result
                                trap_ne
9189 : d0fe            >        bne *           ;failed not equal (non zero)
                        
918b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
918c : 0908            >            ora #decmode        ;ignore decimal mode bit
918e : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9190 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
9193 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9195 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9197 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9199 : 48              >            pha         ;use stack to load status
919a : 28              >            plp
                        
919b : ac1a02                   ldy abs1+2
919e : 08                       php         ;test stores do not alter flags
919f : 98                       tya
91a0 : 49c3                     eor #$c3
91a2 : a8                       tay
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   95
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

91a3 : 28                       plp
91a4 : 8404                     sty zpt+2
91a6 : 08                       php         ;flags after load/store sequence
91a7 : 49c3                     eor #$c3
91a9 : a8                       tay
91aa : c50d                     cmp zp1+2   ;test result
                                trap_ne
91ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
91ae : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
91af : 0908            >            ora #decmode        ;ignore decimal mode bit
91b1 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
91b3 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
91b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
91b8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
91ba : 29ef            >			and #~break         ;force B flag to become 0
                       >
91bc : 48              >            pha         ;use stack to load status
91bd : 28              >            plp
                        
91be : ac1b02                   ldy abs1+3
91c1 : 08                       php         ;test stores do not alter flags
91c2 : 98                       tya
91c3 : 49c3                     eor #$c3
91c5 : a8                       tay
91c6 : 28                       plp
91c7 : 8405                     sty zpt+3
91c9 : 08                       php         ;flags after load/store sequence
91ca : 49c3                     eor #$c3
91cc : a8                       tay
91cd : c50e                     cmp zp1+3   ;test result
                                trap_ne
91cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
91d1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
91d2 : 0908            >            ora #decmode        ;ignore decimal mode bit
91d4 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
91d6 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
91d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
91db : a900            >            lda #0             ;allow test to change I-flag (no mask)
91dd : 29ef            >			and #~break         ;force B flag to become 0
                       >
91df : 48              >            pha         ;use stack to load status
91e0 : 28              >            plp
                        
91e1 : a0c3                     ldy #$c3  
91e3 : 08                       php
91e4 : cc1802                   cpy abs1    ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   96
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
91e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
91e9 : 68                       pla         ;load status
                                eor_flag 0
91ea : 0908            >            ora #decmode        ;ignore decimal mode bit
91ec : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
91ee : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
91f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
91f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
91f5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
91f7 : 48              >            pha         ;use stack to load status
91f8 : 28              >            plp
                        
91f9 : a082                     ldy #$82
91fb : 08                       php
91fc : cc1902                   cpy abs1+1  ;test result
                                trap_ne
91ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
9201 : 68                       pla         ;load status
                                eor_flag 0
9202 : 0908            >            ora #decmode        ;ignore decimal mode bit
9204 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9206 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
9209 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
920b : a900            >            lda #0             ;allow test to change I-flag (no mask)
920d : 29ef            >			and #~break         ;force B flag to become 0
                       >
920f : 48              >            pha         ;use stack to load status
9210 : 28              >            plp
                        
9211 : a041                     ldy #$41
9213 : 08                       php
9214 : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
9217 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9219 : 68                       pla         ;load status
                                eor_flag 0
921a : 0908            >            ora #decmode        ;ignore decimal mode bit
921c : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
921e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
9221 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
9223 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9225 : 29ef            >			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   97
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
9227 : 48              >            pha         ;use stack to load status
9228 : 28              >            plp
                        
9229 : a000                     ldy #0
922b : 08                       php
922c : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
922f : d0fe            >        bne *           ;failed not equal (non zero)
                        
9231 : 68                       pla         ;load status
                                eor_flag 0
9232 : 0908            >            ora #decmode        ;ignore decimal mode bit
9234 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9236 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
9239 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
923b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
923d : 29ef            >			and #~break         ;force B flag to become 0
                       >
923f : 48              >            pha         ;use stack to load status
9240 : 28              >            plp
                        
9241 : a0c3                     ldy #$c3  
9243 : 08                       php
9244 : cc1802                   cpy abs1    ;test result
                                trap_ne
9247 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9249 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
924a : 0908            >            ora #decmode        ;ignore decimal mode bit
924c : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
924e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
9251 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9253 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9255 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9257 : 48              >            pha         ;use stack to load status
9258 : 28              >            plp
                        
9259 : a082                     ldy #$82
925b : 08                       php
925c : cc1902                   cpy abs1+1  ;test result
                                trap_ne
925f : d0fe            >        bne *           ;failed not equal (non zero)
                        
9261 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9262 : 0908            >            ora #decmode        ;ignore decimal mode bit
9264 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   98
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9266 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
9269 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
926b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
926d : 29ef            >			and #~break         ;force B flag to become 0
                       >
926f : 48              >            pha         ;use stack to load status
9270 : 28              >            plp
                        
9271 : a041                     ldy #$41
9273 : 08                       php
9274 : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
9277 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9279 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
927a : 0908            >            ora #decmode        ;ignore decimal mode bit
927c : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
927e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
9281 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9283 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9285 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9287 : 48              >            pha         ;use stack to load status
9288 : 28              >            plp
                        
9289 : a000                     ldy #0
928b : 08                       php
928c : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
928f : d0fe            >        bne *           ;failed not equal (non zero)
                        
9291 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9292 : 0908            >            ora #decmode        ;ignore decimal mode bit
9294 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9296 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
9299 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
929b : a000                     ldy #0
929d : a502                     lda zpt  
929f : 49c3                     eor #$c3
92a1 : c50b                     cmp zp1  
                                trap_ne     ;store to zp   data
92a3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
92a5 : 8402                     sty zpt     ;clear                
92a7 : ad0302                   lda abst  
92aa : 49c3                     eor #$c3
92ac : cd1802                   cmp abs1  
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   99
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne     ;store to abs   data
92af : d0fe            >        bne *           ;failed not equal (non zero)
                        
92b1 : 8c0302                   sty abst    ;clear                
92b4 : a503                     lda zpt+1
92b6 : 49c3                     eor #$c3
92b8 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
92ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
92bc : 8403                     sty zpt+1   ;clear                
92be : ad0402                   lda abst+1
92c1 : 49c3                     eor #$c3
92c3 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
92c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
92c8 : 8c0402                   sty abst+1  ;clear                
92cb : a504                     lda zpt+2
92cd : 49c3                     eor #$c3
92cf : c50d                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
92d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
92d3 : 8404                     sty zpt+2   ;clear                
92d5 : ad0502                   lda abst+2
92d8 : 49c3                     eor #$c3
92da : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
92dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
92df : 8c0502                   sty abst+2  ;clear                
92e2 : a505                     lda zpt+3
92e4 : 49c3                     eor #$c3
92e6 : c50e                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
92e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
92ea : 8405                     sty zpt+3   ;clear                
92ec : ad0602                   lda abst+3
92ef : 49c3                     eor #$c3
92f1 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
92f4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
92f6 : 8c0602                   sty abst+3  ;clear                
                                next_test
92f9 : ad0002          >            lda test_case   ;previous test
92fc : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
92fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
9300 : a915            >            lda #test_num   ;*** next tests' number
9302 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
9305 : a203                     ldx #3
9307 :                  tldax    
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  100
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat 0
                       >            load_flag 0
9307 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9309 : 29ef            >			and #~break         ;force B flag to become 0
                       >
930b : 48              >            pha         ;use stack to load status
930c : 28              >            plp
                        
930d : b50b                     lda zp1,x
930f : 08                       php         ;test stores do not alter flags
9310 : 49c3                     eor #$c3
9312 : 28                       plp
9313 : 9d0302                   sta abst,x
9316 : 08                       php         ;flags after load/store sequence
9317 : 49c3                     eor #$c3
9319 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
931c : d0fe            >        bne *           ;failed not equal (non zero)
                        
931e : 68                       pla         ;load status
                                eor_flag 0
931f : 0908            >            ora #decmode        ;ignore decimal mode bit
9321 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9323 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
9326 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9328 : ca                       dex
9329 : 10dc                     bpl tldax                  
                        
932b : a203                     ldx #3
932d :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
932d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
932f : 29ef            >			and #~break         ;force B flag to become 0
                       >
9331 : 48              >            pha         ;use stack to load status
9332 : 28              >            plp
                        
9333 : b50b                     lda zp1,x
9335 : 08                       php         ;test stores do not alter flags
9336 : 49c3                     eor #$c3
9338 : 28                       plp
9339 : 9d0302                   sta abst,x
933c : 08                       php         ;flags after load/store sequence
933d : 49c3                     eor #$c3
933f : dd1802                   cmp abs1,x   ;test result
                                trap_ne
9342 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9344 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9345 : 0908            >            ora #decmode        ;ignore decimal mode bit
9347 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9349 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
934c : d0fe            >        bne *           ;failed not equal (non zero)
                        
934e : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  101
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

934f : 10dc                     bpl tldax1                  
                        
9351 : a203                     ldx #3
9353 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
9353 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9355 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9357 : 48              >            pha         ;use stack to load status
9358 : 28              >            plp
                        
9359 : bd1802                   lda abs1,x
935c : 08                       php         ;test stores do not alter flags
935d : 49c3                     eor #$c3
935f : 28                       plp
9360 : 9502                     sta zpt,x
9362 : 08                       php         ;flags after load/store sequence
9363 : 49c3                     eor #$c3
9365 : d50b                     cmp zp1,x   ;test result
                                trap_ne
9367 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9369 : 68                       pla         ;load status
                                eor_flag 0
936a : 0908            >            ora #decmode        ;ignore decimal mode bit
936c : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
936e : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
9371 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9373 : ca                       dex
9374 : 10dd                     bpl tldax2                  
                        
9376 : a203                     ldx #3
9378 :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
9378 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
937a : 29ef            >			and #~break         ;force B flag to become 0
                       >
937c : 48              >            pha         ;use stack to load status
937d : 28              >            plp
                        
937e : bd1802                   lda abs1,x
9381 : 08                       php         ;test stores do not alter flags
9382 : 49c3                     eor #$c3
9384 : 28                       plp
9385 : 9502                     sta zpt,x
9387 : 08                       php         ;flags after load/store sequence
9388 : 49c3                     eor #$c3
938a : d50b                     cmp zp1,x   ;test result
                                trap_ne
938c : d0fe            >        bne *           ;failed not equal (non zero)
                        
938e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
938f : 0908            >            ora #decmode        ;ignore decimal mode bit
9391 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9393 : dd1d02                   cmp fLDx,x  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  102
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
9396 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9398 : ca                       dex
9399 : 10dd                     bpl tldax3
                        
939b : a203                     ldx #3      ;testing store result
939d : a000                     ldy #0
939f : b502             tstax   lda zpt,x
93a1 : 49c3                     eor #$c3
93a3 : d50b                     cmp zp1,x
                                trap_ne     ;store to zp,x data
93a5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
93a7 : 9402                     sty zpt,x   ;clear                
93a9 : bd0302                   lda abst,x
93ac : 49c3                     eor #$c3
93ae : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
93b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
93b3 : 8a                       txa
93b4 : 9d0302                   sta abst,x  ;clear                
93b7 : ca                       dex
93b8 : 10e5                     bpl tstax
                                next_test
93ba : ad0002          >            lda test_case   ;previous test
93bd : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
93bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
93c1 : a916            >            lda #test_num   ;*** next tests' number
93c3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
93c6 : a003                     ldy #3
93c8 :                  tlday    
                                set_stat 0
                       >            load_flag 0
93c8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
93ca : 29ef            >			and #~break         ;force B flag to become 0
                       >
93cc : 48              >            pha         ;use stack to load status
93cd : 28              >            plp
                        
93ce : b11c                     lda (ind1),y
93d0 : 08                       php         ;test stores do not alter flags
93d1 : 49c3                     eor #$c3
93d3 : 28                       plp
93d4 : 990302                   sta abst,y
93d7 : 08                       php         ;flags after load/store sequence
93d8 : 49c3                     eor #$c3
93da : d91802                   cmp abs1,y  ;test result
                                trap_ne
93dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
93df : 68                       pla         ;load status
                                eor_flag 0
93e0 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  103
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

93e2 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
93e4 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
93e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
93e9 : 88                       dey
93ea : 10dc                     bpl tlday                  
                        
93ec : a003                     ldy #3
93ee :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
93ee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
93f0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
93f2 : 48              >            pha         ;use stack to load status
93f3 : 28              >            plp
                        
93f4 : b11c                     lda (ind1),y
93f6 : 08                       php         ;test stores do not alter flags
93f7 : 49c3                     eor #$c3
93f9 : 28                       plp
93fa : 990302                   sta abst,y
93fd : 08                       php         ;flags after load/store sequence
93fe : 49c3                     eor #$c3
9400 : d91802                   cmp abs1,y  ;test result
                                trap_ne
9403 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9405 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9406 : 0908            >            ora #decmode        ;ignore decimal mode bit
9408 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
940a : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
940d : d0fe            >        bne *           ;failed not equal (non zero)
                        
940f : 88                       dey
9410 : 10dc                     bpl tlday1                  
                        
9412 : a003                     ldy #3      ;testing store result
9414 : a200                     ldx #0
9416 : b90302           tstay   lda abst,y
9419 : 49c3                     eor #$c3
941b : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
941e : d0fe            >        bne *           ;failed not equal (non zero)
                        
9420 : 8a                       txa
9421 : 990302                   sta abst,y  ;clear                
9424 : 88                       dey
9425 : 10ef                     bpl tstay
                        
9427 : a003                     ldy #3
9429 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
9429 : a900            >            lda #0             ;allow test to change I-flag (no mask)
942b : 29ef            >			and #~break         ;force B flag to become 0
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  104
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

942d : 48              >            pha         ;use stack to load status
942e : 28              >            plp
                        
942f : b91802                   lda abs1,y
9432 : 08                       php         ;test stores do not alter flags
9433 : 49c3                     eor #$c3
9435 : 28                       plp
9436 : 9128                     sta (indt),y
9438 : 08                       php         ;flags after load/store sequence
9439 : 49c3                     eor #$c3
943b : d11c                     cmp (ind1),y    ;test result
                                trap_ne
943d : d0fe            >        bne *           ;failed not equal (non zero)
                        
943f : 68                       pla         ;load status
                                eor_flag 0
9440 : 0908            >            ora #decmode        ;ignore decimal mode bit
9442 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9444 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
9447 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9449 : 88                       dey
944a : 10dd                     bpl tlday2                  
                        
944c : a003                     ldy #3
944e :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
944e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9450 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9452 : 48              >            pha         ;use stack to load status
9453 : 28              >            plp
                        
9454 : b91802                   lda abs1,y
9457 : 08                       php         ;test stores do not alter flags
9458 : 49c3                     eor #$c3
945a : 28                       plp
945b : 9128                     sta (indt),y
945d : 08                       php         ;flags after load/store sequence
945e : 49c3                     eor #$c3
9460 : d11c                     cmp (ind1),y   ;test result
                                trap_ne
9462 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9464 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9465 : 0908            >            ora #decmode        ;ignore decimal mode bit
9467 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9469 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
946c : d0fe            >        bne *           ;failed not equal (non zero)
                        
946e : 88                       dey
946f : 10dd                     bpl tlday3
                                
9471 : a003                     ldy #3      ;testing store result
9473 : a200                     ldx #0
9475 : b90302           tstay1  lda abst,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  105
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9478 : 49c3                     eor #$c3
947a : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
947d : d0fe            >        bne *           ;failed not equal (non zero)
                        
947f : 8a                       txa
9480 : 990302                   sta abst,y  ;clear                
9483 : 88                       dey
9484 : 10ef                     bpl tstay1
                                
9486 : a206                     ldx #6
9488 : a003                     ldy #3
948a :                  tldax4   
                                set_stat 0
                       >            load_flag 0
948a : a900            >            lda #0             ;allow test to change I-flag (no mask)
948c : 29ef            >			and #~break         ;force B flag to become 0
                       >
948e : 48              >            pha         ;use stack to load status
948f : 28              >            plp
                        
9490 : a11c                     lda (ind1,x)
9492 : 08                       php         ;test stores do not alter flags
9493 : 49c3                     eor #$c3
9495 : 28                       plp
9496 : 8128                     sta (indt,x)
9498 : 08                       php         ;flags after load/store sequence
9499 : 49c3                     eor #$c3
949b : d91802                   cmp abs1,y  ;test result
                                trap_ne
949e : d0fe            >        bne *           ;failed not equal (non zero)
                        
94a0 : 68                       pla         ;load status
                                eor_flag 0
94a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
94a3 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
94a5 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
94a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
94aa : ca                       dex
94ab : ca                       dex
94ac : 88                       dey
94ad : 10db                     bpl tldax4                  
                        
94af : a206                     ldx #6
94b1 : a003                     ldy #3
94b3 :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
94b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
94b5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
94b7 : 48              >            pha         ;use stack to load status
94b8 : 28              >            plp
                        
94b9 : a11c                     lda (ind1,x)
94bb : 08                       php         ;test stores do not alter flags
94bc : 49c3                     eor #$c3
94be : 28                       plp
94bf : 8128                     sta (indt,x)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  106
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

94c1 : 08                       php         ;flags after load/store sequence
94c2 : 49c3                     eor #$c3
94c4 : d91802                   cmp abs1,y  ;test result
                                trap_ne
94c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
94c9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
94ca : 0908            >            ora #decmode        ;ignore decimal mode bit
94cc : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
94ce : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
94d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
94d3 : ca                       dex
94d4 : ca                       dex
94d5 : 88                       dey
94d6 : 10db                     bpl tldax5
                        
94d8 : a003                     ldy #3      ;testing store result
94da : a200                     ldx #0
94dc : b90302           tstay2  lda abst,y
94df : 49c3                     eor #$c3
94e1 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
94e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
94e6 : 8a                       txa
94e7 : 990302                   sta abst,y  ;clear                
94ea : 88                       dey
94eb : 10ef                     bpl tstay2
                                next_test
94ed : ad0002          >            lda test_case   ;previous test
94f0 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
94f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
94f4 : a917            >            lda #test_num   ;*** next tests' number
94f6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
94f9 : a2fd                     ldx #3+$fa
94fb : b511             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
94fd : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
9500 : ca                       dex
9501 : e0fa                     cpx #$fa
9503 : b0f6                     bcs tldax6                  
9505 : a2fd                     ldx #3+$fa
9507 : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
950a : 9508                     sta zpt-$fa&$ff,x
950c : ca                       dex
950d : e0fa                     cpx #$fa
950f : b0f6                     bcs tldax7
                                                  
9511 : a203                     ldx #3      ;testing wraparound result
9513 : a000                     ldy #0
9515 : b502             tstax1  lda zpt,x
9517 : d50b                     cmp zp1,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  107
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne     ;store to zp,x data
9519 : d0fe            >        bne *           ;failed not equal (non zero)
                        
951b : 9402                     sty zpt,x   ;clear                
951d : bd0302                   lda abst,x
9520 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
9523 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9525 : 8a                       txa
9526 : 9d0302                   sta abst,x  ;clear                
9529 : ca                       dex
952a : 10e9                     bpl tstax1
                        
952c : a0fb                     ldy #3+$f8
952e : a2fe                     ldx #6+$f8
9530 : a124             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
9532 : 990b01                   sta abst-$f8,y
9535 : ca                       dex
9536 : ca                       dex
9537 : 88                       dey
9538 : c0f8                     cpy #$f8
953a : b0f4                     bcs tlday4
953c : a003                     ldy #3      ;testing wraparound result
953e : a200                     ldx #0
9540 : b90302           tstay4  lda abst,y
9543 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
9546 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9548 : 8a                       txa
9549 : 990302                   sta abst,y  ;clear                
954c : 88                       dey
954d : 10f1                     bpl tstay4
                                
954f : a0fb                     ldy #3+$f8
9551 : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
9554 : 9130                     sta (inwt),y
9556 : 88                       dey
9557 : c0f8                     cpy #$f8
9559 : b0f6                     bcs tlday5                  
955b : a003                     ldy #3      ;testing wraparound result
955d : a200                     ldx #0
955f : b90302           tstay5  lda abst,y
9562 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
9565 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9567 : 8a                       txa
9568 : 990302                   sta abst,y  ;clear                
956b : 88                       dey
956c : 10f1                     bpl tstay5
                        
956e : a0fb                     ldy #3+$f8
9570 : a2fe                     ldx #6+$f8
9572 : b126             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
9574 : 8130                     sta (indt-$f8&$ff,x)
9576 : ca                       dex
9577 : ca                       dex
9578 : 88                       dey
9579 : c0f8                     cpy #$f8
957b : b0f5                     bcs tlday6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  108
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

957d : a003                     ldy #3      ;testing wraparound result
957f : a200                     ldx #0
9581 : b90302           tstay6  lda abst,y
9584 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
9587 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9589 : 8a                       txa
958a : 990302                   sta abst,y  ;clear                
958d : 88                       dey
958e : 10f1                     bpl tstay6
                                next_test
9590 : ad0002          >            lda test_case   ;previous test
9593 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
9595 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
9597 : a918            >            lda #test_num   ;*** next tests' number
9599 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
959c : a900            >            lda #0               ;allow test to change I-flag (no mask)
959e : 29ef            >			and #~break         ;force B flag to become 0
                       >
95a0 : 48              >            pha         ;use stack to load status
95a1 : 28              >            plp
                        
95a2 : a50b                     lda zp1
95a4 : 08                       php         ;test stores do not alter flags
95a5 : 49c3                     eor #$c3
95a7 : 28                       plp
95a8 : 8d0302                   sta abst
95ab : 08                       php         ;flags after load/store sequence
95ac : 49c3                     eor #$c3
95ae : c9c3                     cmp #$c3    ;test result
                                trap_ne
95b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
95b2 : 68                       pla         ;load status
                                eor_flag 0
95b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
95b5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
95b7 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
95ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
95bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
95be : 29ef            >			and #~break         ;force B flag to become 0
                       >
95c0 : 48              >            pha         ;use stack to load status
95c1 : 28              >            plp
                        
95c2 : a50c                     lda zp1+1
95c4 : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  109
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

95c5 : 49c3                     eor #$c3
95c7 : 28                       plp
95c8 : 8d0402                   sta abst+1
95cb : 08                       php         ;flags after load/store sequence
95cc : 49c3                     eor #$c3
95ce : c982                     cmp #$82    ;test result
                                trap_ne
95d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
95d2 : 68                       pla         ;load status
                                eor_flag 0
95d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
95d5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
95d7 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
95da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
95dc : a900            >            lda #0             ;allow test to change I-flag (no mask)
95de : 29ef            >			and #~break         ;force B flag to become 0
                       >
95e0 : 48              >            pha         ;use stack to load status
95e1 : 28              >            plp
                        
95e2 : a50d                     lda zp1+2
95e4 : 08                       php         ;test stores do not alter flags
95e5 : 49c3                     eor #$c3
95e7 : 28                       plp
95e8 : 8d0502                   sta abst+2
95eb : 08                       php         ;flags after load/store sequence
95ec : 49c3                     eor #$c3
95ee : c941                     cmp #$41    ;test result
                                trap_ne
95f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
95f2 : 68                       pla         ;load status
                                eor_flag 0
95f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
95f5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
95f7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
95fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
95fc : a900            >            lda #0             ;allow test to change I-flag (no mask)
95fe : 29ef            >			and #~break         ;force B flag to become 0
                       >
9600 : 48              >            pha         ;use stack to load status
9601 : 28              >            plp
                        
9602 : a50e                     lda zp1+3
9604 : 08                       php         ;test stores do not alter flags
9605 : 49c3                     eor #$c3
9607 : 28                       plp
9608 : 8d0602                   sta abst+3
960b : 08                       php         ;flags after load/store sequence
960c : 49c3                     eor #$c3
960e : c900                     cmp #0      ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  110
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
9610 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9612 : 68                       pla         ;load status
                                eor_flag 0
9613 : 0908            >            ora #decmode        ;ignore decimal mode bit
9615 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9617 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
961a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
961c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
961e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9620 : 48              >            pha         ;use stack to load status
9621 : 28              >            plp
                        
9622 : a50b                     lda zp1  
9624 : 08                       php         ;test stores do not alter flags
9625 : 49c3                     eor #$c3
9627 : 28                       plp
9628 : 8d0302                   sta abst  
962b : 08                       php         ;flags after load/store sequence
962c : 49c3                     eor #$c3
962e : c9c3                     cmp #$c3    ;test result
                                trap_ne
9630 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9632 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9633 : 0908            >            ora #decmode        ;ignore decimal mode bit
9635 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9637 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
963a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
963c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
963e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9640 : 48              >            pha         ;use stack to load status
9641 : 28              >            plp
                        
9642 : a50c                     lda zp1+1
9644 : 08                       php         ;test stores do not alter flags
9645 : 49c3                     eor #$c3
9647 : 28                       plp
9648 : 8d0402                   sta abst+1
964b : 08                       php         ;flags after load/store sequence
964c : 49c3                     eor #$c3
964e : c982                     cmp #$82    ;test result
                                trap_ne
9650 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9652 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9653 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  111
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9655 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9657 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
965a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
965c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
965e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9660 : 48              >            pha         ;use stack to load status
9661 : 28              >            plp
                        
9662 : a50d                     lda zp1+2
9664 : 08                       php         ;test stores do not alter flags
9665 : 49c3                     eor #$c3
9667 : 28                       plp
9668 : 8d0502                   sta abst+2
966b : 08                       php         ;flags after load/store sequence
966c : 49c3                     eor #$c3
966e : c941                     cmp #$41    ;test result
                                trap_ne
9670 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9672 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9673 : 0908            >            ora #decmode        ;ignore decimal mode bit
9675 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9677 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
967a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
967c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
967e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9680 : 48              >            pha         ;use stack to load status
9681 : 28              >            plp
                        
9682 : a50e                     lda zp1+3
9684 : 08                       php         ;test stores do not alter flags
9685 : 49c3                     eor #$c3
9687 : 28                       plp
9688 : 8d0602                   sta abst+3
968b : 08                       php         ;flags after load/store sequence
968c : 49c3                     eor #$c3
968e : c900                     cmp #0      ;test result
                                trap_ne
9690 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9692 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9693 : 0908            >            ora #decmode        ;ignore decimal mode bit
9695 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9697 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
969a : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  112
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat 0
                       >            load_flag 0
969c : a900            >            lda #0             ;allow test to change I-flag (no mask)
969e : 29ef            >			and #~break         ;force B flag to become 0
                       >
96a0 : 48              >            pha         ;use stack to load status
96a1 : 28              >            plp
                        
96a2 : ad1802                   lda abs1  
96a5 : 08                       php         ;test stores do not alter flags
96a6 : 49c3                     eor #$c3
96a8 : 28                       plp
96a9 : 8502                     sta zpt  
96ab : 08                       php         ;flags after load/store sequence
96ac : 49c3                     eor #$c3
96ae : c50b                     cmp zp1     ;test result
                                trap_ne
96b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
96b2 : 68                       pla         ;load status
                                eor_flag 0
96b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
96b5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
96b7 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
96ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
96bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
96be : 29ef            >			and #~break         ;force B flag to become 0
                       >
96c0 : 48              >            pha         ;use stack to load status
96c1 : 28              >            plp
                        
96c2 : ad1902                   lda abs1+1
96c5 : 08                       php         ;test stores do not alter flags
96c6 : 49c3                     eor #$c3
96c8 : 28                       plp
96c9 : 8503                     sta zpt+1
96cb : 08                       php         ;flags after load/store sequence
96cc : 49c3                     eor #$c3
96ce : c50c                     cmp zp1+1   ;test result
                                trap_ne
96d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
96d2 : 68                       pla         ;load status
                                eor_flag 0
96d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
96d5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
96d7 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
96da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
96dc : a900            >            lda #0             ;allow test to change I-flag (no mask)
96de : 29ef            >			and #~break         ;force B flag to become 0
                       >
96e0 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  113
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

96e1 : 28              >            plp
                        
96e2 : ad1a02                   lda abs1+2
96e5 : 08                       php         ;test stores do not alter flags
96e6 : 49c3                     eor #$c3
96e8 : 28                       plp
96e9 : 8504                     sta zpt+2
96eb : 08                       php         ;flags after load/store sequence
96ec : 49c3                     eor #$c3
96ee : c50d                     cmp zp1+2   ;test result
                                trap_ne
96f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
96f2 : 68                       pla         ;load status
                                eor_flag 0
96f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
96f5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
96f7 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
96fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
96fc : a900            >            lda #0             ;allow test to change I-flag (no mask)
96fe : 29ef            >			and #~break         ;force B flag to become 0
                       >
9700 : 48              >            pha         ;use stack to load status
9701 : 28              >            plp
                        
9702 : ad1b02                   lda abs1+3
9705 : 08                       php         ;test stores do not alter flags
9706 : 49c3                     eor #$c3
9708 : 28                       plp
9709 : 8505                     sta zpt+3
970b : 08                       php         ;flags after load/store sequence
970c : 49c3                     eor #$c3
970e : c50e                     cmp zp1+3   ;test result
                                trap_ne
9710 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9712 : 68                       pla         ;load status
                                eor_flag 0
9713 : 0908            >            ora #decmode        ;ignore decimal mode bit
9715 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9717 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
971a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
971c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
971e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9720 : 48              >            pha         ;use stack to load status
9721 : 28              >            plp
                        
9722 : ad1802                   lda abs1  
9725 : 08                       php         ;test stores do not alter flags
9726 : 49c3                     eor #$c3
9728 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  114
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9729 : 8502                     sta zpt  
972b : 08                       php         ;flags after load/store sequence
972c : 49c3                     eor #$c3
972e : c50b                     cmp zp1     ;test result
                                trap_ne
9730 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9732 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9733 : 0908            >            ora #decmode        ;ignore decimal mode bit
9735 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9737 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
973a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
973c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
973e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9740 : 48              >            pha         ;use stack to load status
9741 : 28              >            plp
                        
9742 : ad1902                   lda abs1+1
9745 : 08                       php         ;test stores do not alter flags
9746 : 49c3                     eor #$c3
9748 : 28                       plp
9749 : 8503                     sta zpt+1
974b : 08                       php         ;flags after load/store sequence
974c : 49c3                     eor #$c3
974e : c50c                     cmp zp1+1   ;test result
                                trap_ne
9750 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9752 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9753 : 0908            >            ora #decmode        ;ignore decimal mode bit
9755 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9757 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
975a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
975c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
975e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9760 : 48              >            pha         ;use stack to load status
9761 : 28              >            plp
                        
9762 : ad1a02                   lda abs1+2
9765 : 08                       php         ;test stores do not alter flags
9766 : 49c3                     eor #$c3
9768 : 28                       plp
9769 : 8504                     sta zpt+2
976b : 08                       php         ;flags after load/store sequence
976c : 49c3                     eor #$c3
976e : c50d                     cmp zp1+2   ;test result
                                trap_ne
9770 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  115
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
9772 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9773 : 0908            >            ora #decmode        ;ignore decimal mode bit
9775 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9777 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
977a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
977c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
977e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9780 : 48              >            pha         ;use stack to load status
9781 : 28              >            plp
                        
9782 : ad1b02                   lda abs1+3
9785 : 08                       php         ;test stores do not alter flags
9786 : 49c3                     eor #$c3
9788 : 28                       plp
9789 : 8505                     sta zpt+3
978b : 08                       php         ;flags after load/store sequence
978c : 49c3                     eor #$c3
978e : c50e                     cmp zp1+3   ;test result
                                trap_ne
9790 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9792 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9793 : 0908            >            ora #decmode        ;ignore decimal mode bit
9795 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9797 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
979a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
979c : a900            >            lda #0               ;allow test to change I-flag (no mask)
979e : 29ef            >			and #~break         ;force B flag to become 0
                       >
97a0 : 48              >            pha         ;use stack to load status
97a1 : 28              >            plp
                        
97a2 : a9c3                     lda #$c3
97a4 : 08                       php
97a5 : cd1802                   cmp abs1    ;test result
                                trap_ne
97a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
97aa : 68                       pla         ;load status
                                eor_flag 0
97ab : 0908            >            ora #decmode        ;ignore decimal mode bit
97ad : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
97af : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
97b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  116
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
97b4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
97b6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
97b8 : 48              >            pha         ;use stack to load status
97b9 : 28              >            plp
                        
97ba : a982                     lda #$82
97bc : 08                       php
97bd : cd1902                   cmp abs1+1  ;test result
                                trap_ne
97c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
97c2 : 68                       pla         ;load status
                                eor_flag 0
97c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
97c5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
97c7 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
97ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
97cc : a900            >            lda #0             ;allow test to change I-flag (no mask)
97ce : 29ef            >			and #~break         ;force B flag to become 0
                       >
97d0 : 48              >            pha         ;use stack to load status
97d1 : 28              >            plp
                        
97d2 : a941                     lda #$41
97d4 : 08                       php
97d5 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
97d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
97da : 68                       pla         ;load status
                                eor_flag 0
97db : 0908            >            ora #decmode        ;ignore decimal mode bit
97dd : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
97df : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
97e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
97e4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
97e6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
97e8 : 48              >            pha         ;use stack to load status
97e9 : 28              >            plp
                        
97ea : a900                     lda #0
97ec : 08                       php
97ed : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
97f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
97f2 : 68                       pla         ;load status
                                eor_flag 0
97f3 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  117
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

97f5 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                        
97f7 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
97fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
97fc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
97fe : 29ef            >			and #~break         ;force B flag to become 0
                       >
9800 : 48              >            pha         ;use stack to load status
9801 : 28              >            plp
                        
9802 : a9c3                     lda #$c3  
9804 : 08                       php
9805 : cd1802                   cmp abs1    ;test result
                                trap_ne
9808 : d0fe            >        bne *           ;failed not equal (non zero)
                        
980a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
980b : 0908            >            ora #decmode        ;ignore decimal mode bit
980d : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
980f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
9812 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9814 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9816 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9818 : 48              >            pha         ;use stack to load status
9819 : 28              >            plp
                        
981a : a982                     lda #$82
981c : 08                       php
981d : cd1902                   cmp abs1+1  ;test result
                                trap_ne
9820 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9822 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9823 : 0908            >            ora #decmode        ;ignore decimal mode bit
9825 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9827 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
982a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
982c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
982e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9830 : 48              >            pha         ;use stack to load status
9831 : 28              >            plp
                        
9832 : a941                     lda #$41
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  118
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9834 : 08                       php
9835 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
9838 : d0fe            >        bne *           ;failed not equal (non zero)
                        
983a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
983b : 0908            >            ora #decmode        ;ignore decimal mode bit
983d : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
983f : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
9842 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
9844 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9846 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9848 : 48              >            pha         ;use stack to load status
9849 : 28              >            plp
                        
984a : a900                     lda #0
984c : 08                       php
984d : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
9850 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9852 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
9853 : 0908            >            ora #decmode        ;ignore decimal mode bit
9855 : 496d            >            eor #(lo~fnz |faod)&~break        ;invert expected flags and break disabled + always on bits
                        
9857 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
985a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
985c : a200                     ldx #0
985e : a502                     lda zpt  
9860 : 49c3                     eor #$c3
9862 : c50b                     cmp zp1  
                                trap_ne     ;store to zp data
9864 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9866 : 8602                     stx zpt     ;clear                
9868 : ad0302                   lda abst  
986b : 49c3                     eor #$c3
986d : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
9870 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9872 : 8e0302                   stx abst    ;clear                
9875 : a503                     lda zpt+1
9877 : 49c3                     eor #$c3
9879 : c50c                     cmp zp1+1
                                trap_ne     ;store to zp data
987b : d0fe            >        bne *           ;failed not equal (non zero)
                        
987d : 8603                     stx zpt+1   ;clear                
987f : ad0402                   lda abst+1
9882 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  119
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9884 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
9887 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9889 : 8e0402                   stx abst+1  ;clear                
988c : a504                     lda zpt+2
988e : 49c3                     eor #$c3
9890 : c50d                     cmp zp1+2
                                trap_ne     ;store to zp data
9892 : d0fe            >        bne *           ;failed not equal (non zero)
                        
9894 : 8604                     stx zpt+2   ;clear                
9896 : ad0502                   lda abst+2
9899 : 49c3                     eor #$c3
989b : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
989e : d0fe            >        bne *           ;failed not equal (non zero)
                        
98a0 : 8e0502                   stx abst+2  ;clear                
98a3 : a505                     lda zpt+3
98a5 : 49c3                     eor #$c3
98a7 : c50e                     cmp zp1+3
                                trap_ne     ;store to zp data
98a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
98ab : 8605                     stx zpt+3   ;clear                
98ad : ad0602                   lda abst+3
98b0 : 49c3                     eor #$c3
98b2 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
98b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
98b7 : 8e0602                   stx abst+3  ;clear                
                                next_test
98ba : ad0002          >            lda test_case   ;previous test
98bd : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
98bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
98c1 : a919            >            lda #test_num   ;*** next tests' number
98c3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
98c6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
98c8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
98ca : 48              >            pha         ;use stack to load status
98cb : a9ff            >            lda #$ff     ;precharge accu
98cd : 28              >            plp
                        
98ce : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
98d0 : 08              >            php         ;save flags
98d1 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
98d3 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  120
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
98d5 : 68              >            pla         ;load status
98d6 : 48              >            pha
                       >            cmp_flag fz 
98d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
98d9 : c92a            >            cmp #((fz |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
98db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
98dd : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
98de : a900            >            lda #0             ;allow test to change I-flag (no mask)
98e0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
98e2 : 48              >            pha         ;use stack to load status
98e3 : a901            >            lda #1     ;precharge accu
98e5 : 28              >            plp
                        
98e6 : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
98e8 : 08              >            php         ;save flags
98e9 : c901            >            cmp #1     ;test result
                       >            trap_ne
98eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
98ed : 68              >            pla         ;load status
98ee : 48              >            pha
                       >            cmp_flag fv
98ef : 0908            >            ora #decmode        ;ignore decimal mode bit
98f1 : c968            >            cmp #((fv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
98f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
98f5 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
98f6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
98f8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
98fa : 48              >            pha         ;use stack to load status
98fb : a901            >            lda #1     ;precharge accu
98fd : 28              >            plp
                        
98fe : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
9900 : 08              >            php         ;save flags
9901 : c901            >            cmp #1     ;test result
                       >            trap_ne
9903 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9905 : 68              >            pla         ;load status
9906 : 48              >            pha
                       >            cmp_flag fnz
9907 : 0908            >            ora #decmode        ;ignore decimal mode bit
9909 : c9aa            >            cmp #((fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  121
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

990b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
990d : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
990e : a900            >            lda #0             ;allow test to change I-flag (no mask)
9910 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9912 : 48              >            pha         ;use stack to load status
9913 : a901            >            lda #1     ;precharge accu
9915 : 28              >            plp
                        
9916 : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
9918 : 08              >            php         ;save flags
9919 : c901            >            cmp #1     ;test result
                       >            trap_ne
991b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
991d : 68              >            pla         ;load status
991e : 48              >            pha
                       >            cmp_flag fnv
991f : 0908            >            ora #decmode        ;ignore decimal mode bit
9921 : c9e8            >            cmp #((fnv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9923 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9925 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
9926 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9928 : 29ef            >			and #~break         ;force B flag to become 0
                       >
992a : 48              >            pha         ;use stack to load status
992b : a9ff            >            lda #$ff     ;precharge accu
992d : 28              >            plp
                        
992e : 240e                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
9930 : 08              >            php         ;save flags
9931 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
9933 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9935 : 68              >            pla         ;load status
9936 : 48              >            pha
                       >            cmp_flag ~fnv 
9937 : 0908            >            ora #decmode        ;ignore decimal mode bit
9939 : c92f            >            cmp #((~fnv |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
993b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
993d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
993e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  122
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9940 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9942 : 48              >            pha         ;use stack to load status
9943 : a901            >            lda #1     ;precharge accu
9945 : 28              >            plp
                        
9946 : 240d                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
9948 : 08              >            php         ;save flags
9949 : c901            >            cmp #1     ;test result
                       >            trap_ne
994b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
994d : 68              >            pla         ;load status
994e : 48              >            pha
                       >            cmp_flag ~fnz
994f : 0908            >            ora #decmode        ;ignore decimal mode bit
9951 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9953 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9955 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
9956 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9958 : 29ef            >			and #~break         ;force B flag to become 0
                       >
995a : 48              >            pha         ;use stack to load status
995b : a901            >            lda #1     ;precharge accu
995d : 28              >            plp
                        
995e : 240c                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
9960 : 08              >            php         ;save flags
9961 : c901            >            cmp #1     ;test result
                       >            trap_ne
9963 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9965 : 68              >            pla         ;load status
9966 : 48              >            pha
                       >            cmp_flag ~fv
9967 : 0908            >            ora #decmode        ;ignore decimal mode bit
9969 : c9af            >            cmp #((~fv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
996b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
996d : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
996e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9970 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9972 : 48              >            pha         ;use stack to load status
9973 : a901            >            lda #1     ;precharge accu
9975 : 28              >            plp
                        
9976 : 240b                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  123
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9978 : 08              >            php         ;save flags
9979 : c901            >            cmp #1     ;test result
                       >            trap_ne
997b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
997d : 68              >            pla         ;load status
997e : 48              >            pha
                       >            cmp_flag ~fz
997f : 0908            >            ora #decmode        ;ignore decimal mode bit
9981 : c9ed            >            cmp #((~fz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9983 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9985 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
9986 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9988 : 29ef            >			and #~break         ;force B flag to become 0
                       >
998a : 48              >            pha         ;use stack to load status
998b : a9ff            >            lda #$ff     ;precharge accu
998d : 28              >            plp
                        
998e : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
9991 : 08              >            php         ;save flags
9992 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
9994 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9996 : 68              >            pla         ;load status
9997 : 48              >            pha
                       >            cmp_flag fz 
9998 : 0908            >            ora #decmode        ;ignore decimal mode bit
999a : c92a            >            cmp #((fz |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
999c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
999e : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
999f : a900            >            lda #0             ;allow test to change I-flag (no mask)
99a1 : 29ef            >			and #~break         ;force B flag to become 0
                       >
99a3 : 48              >            pha         ;use stack to load status
99a4 : a901            >            lda #1     ;precharge accu
99a6 : 28              >            plp
                        
99a7 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
99aa : 08              >            php         ;save flags
99ab : c901            >            cmp #1     ;test result
                       >            trap_ne
99ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99af : 68              >            pla         ;load status
99b0 : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  124
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag fv
99b1 : 0908            >            ora #decmode        ;ignore decimal mode bit
99b3 : c968            >            cmp #((fv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
99b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99b7 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
99b8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
99ba : 29ef            >			and #~break         ;force B flag to become 0
                       >
99bc : 48              >            pha         ;use stack to load status
99bd : a901            >            lda #1     ;precharge accu
99bf : 28              >            plp
                        
99c0 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
99c3 : 08              >            php         ;save flags
99c4 : c901            >            cmp #1     ;test result
                       >            trap_ne
99c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99c8 : 68              >            pla         ;load status
99c9 : 48              >            pha
                       >            cmp_flag fnz
99ca : 0908            >            ora #decmode        ;ignore decimal mode bit
99cc : c9aa            >            cmp #((fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
99ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99d0 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
99d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
99d3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
99d5 : 48              >            pha         ;use stack to load status
99d6 : a901            >            lda #1     ;precharge accu
99d8 : 28              >            plp
                        
99d9 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
99dc : 08              >            php         ;save flags
99dd : c901            >            cmp #1     ;test result
                       >            trap_ne
99df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99e1 : 68              >            pla         ;load status
99e2 : 48              >            pha
                       >            cmp_flag fnv
99e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
99e5 : c9e8            >            cmp #((fnv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
99e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99e9 : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  125
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
99ea : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
99ec : 29ef            >			and #~break         ;force B flag to become 0
                       >
99ee : 48              >            pha         ;use stack to load status
99ef : a9ff            >            lda #$ff     ;precharge accu
99f1 : 28              >            plp
                        
99f2 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
99f5 : 08              >            php         ;save flags
99f6 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
99f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
99fa : 68              >            pla         ;load status
99fb : 48              >            pha
                       >            cmp_flag ~fnv 
99fc : 0908            >            ora #decmode        ;ignore decimal mode bit
99fe : c92f            >            cmp #((~fnv |faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a02 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
9a03 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9a05 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9a07 : 48              >            pha         ;use stack to load status
9a08 : a901            >            lda #1     ;precharge accu
9a0a : 28              >            plp
                        
9a0b : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
9a0e : 08              >            php         ;save flags
9a0f : c901            >            cmp #1     ;test result
                       >            trap_ne
9a11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a13 : 68              >            pla         ;load status
9a14 : 48              >            pha
                       >            cmp_flag ~fnz
9a15 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a17 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a1b : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
9a1c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9a1e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9a20 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  126
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9a21 : a901            >            lda #1     ;precharge accu
9a23 : 28              >            plp
                        
9a24 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
9a27 : 08              >            php         ;save flags
9a28 : c901            >            cmp #1     ;test result
                       >            trap_ne
9a2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a2c : 68              >            pla         ;load status
9a2d : 48              >            pha
                       >            cmp_flag ~fv
9a2e : 0908            >            ora #decmode        ;ignore decimal mode bit
9a30 : c9af            >            cmp #((~fv|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a34 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
9a35 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9a37 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9a39 : 48              >            pha         ;use stack to load status
9a3a : a901            >            lda #1     ;precharge accu
9a3c : 28              >            plp
                        
9a3d : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
9a40 : 08              >            php         ;save flags
9a41 : c901            >            cmp #1     ;test result
                       >            trap_ne
9a43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a45 : 68              >            pla         ;load status
9a46 : 48              >            pha
                       >            cmp_flag ~fz
9a47 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a49 : c9ed            >            cmp #((~fz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a4d : 28              >            plp         ;restore status
                        
                                next_test
9a4e : ad0002          >            lda test_case   ;previous test
9a51 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
9a53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
9a55 : a91a            >            lda #test_num   ;*** next tests' number
9a57 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  127
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
9a5a : a900            >            lda #0             ;allow test to change I-flag (no mask)
9a5c : 29ef            >			and #~break         ;force B flag to become 0
                       >
9a5e : 48              >            pha         ;use stack to load status
9a5f : a280            >            ldx #$80     ;precharge index x
9a61 : 28              >            plp
                        
9a62 : e40f                     cpx zp7f
                                tst_stat fc
9a64 : 08              >            php         ;save status
9a65 : 68              >            pla         ;use stack to retrieve status
9a66 : 48              >            pha
                       >            cmp_flag fc
9a67 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a69 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a6d : 28              >            plp         ;restore status
                        
9a6e : ca                       dex
9a6f : e40f                     cpx zp7f
                                tst_stat fzc
9a71 : 08              >            php         ;save status
9a72 : 68              >            pla         ;use stack to retrieve status
9a73 : 48              >            pha
                       >            cmp_flag fzc
9a74 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a76 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a7a : 28              >            plp         ;restore status
                        
9a7b : ca                       dex
9a7c : e40f                     cpx zp7f
                                tst_x $7e,fn
9a7e : 08              >            php         ;save flags
9a7f : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9a81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a83 : 68              >            pla         ;load status
9a84 : 48              >            pha
                       >            cmp_flag fn
9a85 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a87 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a8b : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
9a8c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9a8e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9a90 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  128
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9a91 : a280            >            ldx #$80     ;precharge index x
9a93 : 28              >            plp
                        
9a94 : e40f                     cpx zp7f
                                tst_stat ~fnz
9a96 : 08              >            php         ;save status
9a97 : 68              >            pla         ;use stack to retrieve status
9a98 : 48              >            pha
                       >            cmp_flag ~fnz
9a99 : 0908            >            ora #decmode        ;ignore decimal mode bit
9a9b : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9a9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9a9f : 28              >            plp         ;restore status
                        
9aa0 : ca                       dex
9aa1 : e40f                     cpx zp7f
                                tst_stat ~fn
9aa3 : 08              >            php         ;save status
9aa4 : 68              >            pla         ;use stack to retrieve status
9aa5 : 48              >            pha
                       >            cmp_flag ~fn
9aa6 : 0908            >            ora #decmode        ;ignore decimal mode bit
9aa8 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9aaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9aac : 28              >            plp         ;restore status
                        
9aad : ca                       dex
9aae : e40f                     cpx zp7f
                                tst_x $7e,~fzc
9ab0 : 08              >            php         ;save flags
9ab1 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9ab3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ab5 : 68              >            pla         ;load status
9ab6 : 48              >            pha
                       >            cmp_flag ~fzc
9ab7 : 0908            >            ora #decmode        ;ignore decimal mode bit
9ab9 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9abb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9abd : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
9abe : a900            >            lda #0             ;allow test to change I-flag (no mask)
9ac0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9ac2 : 48              >            pha         ;use stack to load status
9ac3 : a280            >            ldx #$80     ;precharge index x
9ac5 : 28              >            plp
                        
9ac6 : ec1c02                   cpx abs7f
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  129
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_stat fc
9ac9 : 08              >            php         ;save status
9aca : 68              >            pla         ;use stack to retrieve status
9acb : 48              >            pha
                       >            cmp_flag fc
9acc : 0908            >            ora #decmode        ;ignore decimal mode bit
9ace : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ad0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ad2 : 28              >            plp         ;restore status
                        
9ad3 : ca                       dex
9ad4 : ec1c02                   cpx abs7f
                                tst_stat fzc
9ad7 : 08              >            php         ;save status
9ad8 : 68              >            pla         ;use stack to retrieve status
9ad9 : 48              >            pha
                       >            cmp_flag fzc
9ada : 0908            >            ora #decmode        ;ignore decimal mode bit
9adc : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ade : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ae0 : 28              >            plp         ;restore status
                        
9ae1 : ca                       dex
9ae2 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
9ae5 : 08              >            php         ;save flags
9ae6 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9ae8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9aea : 68              >            pla         ;load status
9aeb : 48              >            pha
                       >            cmp_flag fn
9aec : 0908            >            ora #decmode        ;ignore decimal mode bit
9aee : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9af0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9af2 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
9af3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9af5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9af7 : 48              >            pha         ;use stack to load status
9af8 : a280            >            ldx #$80     ;precharge index x
9afa : 28              >            plp
                        
9afb : ec1c02                   cpx abs7f
                                tst_stat ~fnz
9afe : 08              >            php         ;save status
9aff : 68              >            pla         ;use stack to retrieve status
9b00 : 48              >            pha
                       >            cmp_flag ~fnz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  130
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9b01 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b03 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b07 : 28              >            plp         ;restore status
                        
9b08 : ca                       dex
9b09 : ec1c02                   cpx abs7f
                                tst_stat ~fn
9b0c : 08              >            php         ;save status
9b0d : 68              >            pla         ;use stack to retrieve status
9b0e : 48              >            pha
                       >            cmp_flag ~fn
9b0f : 0908            >            ora #decmode        ;ignore decimal mode bit
9b11 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b15 : 28              >            plp         ;restore status
                        
9b16 : ca                       dex
9b17 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
9b1a : 08              >            php         ;save flags
9b1b : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9b1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b1f : 68              >            pla         ;load status
9b20 : 48              >            pha
                       >            cmp_flag ~fzc
9b21 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b23 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b25 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b27 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
9b28 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9b2a : 29ef            >			and #~break         ;force B flag to become 0
                       >
9b2c : 48              >            pha         ;use stack to load status
9b2d : a280            >            ldx #$80     ;precharge index x
9b2f : 28              >            plp
                        
9b30 : e07f                     cpx #$7f
                                tst_stat fc
9b32 : 08              >            php         ;save status
9b33 : 68              >            pla         ;use stack to retrieve status
9b34 : 48              >            pha
                       >            cmp_flag fc
9b35 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b37 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  131
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9b39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b3b : 28              >            plp         ;restore status
                        
9b3c : ca                       dex
9b3d : e07f                     cpx #$7f
                                tst_stat fzc
9b3f : 08              >            php         ;save status
9b40 : 68              >            pla         ;use stack to retrieve status
9b41 : 48              >            pha
                       >            cmp_flag fzc
9b42 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b44 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b48 : 28              >            plp         ;restore status
                        
9b49 : ca                       dex
9b4a : e07f                     cpx #$7f
                                tst_x $7e,fn
9b4c : 08              >            php         ;save flags
9b4d : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9b4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b51 : 68              >            pla         ;load status
9b52 : 48              >            pha
                       >            cmp_flag fn
9b53 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b55 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b59 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
9b5a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9b5c : 29ef            >			and #~break         ;force B flag to become 0
                       >
9b5e : 48              >            pha         ;use stack to load status
9b5f : a280            >            ldx #$80     ;precharge index x
9b61 : 28              >            plp
                        
9b62 : e07f                     cpx #$7f
                                tst_stat ~fnz
9b64 : 08              >            php         ;save status
9b65 : 68              >            pla         ;use stack to retrieve status
9b66 : 48              >            pha
                       >            cmp_flag ~fnz
9b67 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b69 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b6d : 28              >            plp         ;restore status
                        
9b6e : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  132
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9b6f : e07f                     cpx #$7f
                                tst_stat ~fn
9b71 : 08              >            php         ;save status
9b72 : 68              >            pla         ;use stack to retrieve status
9b73 : 48              >            pha
                       >            cmp_flag ~fn
9b74 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b76 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b7a : 28              >            plp         ;restore status
                        
9b7b : ca                       dex
9b7c : e07f                     cpx #$7f
                                tst_x $7e,~fzc
9b7e : 08              >            php         ;save flags
9b7f : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
9b81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b83 : 68              >            pla         ;load status
9b84 : 48              >            pha
                       >            cmp_flag ~fzc
9b85 : 0908            >            ora #decmode        ;ignore decimal mode bit
9b87 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9b89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9b8b : 28              >            plp         ;restore status
                        
                                next_test
9b8c : ad0002          >            lda test_case   ;previous test
9b8f : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
9b91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
9b93 : a91b            >            lda #test_num   ;*** next tests' number
9b95 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
9b98 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9b9a : 29ef            >			and #~break         ;force B flag to become 0
                       >
9b9c : 48              >            pha         ;use stack to load status
9b9d : a080            >            ldy #$80     ;precharge index y
9b9f : 28              >            plp
                        
9ba0 : c40f                     cpy zp7f
                                tst_stat fc
9ba2 : 08              >            php         ;save status
9ba3 : 68              >            pla         ;use stack to retrieve status
9ba4 : 48              >            pha
                       >            cmp_flag fc
9ba5 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  133
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9ba7 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ba9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bab : 28              >            plp         ;restore status
                        
9bac : 88                       dey
9bad : c40f                     cpy zp7f
                                tst_stat fzc
9baf : 08              >            php         ;save status
9bb0 : 68              >            pla         ;use stack to retrieve status
9bb1 : 48              >            pha
                       >            cmp_flag fzc
9bb2 : 0908            >            ora #decmode        ;ignore decimal mode bit
9bb4 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9bb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bb8 : 28              >            plp         ;restore status
                        
9bb9 : 88                       dey
9bba : c40f                     cpy zp7f
                                tst_y $7e,fn
9bbc : 08              >            php         ;save flags
9bbd : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9bbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bc1 : 68              >            pla         ;load status
9bc2 : 48              >            pha
                       >            cmp_flag fn
9bc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
9bc5 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9bc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bc9 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
9bca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9bcc : 29ef            >			and #~break         ;force B flag to become 0
                       >
9bce : 48              >            pha         ;use stack to load status
9bcf : a080            >            ldy #$80     ;precharge index y
9bd1 : 28              >            plp
                        
9bd2 : c40f                     cpy zp7f
                                tst_stat ~fnz
9bd4 : 08              >            php         ;save status
9bd5 : 68              >            pla         ;use stack to retrieve status
9bd6 : 48              >            pha
                       >            cmp_flag ~fnz
9bd7 : 0908            >            ora #decmode        ;ignore decimal mode bit
9bd9 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9bdb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  134
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9bdd : 28              >            plp         ;restore status
                        
9bde : 88                       dey
9bdf : c40f                     cpy zp7f
                                tst_stat ~fn
9be1 : 08              >            php         ;save status
9be2 : 68              >            pla         ;use stack to retrieve status
9be3 : 48              >            pha
                       >            cmp_flag ~fn
9be4 : 0908            >            ora #decmode        ;ignore decimal mode bit
9be6 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9be8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bea : 28              >            plp         ;restore status
                        
9beb : 88                       dey
9bec : c40f                     cpy zp7f
                                tst_y $7e,~fzc
9bee : 08              >            php         ;save flags
9bef : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9bf1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bf3 : 68              >            pla         ;load status
9bf4 : 48              >            pha
                       >            cmp_flag ~fzc
9bf5 : 0908            >            ora #decmode        ;ignore decimal mode bit
9bf7 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9bf9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9bfb : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
9bfc : a900            >            lda #0             ;allow test to change I-flag (no mask)
9bfe : 29ef            >			and #~break         ;force B flag to become 0
                       >
9c00 : 48              >            pha         ;use stack to load status
9c01 : a080            >            ldy #$80     ;precharge index y
9c03 : 28              >            plp
                        
9c04 : cc1c02                   cpy abs7f
                                tst_stat fc
9c07 : 08              >            php         ;save status
9c08 : 68              >            pla         ;use stack to retrieve status
9c09 : 48              >            pha
                       >            cmp_flag fc
9c0a : 0908            >            ora #decmode        ;ignore decimal mode bit
9c0c : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c10 : 28              >            plp         ;restore status
                        
9c11 : 88                       dey
9c12 : cc1c02                   cpy abs7f
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  135
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_stat fzc
9c15 : 08              >            php         ;save status
9c16 : 68              >            pla         ;use stack to retrieve status
9c17 : 48              >            pha
                       >            cmp_flag fzc
9c18 : 0908            >            ora #decmode        ;ignore decimal mode bit
9c1a : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c1e : 28              >            plp         ;restore status
                        
9c1f : 88                       dey
9c20 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
9c23 : 08              >            php         ;save flags
9c24 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9c26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c28 : 68              >            pla         ;load status
9c29 : 48              >            pha
                       >            cmp_flag fn
9c2a : 0908            >            ora #decmode        ;ignore decimal mode bit
9c2c : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c30 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
9c31 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9c33 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9c35 : 48              >            pha         ;use stack to load status
9c36 : a080            >            ldy #$80     ;precharge index y
9c38 : 28              >            plp
                        
9c39 : cc1c02                   cpy abs7f
                                tst_stat ~fnz
9c3c : 08              >            php         ;save status
9c3d : 68              >            pla         ;use stack to retrieve status
9c3e : 48              >            pha
                       >            cmp_flag ~fnz
9c3f : 0908            >            ora #decmode        ;ignore decimal mode bit
9c41 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c45 : 28              >            plp         ;restore status
                        
9c46 : 88                       dey
9c47 : cc1c02                   cpy abs7f
                                tst_stat ~fn
9c4a : 08              >            php         ;save status
9c4b : 68              >            pla         ;use stack to retrieve status
9c4c : 48              >            pha
                       >            cmp_flag ~fn
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  136
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9c4d : 0908            >            ora #decmode        ;ignore decimal mode bit
9c4f : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c53 : 28              >            plp         ;restore status
                        
9c54 : 88                       dey
9c55 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
9c58 : 08              >            php         ;save flags
9c59 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9c5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c5d : 68              >            pla         ;load status
9c5e : 48              >            pha
                       >            cmp_flag ~fzc
9c5f : 0908            >            ora #decmode        ;ignore decimal mode bit
9c61 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c65 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
9c66 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9c68 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9c6a : 48              >            pha         ;use stack to load status
9c6b : a080            >            ldy #$80     ;precharge index y
9c6d : 28              >            plp
                        
9c6e : c07f                     cpy #$7f
                                tst_stat fc
9c70 : 08              >            php         ;save status
9c71 : 68              >            pla         ;use stack to retrieve status
9c72 : 48              >            pha
                       >            cmp_flag fc
9c73 : 0908            >            ora #decmode        ;ignore decimal mode bit
9c75 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c79 : 28              >            plp         ;restore status
                        
9c7a : 88                       dey
9c7b : c07f                     cpy #$7f
                                tst_stat fzc
9c7d : 08              >            php         ;save status
9c7e : 68              >            pla         ;use stack to retrieve status
9c7f : 48              >            pha
                       >            cmp_flag fzc
9c80 : 0908            >            ora #decmode        ;ignore decimal mode bit
9c82 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  137
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9c84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c86 : 28              >            plp         ;restore status
                        
9c87 : 88                       dey
9c88 : c07f                     cpy #$7f
                                tst_y $7e,fn
9c8a : 08              >            php         ;save flags
9c8b : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9c8d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c8f : 68              >            pla         ;load status
9c90 : 48              >            pha
                       >            cmp_flag fn
9c91 : 0908            >            ora #decmode        ;ignore decimal mode bit
9c93 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9c95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9c97 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
9c98 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9c9a : 29ef            >			and #~break         ;force B flag to become 0
                       >
9c9c : 48              >            pha         ;use stack to load status
9c9d : a080            >            ldy #$80     ;precharge index y
9c9f : 28              >            plp
                        
9ca0 : c07f                     cpy #$7f
                                tst_stat ~fnz
9ca2 : 08              >            php         ;save status
9ca3 : 68              >            pla         ;use stack to retrieve status
9ca4 : 48              >            pha
                       >            cmp_flag ~fnz
9ca5 : 0908            >            ora #decmode        ;ignore decimal mode bit
9ca7 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ca9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9cab : 28              >            plp         ;restore status
                        
9cac : 88                       dey
9cad : c07f                     cpy #$7f
                                tst_stat ~fn
9caf : 08              >            php         ;save status
9cb0 : 68              >            pla         ;use stack to retrieve status
9cb1 : 48              >            pha
                       >            cmp_flag ~fn
9cb2 : 0908            >            ora #decmode        ;ignore decimal mode bit
9cb4 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9cb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9cb8 : 28              >            plp         ;restore status
                        
9cb9 : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  138
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9cba : c07f                     cpy #$7f
                                tst_y $7e,~fzc
9cbc : 08              >            php         ;save flags
9cbd : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
9cbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9cc1 : 68              >            pla         ;load status
9cc2 : 48              >            pha
                       >            cmp_flag ~fzc
9cc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
9cc5 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9cc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9cc9 : 28              >            plp         ;restore status
                        
                                next_test
9cca : ad0002          >            lda test_case   ;previous test
9ccd : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
9ccf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
9cd1 : a91c            >            lda #test_num   ;*** next tests' number
9cd3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
9cd6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9cd8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9cda : 48              >            pha         ;use stack to load status
9cdb : a980            >            lda #$80     ;precharge accu
9cdd : 28              >            plp
                        
9cde : c50f                     cmp zp7f
                                tst_a $80,fc
9ce0 : 08              >            php         ;save flags
9ce1 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9ce3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ce5 : 68              >            pla         ;load status
9ce6 : 48              >            pha
                       >            cmp_flag fc
9ce7 : 0908            >            ora #decmode        ;ignore decimal mode bit
9ce9 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ceb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ced : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9cee : a900            >            lda #0             ;allow test to change I-flag (no mask)
9cf0 : 29ef            >			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  139
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
9cf2 : 48              >            pha         ;use stack to load status
9cf3 : a97f            >            lda #$7f     ;precharge accu
9cf5 : 28              >            plp
                        
9cf6 : c50f                     cmp zp7f
                                tst_a $7f,fzc
9cf8 : 08              >            php         ;save flags
9cf9 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9cfb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9cfd : 68              >            pla         ;load status
9cfe : 48              >            pha
                       >            cmp_flag fzc
9cff : 0908            >            ora #decmode        ;ignore decimal mode bit
9d01 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d05 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
9d06 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9d08 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d0a : 48              >            pha         ;use stack to load status
9d0b : a97e            >            lda #$7e     ;precharge accu
9d0d : 28              >            plp
                        
9d0e : c50f                     cmp zp7f
                                tst_a $7e,fn
9d10 : 08              >            php         ;save flags
9d11 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9d13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d15 : 68              >            pla         ;load status
9d16 : 48              >            pha
                       >            cmp_flag fn
9d17 : 0908            >            ora #decmode        ;ignore decimal mode bit
9d19 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d1d : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
9d1e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9d20 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d22 : 48              >            pha         ;use stack to load status
9d23 : a980            >            lda #$80     ;precharge accu
9d25 : 28              >            plp
                        
9d26 : c50f                     cmp zp7f
                                tst_a $80,~fnz
9d28 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  140
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9d29 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9d2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d2d : 68              >            pla         ;load status
9d2e : 48              >            pha
                       >            cmp_flag ~fnz
9d2f : 0908            >            ora #decmode        ;ignore decimal mode bit
9d31 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d35 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
9d36 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9d38 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d3a : 48              >            pha         ;use stack to load status
9d3b : a97f            >            lda #$7f     ;precharge accu
9d3d : 28              >            plp
                        
9d3e : c50f                     cmp zp7f
                                tst_a $7f,~fn
9d40 : 08              >            php         ;save flags
9d41 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9d43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d45 : 68              >            pla         ;load status
9d46 : 48              >            pha
                       >            cmp_flag ~fn
9d47 : 0908            >            ora #decmode        ;ignore decimal mode bit
9d49 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d4d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
9d4e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9d50 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d52 : 48              >            pha         ;use stack to load status
9d53 : a97e            >            lda #$7e     ;precharge accu
9d55 : 28              >            plp
                        
9d56 : c50f                     cmp zp7f
                                tst_a $7e,~fzc
9d58 : 08              >            php         ;save flags
9d59 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9d5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d5d : 68              >            pla         ;load status
9d5e : 48              >            pha
                       >            cmp_flag ~fzc
9d5f : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  141
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9d61 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d65 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
9d66 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9d68 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d6a : 48              >            pha         ;use stack to load status
9d6b : a980            >            lda #$80     ;precharge accu
9d6d : 28              >            plp
                        
9d6e : cd1c02                   cmp abs7f
                                tst_a $80,fc
9d71 : 08              >            php         ;save flags
9d72 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d76 : 68              >            pla         ;load status
9d77 : 48              >            pha
                       >            cmp_flag fc
9d78 : 0908            >            ora #decmode        ;ignore decimal mode bit
9d7a : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d7e : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9d7f : a900            >            lda #0             ;allow test to change I-flag (no mask)
9d81 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d83 : 48              >            pha         ;use stack to load status
9d84 : a97f            >            lda #$7f     ;precharge accu
9d86 : 28              >            plp
                        
9d87 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
9d8a : 08              >            php         ;save flags
9d8b : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9d8d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d8f : 68              >            pla         ;load status
9d90 : 48              >            pha
                       >            cmp_flag fzc
9d91 : 0908            >            ora #decmode        ;ignore decimal mode bit
9d93 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9d95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9d97 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  142
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_a $7e,0
                       >            load_flag 0
9d98 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9d9a : 29ef            >			and #~break         ;force B flag to become 0
                       >
9d9c : 48              >            pha         ;use stack to load status
9d9d : a97e            >            lda #$7e     ;precharge accu
9d9f : 28              >            plp
                        
9da0 : cd1c02                   cmp abs7f
                                tst_a $7e,fn
9da3 : 08              >            php         ;save flags
9da4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9da6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9da8 : 68              >            pla         ;load status
9da9 : 48              >            pha
                       >            cmp_flag fn
9daa : 0908            >            ora #decmode        ;ignore decimal mode bit
9dac : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9dae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9db0 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
9db1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9db3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9db5 : 48              >            pha         ;use stack to load status
9db6 : a980            >            lda #$80     ;precharge accu
9db8 : 28              >            plp
                        
9db9 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
9dbc : 08              >            php         ;save flags
9dbd : c980            >            cmp #$80     ;test result
                       >            trap_ne
9dbf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9dc1 : 68              >            pla         ;load status
9dc2 : 48              >            pha
                       >            cmp_flag ~fnz
9dc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
9dc5 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9dc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9dc9 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
9dca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9dcc : 29ef            >			and #~break         ;force B flag to become 0
                       >
9dce : 48              >            pha         ;use stack to load status
9dcf : a97f            >            lda #$7f     ;precharge accu
9dd1 : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  143
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
9dd2 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
9dd5 : 08              >            php         ;save flags
9dd6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9dd8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9dda : 68              >            pla         ;load status
9ddb : 48              >            pha
                       >            cmp_flag ~fn
9ddc : 0908            >            ora #decmode        ;ignore decimal mode bit
9dde : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9de0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9de2 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
9de3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9de5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9de7 : 48              >            pha         ;use stack to load status
9de8 : a97e            >            lda #$7e     ;precharge accu
9dea : 28              >            plp
                        
9deb : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
9dee : 08              >            php         ;save flags
9def : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9df1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9df3 : 68              >            pla         ;load status
9df4 : 48              >            pha
                       >            cmp_flag ~fzc
9df5 : 0908            >            ora #decmode        ;ignore decimal mode bit
9df7 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9df9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9dfb : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
9dfc : a900            >            lda #0             ;allow test to change I-flag (no mask)
9dfe : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e00 : 48              >            pha         ;use stack to load status
9e01 : a980            >            lda #$80     ;precharge accu
9e03 : 28              >            plp
                        
9e04 : c97f                     cmp #$7f
                                tst_a $80,fc
9e06 : 08              >            php         ;save flags
9e07 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9e09 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  144
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
9e0b : 68              >            pla         ;load status
9e0c : 48              >            pha
                       >            cmp_flag fc
9e0d : 0908            >            ora #decmode        ;ignore decimal mode bit
9e0f : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9e11 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e13 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9e14 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9e16 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e18 : 48              >            pha         ;use stack to load status
9e19 : a97f            >            lda #$7f     ;precharge accu
9e1b : 28              >            plp
                        
9e1c : c97f                     cmp #$7f
                                tst_a $7f,fzc
9e1e : 08              >            php         ;save flags
9e1f : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9e21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e23 : 68              >            pla         ;load status
9e24 : 48              >            pha
                       >            cmp_flag fzc
9e25 : 0908            >            ora #decmode        ;ignore decimal mode bit
9e27 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9e29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e2b : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
9e2c : a900            >            lda #0             ;allow test to change I-flag (no mask)
9e2e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e30 : 48              >            pha         ;use stack to load status
9e31 : a97e            >            lda #$7e     ;precharge accu
9e33 : 28              >            plp
                        
9e34 : c97f                     cmp #$7f
                                tst_a $7e,fn
9e36 : 08              >            php         ;save flags
9e37 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9e39 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e3b : 68              >            pla         ;load status
9e3c : 48              >            pha
                       >            cmp_flag fn
9e3d : 0908            >            ora #decmode        ;ignore decimal mode bit
9e3f : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  145
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9e41 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e43 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
9e44 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9e46 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e48 : 48              >            pha         ;use stack to load status
9e49 : a980            >            lda #$80     ;precharge accu
9e4b : 28              >            plp
                        
9e4c : c97f                     cmp #$7f
                                tst_a $80,~fnz
9e4e : 08              >            php         ;save flags
9e4f : c980            >            cmp #$80     ;test result
                       >            trap_ne
9e51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e53 : 68              >            pla         ;load status
9e54 : 48              >            pha
                       >            cmp_flag ~fnz
9e55 : 0908            >            ora #decmode        ;ignore decimal mode bit
9e57 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9e59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e5b : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
9e5c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9e5e : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e60 : 48              >            pha         ;use stack to load status
9e61 : a97f            >            lda #$7f     ;precharge accu
9e63 : 28              >            plp
                        
9e64 : c97f                     cmp #$7f
                                tst_a $7f,~fn
9e66 : 08              >            php         ;save flags
9e67 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9e69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e6b : 68              >            pla         ;load status
9e6c : 48              >            pha
                       >            cmp_flag ~fn
9e6d : 0908            >            ora #decmode        ;ignore decimal mode bit
9e6f : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9e71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e73 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
9e74 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9e76 : 29ef            >			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  146
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
9e78 : 48              >            pha         ;use stack to load status
9e79 : a97e            >            lda #$7e     ;precharge accu
9e7b : 28              >            plp
                        
9e7c : c97f                     cmp #$7f
                                tst_a $7e,~fzc
9e7e : 08              >            php         ;save flags
9e7f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9e81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e83 : 68              >            pla         ;load status
9e84 : 48              >            pha
                       >            cmp_flag ~fzc
9e85 : 0908            >            ora #decmode        ;ignore decimal mode bit
9e87 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9e89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e8b : 28              >            plp         ;restore status
                        
                        
9e8c : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
9e8e : a900            >            lda #0             ;allow test to change I-flag (no mask)
9e90 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9e92 : 48              >            pha         ;use stack to load status
9e93 : a980            >            lda #$80     ;precharge accu
9e95 : 28              >            plp
                        
9e96 : d50b                     cmp zp1,x
                                tst_a $80,fc
9e98 : 08              >            php         ;save flags
9e99 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9e9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9e9d : 68              >            pla         ;load status
9e9e : 48              >            pha
                       >            cmp_flag fc
9e9f : 0908            >            ora #decmode        ;ignore decimal mode bit
9ea1 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ea3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ea5 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9ea6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9ea8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9eaa : 48              >            pha         ;use stack to load status
9eab : a97f            >            lda #$7f     ;precharge accu
9ead : 28              >            plp
                        
9eae : d50b                     cmp zp1,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  147
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_a $7f,fzc
9eb0 : 08              >            php         ;save flags
9eb1 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9eb3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9eb5 : 68              >            pla         ;load status
9eb6 : 48              >            pha
                       >            cmp_flag fzc
9eb7 : 0908            >            ora #decmode        ;ignore decimal mode bit
9eb9 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ebb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ebd : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
9ebe : a900            >            lda #0             ;allow test to change I-flag (no mask)
9ec0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9ec2 : 48              >            pha         ;use stack to load status
9ec3 : a97e            >            lda #$7e     ;precharge accu
9ec5 : 28              >            plp
                        
9ec6 : d50b                     cmp zp1,x
                                tst_a $7e,fn
9ec8 : 08              >            php         ;save flags
9ec9 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9ecb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ecd : 68              >            pla         ;load status
9ece : 48              >            pha
                       >            cmp_flag fn
9ecf : 0908            >            ora #decmode        ;ignore decimal mode bit
9ed1 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9ed3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ed5 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
9ed6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9ed8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9eda : 48              >            pha         ;use stack to load status
9edb : a980            >            lda #$80     ;precharge accu
9edd : 28              >            plp
                        
9ede : d50b                     cmp zp1,x
                                tst_a $80,~fnz
9ee0 : 08              >            php         ;save flags
9ee1 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9ee3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ee5 : 68              >            pla         ;load status
9ee6 : 48              >            pha
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  148
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            cmp_flag ~fnz
9ee7 : 0908            >            ora #decmode        ;ignore decimal mode bit
9ee9 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9eeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9eed : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
9eee : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9ef0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9ef2 : 48              >            pha         ;use stack to load status
9ef3 : a97f            >            lda #$7f     ;precharge accu
9ef5 : 28              >            plp
                        
9ef6 : d50b                     cmp zp1,x
                                tst_a $7f,~fn
9ef8 : 08              >            php         ;save flags
9ef9 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9efb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9efd : 68              >            pla         ;load status
9efe : 48              >            pha
                       >            cmp_flag ~fn
9eff : 0908            >            ora #decmode        ;ignore decimal mode bit
9f01 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f05 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
9f06 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9f08 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f0a : 48              >            pha         ;use stack to load status
9f0b : a97e            >            lda #$7e     ;precharge accu
9f0d : 28              >            plp
                        
9f0e : d50b                     cmp zp1,x
                                tst_a $7e,~fzc
9f10 : 08              >            php         ;save flags
9f11 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9f13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f15 : 68              >            pla         ;load status
9f16 : 48              >            pha
                       >            cmp_flag ~fzc
9f17 : 0908            >            ora #decmode        ;ignore decimal mode bit
9f19 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f1d : 28              >            plp         ;restore status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  149
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        
                                set_a $80,0
                       >            load_flag 0
9f1e : a900            >            lda #0             ;allow test to change I-flag (no mask)
9f20 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f22 : 48              >            pha         ;use stack to load status
9f23 : a980            >            lda #$80     ;precharge accu
9f25 : 28              >            plp
                        
9f26 : dd1802                   cmp abs1,x
                                tst_a $80,fc
9f29 : 08              >            php         ;save flags
9f2a : c980            >            cmp #$80     ;test result
                       >            trap_ne
9f2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f2e : 68              >            pla         ;load status
9f2f : 48              >            pha
                       >            cmp_flag fc
9f30 : 0908            >            ora #decmode        ;ignore decimal mode bit
9f32 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f36 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9f37 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9f39 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f3b : 48              >            pha         ;use stack to load status
9f3c : a97f            >            lda #$7f     ;precharge accu
9f3e : 28              >            plp
                        
9f3f : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
9f42 : 08              >            php         ;save flags
9f43 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9f45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f47 : 68              >            pla         ;load status
9f48 : 48              >            pha
                       >            cmp_flag fzc
9f49 : 0908            >            ora #decmode        ;ignore decimal mode bit
9f4b : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f4f : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
9f50 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9f52 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f54 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  150
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9f55 : a97e            >            lda #$7e     ;precharge accu
9f57 : 28              >            plp
                        
9f58 : dd1802                   cmp abs1,x
                                tst_a $7e,fn
9f5b : 08              >            php         ;save flags
9f5c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9f5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f60 : 68              >            pla         ;load status
9f61 : 48              >            pha
                       >            cmp_flag fn
9f62 : 0908            >            ora #decmode        ;ignore decimal mode bit
9f64 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f68 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
9f69 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9f6b : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f6d : 48              >            pha         ;use stack to load status
9f6e : a980            >            lda #$80     ;precharge accu
9f70 : 28              >            plp
                        
9f71 : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
9f74 : 08              >            php         ;save flags
9f75 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9f77 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f79 : 68              >            pla         ;load status
9f7a : 48              >            pha
                       >            cmp_flag ~fnz
9f7b : 0908            >            ora #decmode        ;ignore decimal mode bit
9f7d : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f81 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
9f82 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9f84 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f86 : 48              >            pha         ;use stack to load status
9f87 : a97f            >            lda #$7f     ;precharge accu
9f89 : 28              >            plp
                        
9f8a : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
9f8d : 08              >            php         ;save flags
9f8e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  151
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9f90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f92 : 68              >            pla         ;load status
9f93 : 48              >            pha
                       >            cmp_flag ~fn
9f94 : 0908            >            ora #decmode        ;ignore decimal mode bit
9f96 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9f98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9f9a : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
9f9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
9f9d : 29ef            >			and #~break         ;force B flag to become 0
                       >
9f9f : 48              >            pha         ;use stack to load status
9fa0 : a97e            >            lda #$7e     ;precharge accu
9fa2 : 28              >            plp
                        
9fa3 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
9fa6 : 08              >            php         ;save flags
9fa7 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9fa9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fab : 68              >            pla         ;load status
9fac : 48              >            pha
                       >            cmp_flag ~fzc
9fad : 0908            >            ora #decmode        ;ignore decimal mode bit
9faf : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9fb1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fb3 : 28              >            plp         ;restore status
                        
                        
9fb4 : a004                     ldy #4          ;with indexing by Y
9fb6 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
9fb8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9fba : 29ef            >			and #~break         ;force B flag to become 0
                       >
9fbc : 48              >            pha         ;use stack to load status
9fbd : a980            >            lda #$80     ;precharge accu
9fbf : 28              >            plp
                        
9fc0 : d91802                   cmp abs1,y
                                tst_a $80,fc
9fc3 : 08              >            php         ;save flags
9fc4 : c980            >            cmp #$80     ;test result
                       >            trap_ne
9fc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fc8 : 68              >            pla         ;load status
9fc9 : 48              >            pha
                       >            cmp_flag fc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  152
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

9fca : 0908            >            ora #decmode        ;ignore decimal mode bit
9fcc : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9fce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fd0 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
9fd1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
9fd3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
9fd5 : 48              >            pha         ;use stack to load status
9fd6 : a97f            >            lda #$7f     ;precharge accu
9fd8 : 28              >            plp
                        
9fd9 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
9fdc : 08              >            php         ;save flags
9fdd : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
9fdf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fe1 : 68              >            pla         ;load status
9fe2 : 48              >            pha
                       >            cmp_flag fzc
9fe3 : 0908            >            ora #decmode        ;ignore decimal mode bit
9fe5 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
9fe7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9fe9 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
9fea : a900            >            lda #0             ;allow test to change I-flag (no mask)
9fec : 29ef            >			and #~break         ;force B flag to become 0
                       >
9fee : 48              >            pha         ;use stack to load status
9fef : a97e            >            lda #$7e     ;precharge accu
9ff1 : 28              >            plp
                        
9ff2 : d91802                   cmp abs1,y
                                tst_a $7e,fn
9ff5 : 08              >            php         ;save flags
9ff6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
9ff8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
9ffa : 68              >            pla         ;load status
9ffb : 48              >            pha
                       >            cmp_flag fn
9ffc : 0908            >            ora #decmode        ;ignore decimal mode bit
9ffe : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a000 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a002 : 28              >            plp         ;restore status
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  153
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_a $80,$ff
                       >            load_flag $ff
a003 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a005 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a007 : 48              >            pha         ;use stack to load status
a008 : a980            >            lda #$80     ;precharge accu
a00a : 28              >            plp
                        
a00b : d91802                   cmp abs1,y
                                tst_a $80,~fnz
a00e : 08              >            php         ;save flags
a00f : c980            >            cmp #$80     ;test result
                       >            trap_ne
a011 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a013 : 68              >            pla         ;load status
a014 : 48              >            pha
                       >            cmp_flag ~fnz
a015 : 0908            >            ora #decmode        ;ignore decimal mode bit
a017 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a019 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a01b : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
a01c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a01e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a020 : 48              >            pha         ;use stack to load status
a021 : a97f            >            lda #$7f     ;precharge accu
a023 : 28              >            plp
                        
a024 : d91802                   cmp abs1,y
                                tst_a $7f,~fn
a027 : 08              >            php         ;save flags
a028 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
a02a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a02c : 68              >            pla         ;load status
a02d : 48              >            pha
                       >            cmp_flag ~fn
a02e : 0908            >            ora #decmode        ;ignore decimal mode bit
a030 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a032 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a034 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
a035 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a037 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a039 : 48              >            pha         ;use stack to load status
a03a : a97e            >            lda #$7e     ;precharge accu
a03c : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  154
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
a03d : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
a040 : 08              >            php         ;save flags
a041 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
a043 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a045 : 68              >            pla         ;load status
a046 : 48              >            pha
                       >            cmp_flag ~fzc
a047 : 0908            >            ora #decmode        ;ignore decimal mode bit
a049 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a04b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a04d : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
a04e : a900            >            lda #0             ;allow test to change I-flag (no mask)
a050 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a052 : 48              >            pha         ;use stack to load status
a053 : a980            >            lda #$80     ;precharge accu
a055 : 28              >            plp
                        
a056 : c11c                     cmp (ind1,x)
                                tst_a $80,fc
a058 : 08              >            php         ;save flags
a059 : c980            >            cmp #$80     ;test result
                       >            trap_ne
a05b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a05d : 68              >            pla         ;load status
a05e : 48              >            pha
                       >            cmp_flag fc
a05f : 0908            >            ora #decmode        ;ignore decimal mode bit
a061 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a063 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a065 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
a066 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a068 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a06a : 48              >            pha         ;use stack to load status
a06b : a97f            >            lda #$7f     ;precharge accu
a06d : 28              >            plp
                        
a06e : c11c                     cmp (ind1,x)
                                tst_a $7f,fzc
a070 : 08              >            php         ;save flags
a071 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
a073 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  155
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a075 : 68              >            pla         ;load status
a076 : 48              >            pha
                       >            cmp_flag fzc
a077 : 0908            >            ora #decmode        ;ignore decimal mode bit
a079 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a07b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a07d : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
a07e : a900            >            lda #0             ;allow test to change I-flag (no mask)
a080 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a082 : 48              >            pha         ;use stack to load status
a083 : a97e            >            lda #$7e     ;precharge accu
a085 : 28              >            plp
                        
a086 : c11c                     cmp (ind1,x)
                                tst_a $7e,fn
a088 : 08              >            php         ;save flags
a089 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
a08b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a08d : 68              >            pla         ;load status
a08e : 48              >            pha
                       >            cmp_flag fn
a08f : 0908            >            ora #decmode        ;ignore decimal mode bit
a091 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a093 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a095 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
a096 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a098 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a09a : 48              >            pha         ;use stack to load status
a09b : a980            >            lda #$80     ;precharge accu
a09d : 28              >            plp
                        
a09e : c11c                     cmp (ind1,x)
                                tst_a $80,~fnz
a0a0 : 08              >            php         ;save flags
a0a1 : c980            >            cmp #$80     ;test result
                       >            trap_ne
a0a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0a5 : 68              >            pla         ;load status
a0a6 : 48              >            pha
                       >            cmp_flag ~fnz
a0a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
a0a9 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  156
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a0ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0ad : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
a0ae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a0b0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a0b2 : 48              >            pha         ;use stack to load status
a0b3 : a97f            >            lda #$7f     ;precharge accu
a0b5 : 28              >            plp
                        
a0b6 : c11c                     cmp (ind1,x)
                                tst_a $7f,~fn
a0b8 : 08              >            php         ;save flags
a0b9 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
a0bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0bd : 68              >            pla         ;load status
a0be : 48              >            pha
                       >            cmp_flag ~fn
a0bf : 0908            >            ora #decmode        ;ignore decimal mode bit
a0c1 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a0c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0c5 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
a0c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a0c8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a0ca : 48              >            pha         ;use stack to load status
a0cb : a97e            >            lda #$7e     ;precharge accu
a0cd : 28              >            plp
                        
a0ce : c11c                     cmp (ind1,x)
                                tst_a $7e,~fzc
a0d0 : 08              >            php         ;save flags
a0d1 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
a0d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0d5 : 68              >            pla         ;load status
a0d6 : 48              >            pha
                       >            cmp_flag ~fzc
a0d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
a0d9 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a0db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0dd : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
a0de : a900            >            lda #0             ;allow test to change I-flag (no mask)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  157
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a0e0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a0e2 : 48              >            pha         ;use stack to load status
a0e3 : a980            >            lda #$80     ;precharge accu
a0e5 : 28              >            plp
                        
a0e6 : d11c                     cmp (ind1),y
                                tst_a $80,fc
a0e8 : 08              >            php         ;save flags
a0e9 : c980            >            cmp #$80     ;test result
                       >            trap_ne
a0eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0ed : 68              >            pla         ;load status
a0ee : 48              >            pha
                       >            cmp_flag fc
a0ef : 0908            >            ora #decmode        ;ignore decimal mode bit
a0f1 : c929            >            cmp #((fc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a0f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a0f5 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
a0f6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a0f8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a0fa : 48              >            pha         ;use stack to load status
a0fb : a97f            >            lda #$7f     ;precharge accu
a0fd : 28              >            plp
                        
a0fe : d11c                     cmp (ind1),y
                                tst_a $7f,fzc
a100 : 08              >            php         ;save flags
a101 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
a103 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a105 : 68              >            pla         ;load status
a106 : 48              >            pha
                       >            cmp_flag fzc
a107 : 0908            >            ora #decmode        ;ignore decimal mode bit
a109 : c92b            >            cmp #((fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a10b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a10d : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
a10e : a900            >            lda #0             ;allow test to change I-flag (no mask)
a110 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a112 : 48              >            pha         ;use stack to load status
a113 : a97e            >            lda #$7e     ;precharge accu
a115 : 28              >            plp
                        
a116 : d11c                     cmp (ind1),y
                                tst_a $7e,fn
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  158
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a118 : 08              >            php         ;save flags
a119 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
a11b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a11d : 68              >            pla         ;load status
a11e : 48              >            pha
                       >            cmp_flag fn
a11f : 0908            >            ora #decmode        ;ignore decimal mode bit
a121 : c9a8            >            cmp #((fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a123 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a125 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
a126 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a128 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a12a : 48              >            pha         ;use stack to load status
a12b : a980            >            lda #$80     ;precharge accu
a12d : 28              >            plp
                        
a12e : d11c                     cmp (ind1),y
                                tst_a $80,~fnz
a130 : 08              >            php         ;save flags
a131 : c980            >            cmp #$80     ;test result
                       >            trap_ne
a133 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a135 : 68              >            pla         ;load status
a136 : 48              >            pha
                       >            cmp_flag ~fnz
a137 : 0908            >            ora #decmode        ;ignore decimal mode bit
a139 : c96d            >            cmp #((~fnz|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a13b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a13d : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
a13e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a140 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a142 : 48              >            pha         ;use stack to load status
a143 : a97f            >            lda #$7f     ;precharge accu
a145 : 28              >            plp
                        
a146 : d11c                     cmp (ind1),y
                                tst_a $7f,~fn
a148 : 08              >            php         ;save flags
a149 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
a14b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a14d : 68              >            pla         ;load status
a14e : 48              >            pha
                       >            cmp_flag ~fn
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  159
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a14f : 0908            >            ora #decmode        ;ignore decimal mode bit
a151 : c96f            >            cmp #((~fn|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a153 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a155 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
a156 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a158 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a15a : 48              >            pha         ;use stack to load status
a15b : a97e            >            lda #$7e     ;precharge accu
a15d : 28              >            plp
                        
a15e : d11c                     cmp (ind1),y
                                tst_a $7e,~fzc
a160 : 08              >            php         ;save flags
a161 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
a163 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a165 : 68              >            pla         ;load status
a166 : 48              >            pha
                       >            cmp_flag ~fzc
a167 : 0908            >            ora #decmode        ;ignore decimal mode bit
a169 : c9ec            >            cmp #((~fzc|faod)&~break)&m8   ;expected flags break disabled + always on bits
                       >
                       >            trap_ne
a16b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a16d : 28              >            plp         ;restore status
                        
                                next_test
a16e : ad0002          >            lda test_case   ;previous test
a171 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a173 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
a175 : a91d            >            lda #test_num   ;*** next tests' number
a177 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
a17a : a205                     ldx #5
a17c :                  tasl
                                set_ax zps,0
                       >            load_flag 0
a17c : a900            >            lda #0             ;allow test to change I-flag (no mask)
a17e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a180 : 48              >            pha         ;use stack to load status
a181 : b509            >            lda zps,x    ;precharge accu
a183 : 28              >            plp
                        
a184 : 0a                       asl a
                                tst_ax rASL,fASL,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  160
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a185 : 08              >            php         ;save flags
a186 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a189 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a18b : 68              >            pla         ;load status
                       >            eor_flag 0
a18c : 0908            >            ora #decmode        ;ignore decimal mode bit
a18e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a190 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
a193 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a195 : ca                       dex
a196 : 10e4                     bpl tasl
a198 : a205                     ldx #5
a19a :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
a19a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a19c : 29ef            >			and #~break         ;force B flag to become 0
                       >
a19e : 48              >            pha         ;use stack to load status
a19f : b509            >            lda zps,x    ;precharge accu
a1a1 : 28              >            plp
                        
a1a2 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
a1a3 : 08              >            php         ;save flags
a1a4 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a1a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a1a9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a1aa : 0908            >            ora #decmode        ;ignore decimal mode bit
a1ac : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a1ae : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
a1b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a1b3 : ca                       dex
a1b4 : 10e4                     bpl tasl1
                        
a1b6 : a205                     ldx #5
a1b8 :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
a1b8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a1ba : 29ef            >			and #~break         ;force B flag to become 0
                       >
a1bc : 48              >            pha         ;use stack to load status
a1bd : b509            >            lda zps,x    ;precharge accu
a1bf : 28              >            plp
                        
a1c0 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
a1c1 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  161
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a1c2 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a1c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a1c7 : 68              >            pla         ;load status
                       >            eor_flag 0
a1c8 : 0908            >            ora #decmode        ;ignore decimal mode bit
a1ca : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a1cc : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
a1cf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a1d1 : ca                       dex
a1d2 : 10e4                     bpl tlsr
a1d4 : a205                     ldx #5
a1d6 :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
a1d6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a1d8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a1da : 48              >            pha         ;use stack to load status
a1db : b509            >            lda zps,x    ;precharge accu
a1dd : 28              >            plp
                        
a1de : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
a1df : 08              >            php         ;save flags
a1e0 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a1e3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a1e5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a1e6 : 0908            >            ora #decmode        ;ignore decimal mode bit
a1e8 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a1ea : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
a1ed : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a1ef : ca                       dex
a1f0 : 10e4                     bpl tlsr1
                        
a1f2 : a205                     ldx #5
a1f4 :                  trol
                                set_ax zps,0
                       >            load_flag 0
a1f4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a1f6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a1f8 : 48              >            pha         ;use stack to load status
a1f9 : b509            >            lda zps,x    ;precharge accu
a1fb : 28              >            plp
                        
a1fc : 2a                       rol a
                                tst_ax rROL,fROL,0
a1fd : 08              >            php         ;save flags
a1fe : dd2102          >            cmp rROL,x    ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  162
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
a201 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a203 : 68              >            pla         ;load status
                       >            eor_flag 0
a204 : 0908            >            ora #decmode        ;ignore decimal mode bit
a206 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a208 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
a20b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a20d : ca                       dex
a20e : 10e4                     bpl trol
a210 : a205                     ldx #5
a212 :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
a212 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a214 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a216 : 48              >            pha         ;use stack to load status
a217 : b509            >            lda zps,x    ;precharge accu
a219 : 28              >            plp
                        
a21a : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
a21b : 08              >            php         ;save flags
a21c : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a21f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a221 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a222 : 0908            >            ora #decmode        ;ignore decimal mode bit
a224 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a226 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
a229 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a22b : ca                       dex
a22c : 10e4                     bpl trol1
                        
a22e : a205                     ldx #5
a230 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
a230 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a232 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a234 : 48              >            pha         ;use stack to load status
a235 : b509            >            lda zps,x    ;precharge accu
a237 : 28              >            plp
                        
a238 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
a239 : 08              >            php         ;save flags
a23a : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  163
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a23d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a23f : 68              >            pla         ;load status
                       >            eor_flag 0
a240 : 0908            >            ora #decmode        ;ignore decimal mode bit
a242 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a244 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
a247 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a249 : ca                       dex
a24a : 10e4                     bpl trolc
a24c : a205                     ldx #5
a24e :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
a24e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a250 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a252 : 48              >            pha         ;use stack to load status
a253 : b509            >            lda zps,x    ;precharge accu
a255 : 28              >            plp
                        
a256 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
a257 : 08              >            php         ;save flags
a258 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a25b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a25d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a25e : 0908            >            ora #decmode        ;ignore decimal mode bit
a260 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a262 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
a265 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a267 : ca                       dex
a268 : 10e4                     bpl trolc1
                        
a26a : a205                     ldx #5
a26c :                  tror
                                set_ax zps,0
                       >            load_flag 0
a26c : a900            >            lda #0             ;allow test to change I-flag (no mask)
a26e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a270 : 48              >            pha         ;use stack to load status
a271 : b509            >            lda zps,x    ;precharge accu
a273 : 28              >            plp
                        
a274 : 6a                       ror a
                                tst_ax rROR,fROR,0
a275 : 08              >            php         ;save flags
a276 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a279 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  164
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a27b : 68              >            pla         ;load status
                       >            eor_flag 0
a27c : 0908            >            ora #decmode        ;ignore decimal mode bit
a27e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a280 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
a283 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a285 : ca                       dex
a286 : 10e4                     bpl tror
a288 : a205                     ldx #5
a28a :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
a28a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a28c : 29ef            >			and #~break         ;force B flag to become 0
                       >
a28e : 48              >            pha         ;use stack to load status
a28f : b509            >            lda zps,x    ;precharge accu
a291 : 28              >            plp
                        
a292 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
a293 : 08              >            php         ;save flags
a294 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a297 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a299 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a29a : 0908            >            ora #decmode        ;ignore decimal mode bit
a29c : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a29e : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
a2a1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a2a3 : ca                       dex
a2a4 : 10e4                     bpl tror1
                        
a2a6 : a205                     ldx #5
a2a8 :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
a2a8 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a2aa : 29ef            >			and #~break         ;force B flag to become 0
                       >
a2ac : 48              >            pha         ;use stack to load status
a2ad : b509            >            lda zps,x    ;precharge accu
a2af : 28              >            plp
                        
a2b0 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
a2b1 : 08              >            php         ;save flags
a2b2 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a2b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  165
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a2b7 : 68              >            pla         ;load status
                       >            eor_flag 0
a2b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
a2ba : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a2bc : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
a2bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a2c1 : ca                       dex
a2c2 : 10e4                     bpl trorc
a2c4 : a205                     ldx #5
a2c6 :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
a2c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a2c8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a2ca : 48              >            pha         ;use stack to load status
a2cb : b509            >            lda zps,x    ;precharge accu
a2cd : 28              >            plp
                        
a2ce : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
a2cf : 08              >            php         ;save flags
a2d0 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a2d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a2d5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a2d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
a2d8 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a2da : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
a2dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a2df : ca                       dex
a2e0 : 10e4                     bpl trorc1
                                next_test
a2e2 : ad0002          >            lda test_case   ;previous test
a2e5 : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a2e7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
a2e9 : a91e            >            lda #test_num   ;*** next tests' number
a2eb : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
a2ee : a205                     ldx #5
a2f0 :                  tasl2
                                set_z zps,0
                       >            load_flag 0
a2f0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a2f2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  166
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a2f4 : 48              >            pha         ;use stack to load status
a2f5 : b509            >            lda zps,x    ;load to zeropage
a2f7 : 8502            >            sta zpt
a2f9 : 28              >            plp
                        
a2fa : 0602                     asl zpt
                                tst_z rASL,fASL,0
a2fc : 08              >            php         ;save flags
a2fd : a502            >            lda zpt
a2ff : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a302 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a304 : 68              >            pla         ;load status
                       >            eor_flag 0
a305 : 0908            >            ora #decmode        ;ignore decimal mode bit
a307 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a309 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a30c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a30e : ca                       dex
a30f : 10df                     bpl tasl2
a311 : a205                     ldx #5
a313 :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
a313 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a315 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a317 : 48              >            pha         ;use stack to load status
a318 : b509            >            lda zps,x    ;load to zeropage
a31a : 8502            >            sta zpt
a31c : 28              >            plp
                        
a31d : 0602                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
a31f : 08              >            php         ;save flags
a320 : a502            >            lda zpt
a322 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a325 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a327 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a328 : 0908            >            ora #decmode        ;ignore decimal mode bit
a32a : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a32c : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a32f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a331 : ca                       dex
a332 : 10df                     bpl tasl3
                        
a334 : a205                     ldx #5
a336 :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  167
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a336 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a338 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a33a : 48              >            pha         ;use stack to load status
a33b : b509            >            lda zps,x    ;load to zeropage
a33d : 8502            >            sta zpt
a33f : 28              >            plp
                        
a340 : 4602                     lsr zpt
                                tst_z rLSR,fLSR,0
a342 : 08              >            php         ;save flags
a343 : a502            >            lda zpt
a345 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a348 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a34a : 68              >            pla         ;load status
                       >            eor_flag 0
a34b : 0908            >            ora #decmode        ;ignore decimal mode bit
a34d : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a34f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a352 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a354 : ca                       dex
a355 : 10df                     bpl tlsr2
a357 : a205                     ldx #5
a359 :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
a359 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a35b : 29ef            >			and #~break         ;force B flag to become 0
                       >
a35d : 48              >            pha         ;use stack to load status
a35e : b509            >            lda zps,x    ;load to zeropage
a360 : 8502            >            sta zpt
a362 : 28              >            plp
                        
a363 : 4602                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
a365 : 08              >            php         ;save flags
a366 : a502            >            lda zpt
a368 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a36b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a36d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a36e : 0908            >            ora #decmode        ;ignore decimal mode bit
a370 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a372 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a375 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a377 : ca                       dex
a378 : 10df                     bpl tlsr3
                        
a37a : a205                     ldx #5
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  168
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a37c :                  trol2
                                set_z zps,0
                       >            load_flag 0
a37c : a900            >            lda #0             ;allow test to change I-flag (no mask)
a37e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a380 : 48              >            pha         ;use stack to load status
a381 : b509            >            lda zps,x    ;load to zeropage
a383 : 8502            >            sta zpt
a385 : 28              >            plp
                        
a386 : 2602                     rol zpt
                                tst_z rROL,fROL,0
a388 : 08              >            php         ;save flags
a389 : a502            >            lda zpt
a38b : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a38e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a390 : 68              >            pla         ;load status
                       >            eor_flag 0
a391 : 0908            >            ora #decmode        ;ignore decimal mode bit
a393 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a395 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a398 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a39a : ca                       dex
a39b : 10df                     bpl trol2
a39d : a205                     ldx #5
a39f :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
a39f : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a3a1 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a3a3 : 48              >            pha         ;use stack to load status
a3a4 : b509            >            lda zps,x    ;load to zeropage
a3a6 : 8502            >            sta zpt
a3a8 : 28              >            plp
                        
a3a9 : 2602                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
a3ab : 08              >            php         ;save flags
a3ac : a502            >            lda zpt
a3ae : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a3b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a3b3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a3b4 : 0908            >            ora #decmode        ;ignore decimal mode bit
a3b6 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a3b8 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a3bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a3bd : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  169
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a3be : 10df                     bpl trol3
                        
a3c0 : a205                     ldx #5
a3c2 :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
a3c2 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a3c4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a3c6 : 48              >            pha         ;use stack to load status
a3c7 : b509            >            lda zps,x    ;load to zeropage
a3c9 : 8502            >            sta zpt
a3cb : 28              >            plp
                        
a3cc : 2602                     rol zpt
                                tst_z rROLc,fROLc,0
a3ce : 08              >            php         ;save flags
a3cf : a502            >            lda zpt
a3d1 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a3d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a3d6 : 68              >            pla         ;load status
                       >            eor_flag 0
a3d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
a3d9 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a3db : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a3de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a3e0 : ca                       dex
a3e1 : 10df                     bpl trolc2
a3e3 : a205                     ldx #5
a3e5 :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
a3e5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a3e7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a3e9 : 48              >            pha         ;use stack to load status
a3ea : b509            >            lda zps,x    ;load to zeropage
a3ec : 8502            >            sta zpt
a3ee : 28              >            plp
                        
a3ef : 2602                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
a3f1 : 08              >            php         ;save flags
a3f2 : a502            >            lda zpt
a3f4 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a3f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a3f9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a3fa : 0908            >            ora #decmode        ;ignore decimal mode bit
a3fc : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a3fe : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a401 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  170
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
                        
a403 : ca                       dex
a404 : 10df                     bpl trolc3
                        
a406 : a205                     ldx #5
a408 :                  tror2
                                set_z zps,0
                       >            load_flag 0
a408 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a40a : 29ef            >			and #~break         ;force B flag to become 0
                       >
a40c : 48              >            pha         ;use stack to load status
a40d : b509            >            lda zps,x    ;load to zeropage
a40f : 8502            >            sta zpt
a411 : 28              >            plp
                        
a412 : 6602                     ror zpt
                                tst_z rROR,fROR,0
a414 : 08              >            php         ;save flags
a415 : a502            >            lda zpt
a417 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a41a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a41c : 68              >            pla         ;load status
                       >            eor_flag 0
a41d : 0908            >            ora #decmode        ;ignore decimal mode bit
a41f : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a421 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a424 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a426 : ca                       dex
a427 : 10df                     bpl tror2
a429 : a205                     ldx #5
a42b :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
a42b : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a42d : 29ef            >			and #~break         ;force B flag to become 0
                       >
a42f : 48              >            pha         ;use stack to load status
a430 : b509            >            lda zps,x    ;load to zeropage
a432 : 8502            >            sta zpt
a434 : 28              >            plp
                        
a435 : 6602                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
a437 : 08              >            php         ;save flags
a438 : a502            >            lda zpt
a43a : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a43d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a43f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a440 : 0908            >            ora #decmode        ;ignore decimal mode bit
a442 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  171
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a444 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a447 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a449 : ca                       dex
a44a : 10df                     bpl tror3
                        
a44c : a205                     ldx #5
a44e :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
a44e : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a450 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a452 : 48              >            pha         ;use stack to load status
a453 : b509            >            lda zps,x    ;load to zeropage
a455 : 8502            >            sta zpt
a457 : 28              >            plp
                        
a458 : 6602                     ror zpt
                                tst_z rRORc,fRORc,0
a45a : 08              >            php         ;save flags
a45b : a502            >            lda zpt
a45d : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a460 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a462 : 68              >            pla         ;load status
                       >            eor_flag 0
a463 : 0908            >            ora #decmode        ;ignore decimal mode bit
a465 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a467 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a46a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a46c : ca                       dex
a46d : 10df                     bpl trorc2
a46f : a205                     ldx #5
a471 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
a471 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a473 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a475 : 48              >            pha         ;use stack to load status
a476 : b509            >            lda zps,x    ;load to zeropage
a478 : 8502            >            sta zpt
a47a : 28              >            plp
                        
a47b : 6602                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
a47d : 08              >            php         ;save flags
a47e : a502            >            lda zpt
a480 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a483 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a485 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  172
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a486 : 0908            >            ora #decmode        ;ignore decimal mode bit
a488 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a48a : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a48d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a48f : ca                       dex
a490 : 10df                     bpl trorc3
                                next_test
a492 : ad0002          >            lda test_case   ;previous test
a495 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a497 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
a499 : a91f            >            lda #test_num   ;*** next tests' number
a49b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
a49e : a205                     ldx #5
a4a0 :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
a4a0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a4a2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a4a4 : 48              >            pha         ;use stack to load status
a4a5 : b509            >            lda zps,x    ;load to memory
a4a7 : 8d0302          >            sta abst
a4aa : 28              >            plp
                        
a4ab : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
a4ae : 08              >            php         ;save flags
a4af : ad0302          >            lda abst
a4b2 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a4b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a4b7 : 68              >            pla         ;load status
                       >            eor_flag 0
a4b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
a4ba : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a4bc : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a4bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a4c1 : ca                       dex
a4c2 : 10dc                     bpl tasl4
a4c4 : a205                     ldx #5
a4c6 :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
a4c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a4c8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  173
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a4ca : 48              >            pha         ;use stack to load status
a4cb : b509            >            lda zps,x    ;load to memory
a4cd : 8d0302          >            sta abst
a4d0 : 28              >            plp
                        
a4d1 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
a4d4 : 08              >            php         ;save flags
a4d5 : ad0302          >            lda abst
a4d8 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a4db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a4dd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a4de : 0908            >            ora #decmode        ;ignore decimal mode bit
a4e0 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a4e2 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a4e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a4e7 : ca                       dex
a4e8 : 10dc                     bpl tasl5
                        
a4ea : a205                     ldx #5
a4ec :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
a4ec : a900            >            lda #0             ;allow test to change I-flag (no mask)
a4ee : 29ef            >			and #~break         ;force B flag to become 0
                       >
a4f0 : 48              >            pha         ;use stack to load status
a4f1 : b509            >            lda zps,x    ;load to memory
a4f3 : 8d0302          >            sta abst
a4f6 : 28              >            plp
                        
a4f7 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
a4fa : 08              >            php         ;save flags
a4fb : ad0302          >            lda abst
a4fe : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a501 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a503 : 68              >            pla         ;load status
                       >            eor_flag 0
a504 : 0908            >            ora #decmode        ;ignore decimal mode bit
a506 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a508 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a50b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a50d : ca                       dex
a50e : 10dc                     bpl tlsr4
a510 : a205                     ldx #5
a512 :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  174
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a512 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a514 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a516 : 48              >            pha         ;use stack to load status
a517 : b509            >            lda zps,x    ;load to memory
a519 : 8d0302          >            sta abst
a51c : 28              >            plp
                        
a51d : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
a520 : 08              >            php         ;save flags
a521 : ad0302          >            lda abst
a524 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a527 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a529 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a52a : 0908            >            ora #decmode        ;ignore decimal mode bit
a52c : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a52e : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a531 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a533 : ca                       dex
a534 : 10dc                     bpl tlsr5
                        
a536 : a205                     ldx #5
a538 :                  trol4
                                set_abs zps,0
                       >            load_flag 0
a538 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a53a : 29ef            >			and #~break         ;force B flag to become 0
                       >
a53c : 48              >            pha         ;use stack to load status
a53d : b509            >            lda zps,x    ;load to memory
a53f : 8d0302          >            sta abst
a542 : 28              >            plp
                        
a543 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
a546 : 08              >            php         ;save flags
a547 : ad0302          >            lda abst
a54a : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a54d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a54f : 68              >            pla         ;load status
                       >            eor_flag 0
a550 : 0908            >            ora #decmode        ;ignore decimal mode bit
a552 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a554 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a557 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a559 : ca                       dex
a55a : 10dc                     bpl trol4
a55c : a205                     ldx #5
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  175
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a55e :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
a55e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a560 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a562 : 48              >            pha         ;use stack to load status
a563 : b509            >            lda zps,x    ;load to memory
a565 : 8d0302          >            sta abst
a568 : 28              >            plp
                        
a569 : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
a56c : 08              >            php         ;save flags
a56d : ad0302          >            lda abst
a570 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a573 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a575 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a576 : 0908            >            ora #decmode        ;ignore decimal mode bit
a578 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a57a : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a57d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a57f : ca                       dex
a580 : 10dc                     bpl trol5
                        
a582 : a205                     ldx #5
a584 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
a584 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a586 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a588 : 48              >            pha         ;use stack to load status
a589 : b509            >            lda zps,x    ;load to memory
a58b : 8d0302          >            sta abst
a58e : 28              >            plp
                        
a58f : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
a592 : 08              >            php         ;save flags
a593 : ad0302          >            lda abst
a596 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a599 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a59b : 68              >            pla         ;load status
                       >            eor_flag 0
a59c : 0908            >            ora #decmode        ;ignore decimal mode bit
a59e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a5a0 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a5a3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  176
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a5a5 : ca                       dex
a5a6 : 10dc                     bpl trolc4
a5a8 : a205                     ldx #5
a5aa :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
a5aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a5ac : 29ef            >			and #~break         ;force B flag to become 0
                       >
a5ae : 48              >            pha         ;use stack to load status
a5af : b509            >            lda zps,x    ;load to memory
a5b1 : 8d0302          >            sta abst
a5b4 : 28              >            plp
                        
a5b5 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
a5b8 : 08              >            php         ;save flags
a5b9 : ad0302          >            lda abst
a5bc : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a5bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a5c1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a5c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
a5c4 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a5c6 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a5c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a5cb : ca                       dex
a5cc : 10dc                     bpl trolc5
                        
a5ce : a205                     ldx #5
a5d0 :                  tror4
                                set_abs zps,0
                       >            load_flag 0
a5d0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a5d2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a5d4 : 48              >            pha         ;use stack to load status
a5d5 : b509            >            lda zps,x    ;load to memory
a5d7 : 8d0302          >            sta abst
a5da : 28              >            plp
                        
a5db : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
a5de : 08              >            php         ;save flags
a5df : ad0302          >            lda abst
a5e2 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a5e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a5e7 : 68              >            pla         ;load status
                       >            eor_flag 0
a5e8 : 0908            >            ora #decmode        ;ignore decimal mode bit
a5ea : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a5ec : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  177
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a5ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a5f1 : ca                       dex
a5f2 : 10dc                     bpl tror4
a5f4 : a205                     ldx #5
a5f6 :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
a5f6 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a5f8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a5fa : 48              >            pha         ;use stack to load status
a5fb : b509            >            lda zps,x    ;load to memory
a5fd : 8d0302          >            sta abst
a600 : 28              >            plp
                        
a601 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
a604 : 08              >            php         ;save flags
a605 : ad0302          >            lda abst
a608 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a60b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a60d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a60e : 0908            >            ora #decmode        ;ignore decimal mode bit
a610 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a612 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a615 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a617 : ca                       dex
a618 : 10dc                     bpl tror5
                        
a61a : a205                     ldx #5
a61c :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
a61c : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a61e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a620 : 48              >            pha         ;use stack to load status
a621 : b509            >            lda zps,x    ;load to memory
a623 : 8d0302          >            sta abst
a626 : 28              >            plp
                        
a627 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
a62a : 08              >            php         ;save flags
a62b : ad0302          >            lda abst
a62e : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a631 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a633 : 68              >            pla         ;load status
                       >            eor_flag 0
a634 : 0908            >            ora #decmode        ;ignore decimal mode bit
a636 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  178
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a638 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a63b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a63d : ca                       dex
a63e : 10dc                     bpl trorc4
a640 : a205                     ldx #5
a642 :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
a642 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a644 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a646 : 48              >            pha         ;use stack to load status
a647 : b509            >            lda zps,x    ;load to memory
a649 : 8d0302          >            sta abst
a64c : 28              >            plp
                        
a64d : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
a650 : 08              >            php         ;save flags
a651 : ad0302          >            lda abst
a654 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a657 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a659 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a65a : 0908            >            ora #decmode        ;ignore decimal mode bit
a65c : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a65e : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a661 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a663 : ca                       dex
a664 : 10dc                     bpl trorc5
                                next_test
a666 : ad0002          >            lda test_case   ;previous test
a669 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a66b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
a66d : a920            >            lda #test_num   ;*** next tests' number
a66f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
a672 : a205                     ldx #5
a674 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
a674 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a676 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a678 : 48              >            pha         ;use stack to load status
a679 : b509            >            lda zps,x    ;load to indexed zeropage
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  179
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a67b : 9502            >            sta zpt,x
a67d : 28              >            plp
                        
a67e : 1602                     asl zpt,x
                                tst_zx rASL,fASL,0
a680 : 08              >            php         ;save flags
a681 : b502            >            lda zpt,x
a683 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a686 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a688 : 68              >            pla         ;load status
                       >            eor_flag 0
a689 : 0908            >            ora #decmode        ;ignore decimal mode bit
a68b : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a68d : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a690 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a692 : ca                       dex
a693 : 10df                     bpl tasl6
a695 : a205                     ldx #5
a697 :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
a697 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a699 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a69b : 48              >            pha         ;use stack to load status
a69c : b509            >            lda zps,x    ;load to indexed zeropage
a69e : 9502            >            sta zpt,x
a6a0 : 28              >            plp
                        
a6a1 : 1602                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
a6a3 : 08              >            php         ;save flags
a6a4 : b502            >            lda zpt,x
a6a6 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a6a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a6ab : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a6ac : 0908            >            ora #decmode        ;ignore decimal mode bit
a6ae : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a6b0 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a6b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a6b5 : ca                       dex
a6b6 : 10df                     bpl tasl7
                        
a6b8 : a205                     ldx #5
a6ba :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
a6ba : a900            >            lda #0             ;allow test to change I-flag (no mask)
a6bc : 29ef            >			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  180
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a6be : 48              >            pha         ;use stack to load status
a6bf : b509            >            lda zps,x    ;load to indexed zeropage
a6c1 : 9502            >            sta zpt,x
a6c3 : 28              >            plp
                        
a6c4 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
a6c6 : 08              >            php         ;save flags
a6c7 : b502            >            lda zpt,x
a6c9 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a6cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a6ce : 68              >            pla         ;load status
                       >            eor_flag 0
a6cf : 0908            >            ora #decmode        ;ignore decimal mode bit
a6d1 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a6d3 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a6d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a6d8 : ca                       dex
a6d9 : 10df                     bpl tlsr6
a6db : a205                     ldx #5
a6dd :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
a6dd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a6df : 29ef            >			and #~break         ;force B flag to become 0
                       >
a6e1 : 48              >            pha         ;use stack to load status
a6e2 : b509            >            lda zps,x    ;load to indexed zeropage
a6e4 : 9502            >            sta zpt,x
a6e6 : 28              >            plp
                        
a6e7 : 5602                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
a6e9 : 08              >            php         ;save flags
a6ea : b502            >            lda zpt,x
a6ec : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a6ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a6f1 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a6f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
a6f4 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a6f6 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a6f9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a6fb : ca                       dex
a6fc : 10df                     bpl tlsr7
                        
a6fe : a205                     ldx #5
a700 :                  trol6
                                set_zx zps,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  181
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag 0
a700 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a702 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a704 : 48              >            pha         ;use stack to load status
a705 : b509            >            lda zps,x    ;load to indexed zeropage
a707 : 9502            >            sta zpt,x
a709 : 28              >            plp
                        
a70a : 3602                     rol zpt,x
                                tst_zx rROL,fROL,0
a70c : 08              >            php         ;save flags
a70d : b502            >            lda zpt,x
a70f : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a712 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a714 : 68              >            pla         ;load status
                       >            eor_flag 0
a715 : 0908            >            ora #decmode        ;ignore decimal mode bit
a717 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a719 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a71c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a71e : ca                       dex
a71f : 10df                     bpl trol6
a721 : a205                     ldx #5
a723 :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
a723 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a725 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a727 : 48              >            pha         ;use stack to load status
a728 : b509            >            lda zps,x    ;load to indexed zeropage
a72a : 9502            >            sta zpt,x
a72c : 28              >            plp
                        
a72d : 3602                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
a72f : 08              >            php         ;save flags
a730 : b502            >            lda zpt,x
a732 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a735 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a737 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a738 : 0908            >            ora #decmode        ;ignore decimal mode bit
a73a : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a73c : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a73f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a741 : ca                       dex
a742 : 10df                     bpl trol7
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  182
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a744 : a205                     ldx #5
a746 :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
a746 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a748 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a74a : 48              >            pha         ;use stack to load status
a74b : b509            >            lda zps,x    ;load to indexed zeropage
a74d : 9502            >            sta zpt,x
a74f : 28              >            plp
                        
a750 : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,0
a752 : 08              >            php         ;save flags
a753 : b502            >            lda zpt,x
a755 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a758 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a75a : 68              >            pla         ;load status
                       >            eor_flag 0
a75b : 0908            >            ora #decmode        ;ignore decimal mode bit
a75d : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a75f : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a762 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a764 : ca                       dex
a765 : 10df                     bpl trolc6
a767 : a205                     ldx #5
a769 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
a769 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a76b : 29ef            >			and #~break         ;force B flag to become 0
                       >
a76d : 48              >            pha         ;use stack to load status
a76e : b509            >            lda zps,x    ;load to indexed zeropage
a770 : 9502            >            sta zpt,x
a772 : 28              >            plp
                        
a773 : 3602                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
a775 : 08              >            php         ;save flags
a776 : b502            >            lda zpt,x
a778 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a77b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a77d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a77e : 0908            >            ora #decmode        ;ignore decimal mode bit
a780 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a782 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a785 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  183
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a787 : ca                       dex
a788 : 10df                     bpl trolc7
                        
a78a : a205                     ldx #5
a78c :                  tror6
                                set_zx zps,0
                       >            load_flag 0
a78c : a900            >            lda #0             ;allow test to change I-flag (no mask)
a78e : 29ef            >			and #~break         ;force B flag to become 0
                       >
a790 : 48              >            pha         ;use stack to load status
a791 : b509            >            lda zps,x    ;load to indexed zeropage
a793 : 9502            >            sta zpt,x
a795 : 28              >            plp
                        
a796 : 7602                     ror zpt,x
                                tst_zx rROR,fROR,0
a798 : 08              >            php         ;save flags
a799 : b502            >            lda zpt,x
a79b : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a79e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a7a0 : 68              >            pla         ;load status
                       >            eor_flag 0
a7a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
a7a3 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a7a5 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a7a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a7aa : ca                       dex
a7ab : 10df                     bpl tror6
a7ad : a205                     ldx #5
a7af :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
a7af : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a7b1 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a7b3 : 48              >            pha         ;use stack to load status
a7b4 : b509            >            lda zps,x    ;load to indexed zeropage
a7b6 : 9502            >            sta zpt,x
a7b8 : 28              >            plp
                        
a7b9 : 7602                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
a7bb : 08              >            php         ;save flags
a7bc : b502            >            lda zpt,x
a7be : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a7c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a7c3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a7c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
a7c6 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a7c8 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  184
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a7cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a7cd : ca                       dex
a7ce : 10df                     bpl tror7
                        
a7d0 : a205                     ldx #5
a7d2 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
a7d2 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a7d4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a7d6 : 48              >            pha         ;use stack to load status
a7d7 : b509            >            lda zps,x    ;load to indexed zeropage
a7d9 : 9502            >            sta zpt,x
a7db : 28              >            plp
                        
a7dc : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,0
a7de : 08              >            php         ;save flags
a7df : b502            >            lda zpt,x
a7e1 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a7e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a7e6 : 68              >            pla         ;load status
                       >            eor_flag 0
a7e7 : 0908            >            ora #decmode        ;ignore decimal mode bit
a7e9 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a7eb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a7ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a7f0 : ca                       dex
a7f1 : 10df                     bpl trorc6
a7f3 : a205                     ldx #5
a7f5 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
a7f5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a7f7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a7f9 : 48              >            pha         ;use stack to load status
a7fa : b509            >            lda zps,x    ;load to indexed zeropage
a7fc : 9502            >            sta zpt,x
a7fe : 28              >            plp
                        
a7ff : 7602                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
a801 : 08              >            php         ;save flags
a802 : b502            >            lda zpt,x
a804 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a807 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a809 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a80a : 0908            >            ora #decmode        ;ignore decimal mode bit
a80c : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  185
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a80e : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a811 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a813 : ca                       dex
a814 : 10df                     bpl trorc7
                                next_test
a816 : ad0002          >            lda test_case   ;previous test
a819 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a81b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
a81d : a921            >            lda #test_num   ;*** next tests' number
a81f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
a822 : a205                     ldx #5
a824 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
a824 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a826 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a828 : 48              >            pha         ;use stack to load status
a829 : b509            >            lda zps,x    ;load to indexed memory
a82b : 9d0302          >            sta abst,x
a82e : 28              >            plp
                        
a82f : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
a832 : 08              >            php         ;save flags
a833 : bd0302          >            lda abst,x
a836 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a839 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a83b : 68              >            pla         ;load status
                       >            eor_flag 0
a83c : 0908            >            ora #decmode        ;ignore decimal mode bit
a83e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a840 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a843 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a845 : ca                       dex
a846 : 10dc                     bpl tasl8
a848 : a205                     ldx #5
a84a :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
a84a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a84c : 29ef            >			and #~break         ;force B flag to become 0
                       >
a84e : 48              >            pha         ;use stack to load status
a84f : b509            >            lda zps,x    ;load to indexed memory
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  186
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a851 : 9d0302          >            sta abst,x
a854 : 28              >            plp
                        
a855 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
a858 : 08              >            php         ;save flags
a859 : bd0302          >            lda abst,x
a85c : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
a85f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a861 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a862 : 0908            >            ora #decmode        ;ignore decimal mode bit
a864 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a866 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
a869 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a86b : ca                       dex
a86c : 10dc                     bpl tasl9
                        
a86e : a205                     ldx #5
a870 :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
a870 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a872 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a874 : 48              >            pha         ;use stack to load status
a875 : b509            >            lda zps,x    ;load to indexed memory
a877 : 9d0302          >            sta abst,x
a87a : 28              >            plp
                        
a87b : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
a87e : 08              >            php         ;save flags
a87f : bd0302          >            lda abst,x
a882 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a885 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a887 : 68              >            pla         ;load status
                       >            eor_flag 0
a888 : 0908            >            ora #decmode        ;ignore decimal mode bit
a88a : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a88c : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a88f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a891 : ca                       dex
a892 : 10dc                     bpl tlsr8
a894 : a205                     ldx #5
a896 :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
a896 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a898 : 29ef            >			and #~break         ;force B flag to become 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  187
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
a89a : 48              >            pha         ;use stack to load status
a89b : b509            >            lda zps,x    ;load to indexed memory
a89d : 9d0302          >            sta abst,x
a8a0 : 28              >            plp
                        
a8a1 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
a8a4 : 08              >            php         ;save flags
a8a5 : bd0302          >            lda abst,x
a8a8 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
a8ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a8ad : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a8ae : 0908            >            ora #decmode        ;ignore decimal mode bit
a8b0 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a8b2 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
a8b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a8b7 : ca                       dex
a8b8 : 10dc                     bpl tlsr9
                        
a8ba : a205                     ldx #5
a8bc :                  trol8
                                set_absx zps,0
                       >            load_flag 0
a8bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
a8be : 29ef            >			and #~break         ;force B flag to become 0
                       >
a8c0 : 48              >            pha         ;use stack to load status
a8c1 : b509            >            lda zps,x    ;load to indexed memory
a8c3 : 9d0302          >            sta abst,x
a8c6 : 28              >            plp
                        
a8c7 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
a8ca : 08              >            php         ;save flags
a8cb : bd0302          >            lda abst,x
a8ce : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a8d1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a8d3 : 68              >            pla         ;load status
                       >            eor_flag 0
a8d4 : 0908            >            ora #decmode        ;ignore decimal mode bit
a8d6 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a8d8 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a8db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a8dd : ca                       dex
a8de : 10dc                     bpl trol8
a8e0 : a205                     ldx #5
a8e2 :                  trol9
                                set_absx zps,$ff-fc
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  188
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag $ff-fc
a8e2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a8e4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a8e6 : 48              >            pha         ;use stack to load status
a8e7 : b509            >            lda zps,x    ;load to indexed memory
a8e9 : 9d0302          >            sta abst,x
a8ec : 28              >            plp
                        
a8ed : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
a8f0 : 08              >            php         ;save flags
a8f1 : bd0302          >            lda abst,x
a8f4 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
a8f7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a8f9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a8fa : 0908            >            ora #decmode        ;ignore decimal mode bit
a8fc : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a8fe : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
a901 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a903 : ca                       dex
a904 : 10dc                     bpl trol9
                        
a906 : a205                     ldx #5
a908 :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
a908 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a90a : 29ef            >			and #~break         ;force B flag to become 0
                       >
a90c : 48              >            pha         ;use stack to load status
a90d : b509            >            lda zps,x    ;load to indexed memory
a90f : 9d0302          >            sta abst,x
a912 : 28              >            plp
                        
a913 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
a916 : 08              >            php         ;save flags
a917 : bd0302          >            lda abst,x
a91a : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a91d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a91f : 68              >            pla         ;load status
                       >            eor_flag 0
a920 : 0908            >            ora #decmode        ;ignore decimal mode bit
a922 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a924 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a927 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a929 : ca                       dex
a92a : 10dc                     bpl trolc8
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  189
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

a92c : a205                     ldx #5
a92e :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
a92e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a930 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a932 : 48              >            pha         ;use stack to load status
a933 : b509            >            lda zps,x    ;load to indexed memory
a935 : 9d0302          >            sta abst,x
a938 : 28              >            plp
                        
a939 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
a93c : 08              >            php         ;save flags
a93d : bd0302          >            lda abst,x
a940 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
a943 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a945 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a946 : 0908            >            ora #decmode        ;ignore decimal mode bit
a948 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a94a : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
a94d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a94f : ca                       dex
a950 : 10dc                     bpl trolc9
                        
a952 : a205                     ldx #5
a954 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
a954 : a900            >            lda #0             ;allow test to change I-flag (no mask)
a956 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a958 : 48              >            pha         ;use stack to load status
a959 : b509            >            lda zps,x    ;load to indexed memory
a95b : 9d0302          >            sta abst,x
a95e : 28              >            plp
                        
a95f : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
a962 : 08              >            php         ;save flags
a963 : bd0302          >            lda abst,x
a966 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a969 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a96b : 68              >            pla         ;load status
                       >            eor_flag 0
a96c : 0908            >            ora #decmode        ;ignore decimal mode bit
a96e : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a970 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a973 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  190
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
a975 : ca                       dex
a976 : 10dc                     bpl tror8
a978 : a205                     ldx #5
a97a :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
a97a : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
a97c : 29ef            >			and #~break         ;force B flag to become 0
                       >
a97e : 48              >            pha         ;use stack to load status
a97f : b509            >            lda zps,x    ;load to indexed memory
a981 : 9d0302          >            sta abst,x
a984 : 28              >            plp
                        
a985 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
a988 : 08              >            php         ;save flags
a989 : bd0302          >            lda abst,x
a98c : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
a98f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a991 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a992 : 0908            >            ora #decmode        ;ignore decimal mode bit
a994 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a996 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
a999 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a99b : ca                       dex
a99c : 10dc                     bpl tror9
                        
a99e : a205                     ldx #5
a9a0 :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
a9a0 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
a9a2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a9a4 : 48              >            pha         ;use stack to load status
a9a5 : b509            >            lda zps,x    ;load to indexed memory
a9a7 : 9d0302          >            sta abst,x
a9aa : 28              >            plp
                        
a9ab : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
a9ae : 08              >            php         ;save flags
a9af : bd0302          >            lda abst,x
a9b2 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a9b5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a9b7 : 68              >            pla         ;load status
                       >            eor_flag 0
a9b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
a9ba : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a9bc : dd4b02          >            cmp fRORc,x    ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  191
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
a9bf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a9c1 : ca                       dex
a9c2 : 10dc                     bpl trorc8
a9c4 : a205                     ldx #5
a9c6 :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
a9c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
a9c8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
a9ca : 48              >            pha         ;use stack to load status
a9cb : b509            >            lda zps,x    ;load to indexed memory
a9cd : 9d0302          >            sta abst,x
a9d0 : 28              >            plp
                        
a9d1 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
a9d4 : 08              >            php         ;save flags
a9d5 : bd0302          >            lda abst,x
a9d8 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
a9db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
a9dd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
a9de : 0908            >            ora #decmode        ;ignore decimal mode bit
a9e0 : 496c            >            eor #($ff-fnzc|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
a9e2 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
a9e5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
a9e7 : ca                       dex
a9e8 : 10dc                     bpl trorc9
                                next_test
a9ea : ad0002          >            lda test_case   ;previous test
a9ed : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
a9ef : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
a9f1 : a922            >            lda #test_num   ;*** next tests' number
a9f3 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
a9f6 : a200                     ldx #0
a9f8 : a97e                     lda #$7e
a9fa : 8502                     sta zpt
a9fc :                  tinc    
                                set_stat 0
                       >            load_flag 0
a9fc : a900            >            lda #0             ;allow test to change I-flag (no mask)
a9fe : 29ef            >			and #~break         ;force B flag to become 0
                       >
aa00 : 48              >            pha         ;use stack to load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  192
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

aa01 : 28              >            plp
                        
aa02 : e602                     inc zpt
                                tst_z rINC,fINC,0
aa04 : 08              >            php         ;save flags
aa05 : a502            >            lda zpt
aa07 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aa0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aa0c : 68              >            pla         ;load status
                       >            eor_flag 0
aa0d : 0908            >            ora #decmode        ;ignore decimal mode bit
aa0f : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aa11 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aa14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aa16 : e8                       inx
aa17 : e002                     cpx #2
aa19 : d004                     bne tinc1
aa1b : a9fe                     lda #$fe
aa1d : 8502                     sta zpt
aa1f : e005             tinc1   cpx #5
aa21 : d0d9                     bne tinc
aa23 : ca                       dex
aa24 : e602                     inc zpt
aa26 :                  tdec    
                                set_stat 0
                       >            load_flag 0
aa26 : a900            >            lda #0             ;allow test to change I-flag (no mask)
aa28 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aa2a : 48              >            pha         ;use stack to load status
aa2b : 28              >            plp
                        
aa2c : c602                     dec zpt
                                tst_z rINC,fINC,0
aa2e : 08              >            php         ;save flags
aa2f : a502            >            lda zpt
aa31 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aa34 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aa36 : 68              >            pla         ;load status
                       >            eor_flag 0
aa37 : 0908            >            ora #decmode        ;ignore decimal mode bit
aa39 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aa3b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aa3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aa40 : ca                       dex
aa41 : 300a                     bmi tdec1
aa43 : e001                     cpx #1
aa45 : d0df                     bne tdec
aa47 : a981                     lda #$81
aa49 : 8502                     sta zpt
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  193
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

aa4b : d0d9                     bne tdec
aa4d :                  tdec1
aa4d : a200                     ldx #0
aa4f : a97e                     lda #$7e
aa51 : 8502                     sta zpt
aa53 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
aa53 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
aa55 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aa57 : 48              >            pha         ;use stack to load status
aa58 : 28              >            plp
                        
aa59 : e602                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
aa5b : 08              >            php         ;save flags
aa5c : a502            >            lda zpt
aa5e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aa61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aa63 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
aa64 : 0908            >            ora #decmode        ;ignore decimal mode bit
aa66 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aa68 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aa6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aa6d : e8                       inx
aa6e : e002                     cpx #2
aa70 : d004                     bne tinc11
aa72 : a9fe                     lda #$fe
aa74 : 8502                     sta zpt
aa76 : e005             tinc11  cpx #5
aa78 : d0d9                     bne tinc10
aa7a : ca                       dex
aa7b : e602                     inc zpt
aa7d :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
aa7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
aa7f : 29ef            >			and #~break         ;force B flag to become 0
                       >
aa81 : 48              >            pha         ;use stack to load status
aa82 : 28              >            plp
                        
aa83 : c602                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
aa85 : 08              >            php         ;save flags
aa86 : a502            >            lda zpt
aa88 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aa8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aa8d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
aa8e : 0908            >            ora #decmode        ;ignore decimal mode bit
aa90 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  194
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
aa92 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aa95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aa97 : ca                       dex
aa98 : 300a                     bmi tdec11
aa9a : e001                     cpx #1
aa9c : d0df                     bne tdec10
aa9e : a981                     lda #$81
aaa0 : 8502                     sta zpt
aaa2 : d0d9                     bne tdec10
aaa4 :                  tdec11
                                next_test
aaa4 : ad0002          >            lda test_case   ;previous test
aaa7 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
aaa9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
aaab : a923            >            lda #test_num   ;*** next tests' number
aaad : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
aab0 : a200                     ldx #0
aab2 : a97e                     lda #$7e
aab4 : 8d0302                   sta abst
aab7 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
aab7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
aab9 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aabb : 48              >            pha         ;use stack to load status
aabc : 28              >            plp
                        
aabd : ee0302                   inc abst
                                tst_abs rINC,fINC,0
aac0 : 08              >            php         ;save flags
aac1 : ad0302          >            lda abst
aac4 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aac7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aac9 : 68              >            pla         ;load status
                       >            eor_flag 0
aaca : 0908            >            ora #decmode        ;ignore decimal mode bit
aacc : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aace : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aad1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aad3 : e8                       inx
aad4 : e002                     cpx #2
aad6 : d005                     bne tinc3
aad8 : a9fe                     lda #$fe
aada : 8d0302                   sta abst
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  195
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

aadd : e005             tinc3   cpx #5
aadf : d0d6                     bne tinc2
aae1 : ca                       dex
aae2 : ee0302                   inc abst
aae5 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
aae5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
aae7 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aae9 : 48              >            pha         ;use stack to load status
aaea : 28              >            plp
                        
aaeb : ce0302                   dec abst
                                tst_abs rINC,fINC,0
aaee : 08              >            php         ;save flags
aaef : ad0302          >            lda abst
aaf2 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
aaf5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aaf7 : 68              >            pla         ;load status
                       >            eor_flag 0
aaf8 : 0908            >            ora #decmode        ;ignore decimal mode bit
aafa : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aafc : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
aaff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ab01 : ca                       dex
ab02 : 300b                     bmi tdec3
ab04 : e001                     cpx #1
ab06 : d0dd                     bne tdec2
ab08 : a981                     lda #$81
ab0a : 8d0302                   sta abst
ab0d : d0d6                     bne tdec2
ab0f :                  tdec3
ab0f : a200                     ldx #0
ab11 : a97e                     lda #$7e
ab13 : 8d0302                   sta abst
ab16 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
ab16 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ab18 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ab1a : 48              >            pha         ;use stack to load status
ab1b : 28              >            plp
                        
ab1c : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
ab1f : 08              >            php         ;save flags
ab20 : ad0302          >            lda abst
ab23 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ab26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ab28 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ab29 : 0908            >            ora #decmode        ;ignore decimal mode bit
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  196
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

ab2b : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ab2d : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
ab30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ab32 : e8                       inx
ab33 : e002                     cpx #2
ab35 : d005                     bne tinc13
ab37 : a9fe                     lda #$fe
ab39 : 8d0302                   sta abst
ab3c : e005             tinc13   cpx #5
ab3e : d0d6                     bne tinc12
ab40 : ca                       dex
ab41 : ee0302                   inc abst
ab44 :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
ab44 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ab46 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ab48 : 48              >            pha         ;use stack to load status
ab49 : 28              >            plp
                        
ab4a : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
ab4d : 08              >            php         ;save flags
ab4e : ad0302          >            lda abst
ab51 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ab54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ab56 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ab57 : 0908            >            ora #decmode        ;ignore decimal mode bit
ab59 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ab5b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
ab5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ab60 : ca                       dex
ab61 : 300b                     bmi tdec13
ab63 : e001                     cpx #1
ab65 : d0dd                     bne tdec12
ab67 : a981                     lda #$81
ab69 : 8d0302                   sta abst
ab6c : d0d6                     bne tdec12
ab6e :                  tdec13
                                next_test
ab6e : ad0002          >            lda test_case   ;previous test
ab71 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ab73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
ab75 : a924            >            lda #test_num   ;*** next tests' number
ab77 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  197
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        ; zeropage indexed
ab7a : a200                     ldx #0
ab7c : a97e                     lda #$7e
ab7e : 9502             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
ab80 : a900            >            lda #0             ;allow test to change I-flag (no mask)
ab82 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ab84 : 48              >            pha         ;use stack to load status
ab85 : 28              >            plp
                        
ab86 : f602                     inc zpt,x
                                tst_zx rINC,fINC,0
ab88 : 08              >            php         ;save flags
ab89 : b502            >            lda zpt,x
ab8b : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ab8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ab90 : 68              >            pla         ;load status
                       >            eor_flag 0
ab91 : 0908            >            ora #decmode        ;ignore decimal mode bit
ab93 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ab95 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
ab98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ab9a : b502                     lda zpt,x
ab9c : e8                       inx
ab9d : e002                     cpx #2
ab9f : d002                     bne tinc5
aba1 : a9fe                     lda #$fe
aba3 : e005             tinc5   cpx #5
aba5 : d0d7                     bne tinc4
aba7 : ca                       dex
aba8 : a902                     lda #2
abaa : 9502             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
abac : a900            >            lda #0             ;allow test to change I-flag (no mask)
abae : 29ef            >			and #~break         ;force B flag to become 0
                       >
abb0 : 48              >            pha         ;use stack to load status
abb1 : 28              >            plp
                        
abb2 : d602                     dec zpt,x
                                tst_zx rINC,fINC,0
abb4 : 08              >            php         ;save flags
abb5 : b502            >            lda zpt,x
abb7 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
abba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
abbc : 68              >            pla         ;load status
                       >            eor_flag 0
abbd : 0908            >            ora #decmode        ;ignore decimal mode bit
abbf : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  198
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

abc1 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
abc4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
abc6 : b502                     lda zpt,x
abc8 : ca                       dex
abc9 : 3008                     bmi tdec5
abcb : e001                     cpx #1
abcd : d0db                     bne tdec4
abcf : a981                     lda #$81
abd1 : d0d7                     bne tdec4
abd3 :                  tdec5
abd3 : a200                     ldx #0
abd5 : a97e                     lda #$7e
abd7 : 9502             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
abd9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
abdb : 29ef            >			and #~break         ;force B flag to become 0
                       >
abdd : 48              >            pha         ;use stack to load status
abde : 28              >            plp
                        
abdf : f602                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
abe1 : 08              >            php         ;save flags
abe2 : b502            >            lda zpt,x
abe4 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
abe7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
abe9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
abea : 0908            >            ora #decmode        ;ignore decimal mode bit
abec : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
abee : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
abf1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
abf3 : b502                     lda zpt,x
abf5 : e8                       inx
abf6 : e002                     cpx #2
abf8 : d002                     bne tinc15
abfa : a9fe                     lda #$fe
abfc : e005             tinc15  cpx #5
abfe : d0d7                     bne tinc14
ac00 : ca                       dex
ac01 : a902                     lda #2
ac03 : 9502             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
ac05 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ac07 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ac09 : 48              >            pha         ;use stack to load status
ac0a : 28              >            plp
                        
ac0b : d602                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  199
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

ac0d : 08              >            php         ;save flags
ac0e : b502            >            lda zpt,x
ac10 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ac13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ac15 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ac16 : 0908            >            ora #decmode        ;ignore decimal mode bit
ac18 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ac1a : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
ac1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ac1f : b502                     lda zpt,x
ac21 : ca                       dex
ac22 : 3008                     bmi tdec15
ac24 : e001                     cpx #1
ac26 : d0db                     bne tdec14
ac28 : a981                     lda #$81
ac2a : d0d7                     bne tdec14
ac2c :                  tdec15
                                next_test
ac2c : ad0002          >            lda test_case   ;previous test
ac2f : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
ac31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
ac33 : a925            >            lda #test_num   ;*** next tests' number
ac35 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
ac38 : a200                     ldx #0
ac3a : a97e                     lda #$7e
ac3c : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
ac3f : a900            >            lda #0             ;allow test to change I-flag (no mask)
ac41 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ac43 : 48              >            pha         ;use stack to load status
ac44 : 28              >            plp
                        
ac45 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
ac48 : 08              >            php         ;save flags
ac49 : bd0302          >            lda abst,x
ac4c : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ac4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ac51 : 68              >            pla         ;load status
                       >            eor_flag 0
ac52 : 0908            >            ora #decmode        ;ignore decimal mode bit
ac54 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ac56 : dd5602          >            cmp fINC,x    ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  200
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne
ac59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ac5b : bd0302                   lda abst,x
ac5e : e8                       inx
ac5f : e002                     cpx #2
ac61 : d002                     bne tinc7
ac63 : a9fe                     lda #$fe
ac65 : e005             tinc7   cpx #5
ac67 : d0d3                     bne tinc6
ac69 : ca                       dex
ac6a : a902                     lda #2
ac6c : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
ac6f : a900            >            lda #0             ;allow test to change I-flag (no mask)
ac71 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ac73 : 48              >            pha         ;use stack to load status
ac74 : 28              >            plp
                        
ac75 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
ac78 : 08              >            php         ;save flags
ac79 : bd0302          >            lda abst,x
ac7c : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ac7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ac81 : 68              >            pla         ;load status
                       >            eor_flag 0
ac82 : 0908            >            ora #decmode        ;ignore decimal mode bit
ac84 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ac86 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
ac89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ac8b : bd0302                   lda abst,x
ac8e : ca                       dex
ac8f : 3008                     bmi tdec7
ac91 : e001                     cpx #1
ac93 : d0d7                     bne tdec6
ac95 : a981                     lda #$81
ac97 : d0d3                     bne tdec6
ac99 :                  tdec7
ac99 : a200                     ldx #0
ac9b : a97e                     lda #$7e
ac9d : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
aca0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
aca2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aca4 : 48              >            pha         ;use stack to load status
aca5 : 28              >            plp
                        
aca6 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
aca9 : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  201
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

acaa : bd0302          >            lda abst,x
acad : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
acb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
acb2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
acb3 : 0908            >            ora #decmode        ;ignore decimal mode bit
acb5 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
acb7 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
acba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
acbc : bd0302                   lda abst,x
acbf : e8                       inx
acc0 : e002                     cpx #2
acc2 : d002                     bne tinc17
acc4 : a9fe                     lda #$fe
acc6 : e005             tinc17  cpx #5
acc8 : d0d3                     bne tinc16
acca : ca                       dex
accb : a902                     lda #2
accd : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
acd0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
acd2 : 29ef            >			and #~break         ;force B flag to become 0
                       >
acd4 : 48              >            pha         ;use stack to load status
acd5 : 28              >            plp
                        
acd6 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
acd9 : 08              >            php         ;save flags
acda : bd0302          >            lda abst,x
acdd : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
ace0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ace2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ace3 : 0908            >            ora #decmode        ;ignore decimal mode bit
ace5 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ace7 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
acea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
acec : bd0302                   lda abst,x
acef : ca                       dex
acf0 : 3008                     bmi tdec17
acf2 : e001                     cpx #1
acf4 : d0d7                     bne tdec16
acf6 : a981                     lda #$81
acf8 : d0d3                     bne tdec16
acfa :                  tdec17
                                next_test
acfa : ad0002          >            lda test_case   ;previous test
acfd : c925            >            cmp #test_num
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  202
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            trap_ne         ;test is out of sequence
acff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
ad01 : a926            >            lda #test_num   ;*** next tests' number
ad03 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
ad06 : a203                     ldx #3          ;immediate
ad08 : b514             tand    lda zpAN,x
ad0a : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
ad0d : a900            >            lda #0             ;allow test to change I-flag (no mask)
ad0f : 29ef            >			and #~break         ;force B flag to become 0
                       >
ad11 : 48              >            pha         ;use stack to load status
ad12 : bd6b02          >            lda absANa,x    ;precharge accu
ad15 : 28              >            plp
                        
ad16 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
ad19 : 08              >            php         ;save flags
ad1a : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ad1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ad1f : 68              >            pla         ;load status
                       >            eor_flag 0
ad20 : 0908            >            ora #decmode        ;ignore decimal mode bit
ad22 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ad24 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ad27 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ad29 : ca                       dex
ad2a : 10dc                     bpl tand
ad2c : a203                     ldx #3
ad2e : b514             tand1   lda zpAN,x
ad30 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
ad33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ad35 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ad37 : 48              >            pha         ;use stack to load status
ad38 : bd6b02          >            lda absANa,x    ;precharge accu
ad3b : 28              >            plp
                        
ad3c : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
ad3f : 08              >            php         ;save flags
ad40 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ad43 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ad45 : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  203
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            eor_flag $ff-fnz
ad46 : 0908            >            ora #decmode        ;ignore decimal mode bit
ad48 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ad4a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ad4d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ad4f : ca                       dex
ad50 : 10dc                     bpl tand1
                            
ad52 : a203                     ldx #3      ;zp
ad54 : b514             tand2   lda zpAN,x
ad56 : 8502                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
ad58 : a900            >            lda #0             ;allow test to change I-flag (no mask)
ad5a : 29ef            >			and #~break         ;force B flag to become 0
                       >
ad5c : 48              >            pha         ;use stack to load status
ad5d : bd6b02          >            lda absANa,x    ;precharge accu
ad60 : 28              >            plp
                        
ad61 : 2502                     and zpt
                                tst_ax  absrlo,absflo,0
ad63 : 08              >            php         ;save flags
ad64 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ad67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ad69 : 68              >            pla         ;load status
                       >            eor_flag 0
ad6a : 0908            >            ora #decmode        ;ignore decimal mode bit
ad6c : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ad6e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ad71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ad73 : ca                       dex
ad74 : 10de                     bpl tand2
ad76 : a203                     ldx #3
ad78 : b514             tand3   lda zpAN,x
ad7a : 8502                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
ad7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ad7e : 29ef            >			and #~break         ;force B flag to become 0
                       >
ad80 : 48              >            pha         ;use stack to load status
ad81 : bd6b02          >            lda absANa,x    ;precharge accu
ad84 : 28              >            plp
                        
ad85 : 2502                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
ad87 : 08              >            php         ;save flags
ad88 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ad8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  204
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

ad8d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ad8e : 0908            >            ora #decmode        ;ignore decimal mode bit
ad90 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ad92 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ad95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ad97 : ca                       dex
ad98 : 10de                     bpl tand3
                        
ad9a : a203                     ldx #3      ;abs
ad9c : b514             tand4   lda zpAN,x
ad9e : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
ada1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
ada3 : 29ef            >			and #~break         ;force B flag to become 0
                       >
ada5 : 48              >            pha         ;use stack to load status
ada6 : bd6b02          >            lda absANa,x    ;precharge accu
ada9 : 28              >            plp
                        
adaa : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
adad : 08              >            php         ;save flags
adae : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
adb1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
adb3 : 68              >            pla         ;load status
                       >            eor_flag 0
adb4 : 0908            >            ora #decmode        ;ignore decimal mode bit
adb6 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
adb8 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
adbb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
adbd : ca                       dex
adbe : 10dc                     bpl tand4
adc0 : a203                     ldx #3
adc2 : b514             tand5   lda zpAN,x
adc4 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
adc7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
adc9 : 29ef            >			and #~break         ;force B flag to become 0
                       >
adcb : 48              >            pha         ;use stack to load status
adcc : bd6b02          >            lda absANa,x    ;precharge accu
adcf : 28              >            plp
                        
add0 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
add3 : 08              >            php         ;save flags
add4 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
add7 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  205
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
add9 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
adda : 0908            >            ora #decmode        ;ignore decimal mode bit
addc : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
adde : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ade1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ade3 : ca                       dex
ade4 : 1002                     bpl tand6
                        
ade6 : a203                     ldx #3      ;zp,x
ade8 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
ade8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
adea : 29ef            >			and #~break         ;force B flag to become 0
                       >
adec : 48              >            pha         ;use stack to load status
aded : bd6b02          >            lda absANa,x    ;precharge accu
adf0 : 28              >            plp
                        
adf1 : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,0
adf3 : 08              >            php         ;save flags
adf4 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
adf7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
adf9 : 68              >            pla         ;load status
                       >            eor_flag 0
adfa : 0908            >            ora #decmode        ;ignore decimal mode bit
adfc : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
adfe : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ae01 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ae03 : ca                       dex
ae04 : 10e2                     bpl tand6
ae06 : a203                     ldx #3
ae08 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
ae08 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ae0a : 29ef            >			and #~break         ;force B flag to become 0
                       >
ae0c : 48              >            pha         ;use stack to load status
ae0d : bd6b02          >            lda absANa,x    ;precharge accu
ae10 : 28              >            plp
                        
ae11 : 3514                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
ae13 : 08              >            php         ;save flags
ae14 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ae17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  206
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

ae19 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
ae1a : 0908            >            ora #decmode        ;ignore decimal mode bit
ae1c : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ae1e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ae21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ae23 : ca                       dex
ae24 : 10e2                     bpl tand7
                        
ae26 : a203                     ldx #3      ;abs,x
ae28 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
ae28 : a900            >            lda #0             ;allow test to change I-flag (no mask)
ae2a : 29ef            >			and #~break         ;force B flag to become 0
                       >
ae2c : 48              >            pha         ;use stack to load status
ae2d : bd6b02          >            lda absANa,x    ;precharge accu
ae30 : 28              >            plp
                        
ae31 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
ae34 : 08              >            php         ;save flags
ae35 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ae38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ae3a : 68              >            pla         ;load status
                       >            eor_flag 0
ae3b : 0908            >            ora #decmode        ;ignore decimal mode bit
ae3d : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ae3f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ae42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ae44 : ca                       dex
ae45 : 10e1                     bpl tand8
ae47 : a203                     ldx #3
ae49 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
ae49 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ae4b : 29ef            >			and #~break         ;force B flag to become 0
                       >
ae4d : 48              >            pha         ;use stack to load status
ae4e : bd6b02          >            lda absANa,x    ;precharge accu
ae51 : 28              >            plp
                        
ae52 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
ae55 : 08              >            php         ;save flags
ae56 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
ae59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ae5b : 68              >            pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  207
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            eor_flag $ff-fnz
ae5c : 0908            >            ora #decmode        ;ignore decimal mode bit
ae5e : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ae60 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
ae63 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ae65 : ca                       dex
ae66 : 10e1                     bpl tand9
                        
ae68 : a003                     ldy #3      ;abs,y
ae6a :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
ae6a : a900            >            lda #0             ;allow test to change I-flag (no mask)
ae6c : 29ef            >			and #~break         ;force B flag to become 0
                       >
ae6e : 48              >            pha         ;use stack to load status
ae6f : b96b02          >            lda absANa,y    ;precharge accu
ae72 : 28              >            plp
                        
ae73 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
ae76 : 08              >            php         ;save flags
ae77 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ae7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ae7c : 68              >            pla         ;load status
                       >            eor_flag 0
ae7d : 0908            >            ora #decmode        ;ignore decimal mode bit
ae7f : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
ae81 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
ae84 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
ae86 : 88                       dey
ae87 : 10e1                     bpl tand10
ae89 : a003                     ldy #3
ae8b :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
ae8b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
ae8d : 29ef            >			and #~break         ;force B flag to become 0
                       >
ae8f : 48              >            pha         ;use stack to load status
ae90 : b96b02          >            lda absANa,y    ;precharge accu
ae93 : 28              >            plp
                        
ae94 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
ae97 : 08              >            php         ;save flags
ae98 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
ae9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
ae9d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  208
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

ae9e : 0908            >            ora #decmode        ;ignore decimal mode bit
aea0 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aea2 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
aea5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aea7 : 88                       dey
aea8 : 10e1                     bpl tand11
                        
aeaa : a206                     ldx #6      ;(zp,x)
aeac : a003                     ldy #3
aeae :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
aeae : a900            >            lda #0             ;allow test to change I-flag (no mask)
aeb0 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aeb2 : 48              >            pha         ;use stack to load status
aeb3 : b96b02          >            lda absANa,y    ;precharge accu
aeb6 : 28              >            plp
                        
aeb7 : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
aeb9 : 08              >            php         ;save flags
aeba : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
aebd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
aebf : 68              >            pla         ;load status
                       >            eor_flag 0
aec0 : 0908            >            ora #decmode        ;ignore decimal mode bit
aec2 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aec4 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
aec7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aec9 : ca                       dex
aeca : ca                       dex
aecb : 88                       dey
aecc : 10e0                     bpl tand12
aece : a206                     ldx #6
aed0 : a003                     ldy #3
aed2 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
aed2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
aed4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aed6 : 48              >            pha         ;use stack to load status
aed7 : b96b02          >            lda absANa,y    ;precharge accu
aeda : 28              >            plp
                        
aedb : 2132                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
aedd : 08              >            php         ;save flags
aede : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
aee1 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  209
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
aee3 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
aee4 : 0908            >            ora #decmode        ;ignore decimal mode bit
aee6 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aee8 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
aeeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aeed : ca                       dex
aeee : ca                       dex
aeef : 88                       dey
aef0 : 10e0                     bpl tand13
                        
aef2 : a003                     ldy #3      ;(zp),y
aef4 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
aef4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
aef6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
aef8 : 48              >            pha         ;use stack to load status
aef9 : b96b02          >            lda absANa,y    ;precharge accu
aefc : 28              >            plp
                        
aefd : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,0
aeff : 08              >            php         ;save flags
af00 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
af03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
af05 : 68              >            pla         ;load status
                       >            eor_flag 0
af06 : 0908            >            ora #decmode        ;ignore decimal mode bit
af08 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
af0a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
af0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
af0f : 88                       dey
af10 : 10e2                     bpl tand14
af12 : a003                     ldy #3
af14 :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
af14 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
af16 : 29ef            >			and #~break         ;force B flag to become 0
                       >
af18 : 48              >            pha         ;use stack to load status
af19 : b96b02          >            lda absANa,y    ;precharge accu
af1c : 28              >            plp
                        
af1d : 3132                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
af1f : 08              >            php         ;save flags
af20 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  210
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

af23 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
af25 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
af26 : 0908            >            ora #decmode        ;ignore decimal mode bit
af28 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
af2a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
af2d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
af2f : 88                       dey
af30 : 10e2                     bpl tand15
                                next_test
af32 : ad0002          >            lda test_case   ;previous test
af35 : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
af37 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
af39 : a927            >            lda #test_num   ;*** next tests' number
af3b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
af3e : a203                     ldx #3          ;immediate - self modifying code
af40 : b518             teor    lda zpEO,x
af42 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
af45 : a900            >            lda #0             ;allow test to change I-flag (no mask)
af47 : 29ef            >			and #~break         ;force B flag to become 0
                       >
af49 : 48              >            pha         ;use stack to load status
af4a : bd6f02          >            lda absEOa,x    ;precharge accu
af4d : 28              >            plp
                        
af4e : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
af51 : 08              >            php         ;save flags
af52 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
af55 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
af57 : 68              >            pla         ;load status
                       >            eor_flag 0
af58 : 0908            >            ora #decmode        ;ignore decimal mode bit
af5a : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
af5c : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
af5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
af61 : ca                       dex
af62 : 10dc                     bpl teor
af64 : a203                     ldx #3
af66 : b518             teor1   lda zpEO,x
af68 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  211
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag $ff
af6b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
af6d : 29ef            >			and #~break         ;force B flag to become 0
                       >
af6f : 48              >            pha         ;use stack to load status
af70 : bd6f02          >            lda absEOa,x    ;precharge accu
af73 : 28              >            plp
                        
af74 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
af77 : 08              >            php         ;save flags
af78 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
af7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
af7d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
af7e : 0908            >            ora #decmode        ;ignore decimal mode bit
af80 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
af82 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
af85 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
af87 : ca                       dex
af88 : 10dc                     bpl teor1
                            
af8a : a203                     ldx #3      ;zp
af8c : b518             teor2    lda zpEO,x
af8e : 8502                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
af90 : a900            >            lda #0             ;allow test to change I-flag (no mask)
af92 : 29ef            >			and #~break         ;force B flag to become 0
                       >
af94 : 48              >            pha         ;use stack to load status
af95 : bd6f02          >            lda absEOa,x    ;precharge accu
af98 : 28              >            plp
                        
af99 : 4502                     eor zpt
                                tst_ax  absrlo,absflo,0
af9b : 08              >            php         ;save flags
af9c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
af9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
afa1 : 68              >            pla         ;load status
                       >            eor_flag 0
afa2 : 0908            >            ora #decmode        ;ignore decimal mode bit
afa4 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
afa6 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
afa9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
afab : ca                       dex
afac : 10de                     bpl teor2
afae : a203                     ldx #3
afb0 : b518             teor3   lda zpEO,x
afb2 : 8502                     sta zpt
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  212
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_ax  absEOa,$ff
                       >            load_flag $ff
afb4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
afb6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
afb8 : 48              >            pha         ;use stack to load status
afb9 : bd6f02          >            lda absEOa,x    ;precharge accu
afbc : 28              >            plp
                        
afbd : 4502                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
afbf : 08              >            php         ;save flags
afc0 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
afc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
afc5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
afc6 : 0908            >            ora #decmode        ;ignore decimal mode bit
afc8 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
afca : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
afcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
afcf : ca                       dex
afd0 : 10de                     bpl teor3
                        
afd2 : a203                     ldx #3      ;abs
afd4 : b518             teor4   lda zpEO,x
afd6 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
afd9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
afdb : 29ef            >			and #~break         ;force B flag to become 0
                       >
afdd : 48              >            pha         ;use stack to load status
afde : bd6f02          >            lda absEOa,x    ;precharge accu
afe1 : 28              >            plp
                        
afe2 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
afe5 : 08              >            php         ;save flags
afe6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
afe9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
afeb : 68              >            pla         ;load status
                       >            eor_flag 0
afec : 0908            >            ora #decmode        ;ignore decimal mode bit
afee : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
aff0 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
aff3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
aff5 : ca                       dex
aff6 : 10dc                     bpl teor4
aff8 : a203                     ldx #3
affa : b518             teor5   lda zpEO,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  213
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

affc : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
afff : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b001 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b003 : 48              >            pha         ;use stack to load status
b004 : bd6f02          >            lda absEOa,x    ;precharge accu
b007 : 28              >            plp
                        
b008 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
b00b : 08              >            php         ;save flags
b00c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b00f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b011 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b012 : 0908            >            ora #decmode        ;ignore decimal mode bit
b014 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b016 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b019 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b01b : ca                       dex
b01c : 1002                     bpl teor6
                        
b01e : a203                     ldx #3      ;zp,x
b020 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
b020 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b022 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b024 : 48              >            pha         ;use stack to load status
b025 : bd6f02          >            lda absEOa,x    ;precharge accu
b028 : 28              >            plp
                        
b029 : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
b02b : 08              >            php         ;save flags
b02c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b02f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b031 : 68              >            pla         ;load status
                       >            eor_flag 0
b032 : 0908            >            ora #decmode        ;ignore decimal mode bit
b034 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b036 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b039 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b03b : ca                       dex
b03c : 10e2                     bpl teor6
b03e : a203                     ldx #3
b040 :                  teor7
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  214
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_ax  absEOa,$ff
                       >            load_flag $ff
b040 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b042 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b044 : 48              >            pha         ;use stack to load status
b045 : bd6f02          >            lda absEOa,x    ;precharge accu
b048 : 28              >            plp
                        
b049 : 5518                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
b04b : 08              >            php         ;save flags
b04c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b04f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b051 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b052 : 0908            >            ora #decmode        ;ignore decimal mode bit
b054 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b056 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b059 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b05b : ca                       dex
b05c : 10e2                     bpl teor7
                        
b05e : a203                     ldx #3      ;abs,x
b060 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
b060 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b062 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b064 : 48              >            pha         ;use stack to load status
b065 : bd6f02          >            lda absEOa,x    ;precharge accu
b068 : 28              >            plp
                        
b069 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
b06c : 08              >            php         ;save flags
b06d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b070 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b072 : 68              >            pla         ;load status
                       >            eor_flag 0
b073 : 0908            >            ora #decmode        ;ignore decimal mode bit
b075 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b077 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b07a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b07c : ca                       dex
b07d : 10e1                     bpl teor8
b07f : a203                     ldx #3
b081 :                  teor9
                                set_ax  absEOa,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  215
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >            load_flag $ff
b081 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b083 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b085 : 48              >            pha         ;use stack to load status
b086 : bd6f02          >            lda absEOa,x    ;precharge accu
b089 : 28              >            plp
                        
b08a : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
b08d : 08              >            php         ;save flags
b08e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b091 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b093 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b094 : 0908            >            ora #decmode        ;ignore decimal mode bit
b096 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b098 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b09b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b09d : ca                       dex
b09e : 10e1                     bpl teor9
                        
b0a0 : a003                     ldy #3      ;abs,y
b0a2 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
b0a2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b0a4 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b0a6 : 48              >            pha         ;use stack to load status
b0a7 : b96f02          >            lda absEOa,y    ;precharge accu
b0aa : 28              >            plp
                        
b0ab : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
b0ae : 08              >            php         ;save flags
b0af : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b0b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b0b4 : 68              >            pla         ;load status
                       >            eor_flag 0
b0b5 : 0908            >            ora #decmode        ;ignore decimal mode bit
b0b7 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b0b9 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b0bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b0be : 88                       dey
b0bf : 10e1                     bpl teor10
b0c1 : a003                     ldy #3
b0c3 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  216
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b0c3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b0c5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b0c7 : 48              >            pha         ;use stack to load status
b0c8 : b96f02          >            lda absEOa,y    ;precharge accu
b0cb : 28              >            plp
                        
b0cc : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
b0cf : 08              >            php         ;save flags
b0d0 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b0d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b0d5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b0d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
b0d8 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b0da : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b0dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b0df : 88                       dey
b0e0 : 10e1                     bpl teor11
                        
b0e2 : a206                     ldx #6      ;(zp,x)
b0e4 : a003                     ldy #3
b0e6 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
b0e6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b0e8 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b0ea : 48              >            pha         ;use stack to load status
b0eb : b96f02          >            lda absEOa,y    ;precharge accu
b0ee : 28              >            plp
                        
b0ef : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
b0f1 : 08              >            php         ;save flags
b0f2 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b0f5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b0f7 : 68              >            pla         ;load status
                       >            eor_flag 0
b0f8 : 0908            >            ora #decmode        ;ignore decimal mode bit
b0fa : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b0fc : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b0ff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b101 : ca                       dex
b102 : ca                       dex
b103 : 88                       dey
b104 : 10e0                     bpl teor12
b106 : a206                     ldx #6
b108 : a003                     ldy #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  217
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b10a :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
b10a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b10c : 29ef            >			and #~break         ;force B flag to become 0
                       >
b10e : 48              >            pha         ;use stack to load status
b10f : b96f02          >            lda absEOa,y    ;precharge accu
b112 : 28              >            plp
                        
b113 : 413a                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
b115 : 08              >            php         ;save flags
b116 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b119 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b11b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b11c : 0908            >            ora #decmode        ;ignore decimal mode bit
b11e : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b120 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b123 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b125 : ca                       dex
b126 : ca                       dex
b127 : 88                       dey
b128 : 10e0                     bpl teor13
                        
b12a : a003                     ldy #3      ;(zp),y
b12c :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
b12c : a900            >            lda #0             ;allow test to change I-flag (no mask)
b12e : 29ef            >			and #~break         ;force B flag to become 0
                       >
b130 : 48              >            pha         ;use stack to load status
b131 : b96f02          >            lda absEOa,y    ;precharge accu
b134 : 28              >            plp
                        
b135 : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
b137 : 08              >            php         ;save flags
b138 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b13b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b13d : 68              >            pla         ;load status
                       >            eor_flag 0
b13e : 0908            >            ora #decmode        ;ignore decimal mode bit
b140 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b142 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b145 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b147 : 88                       dey
b148 : 10e2                     bpl teor14
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  218
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b14a : a003                     ldy #3
b14c :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
b14c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b14e : 29ef            >			and #~break         ;force B flag to become 0
                       >
b150 : 48              >            pha         ;use stack to load status
b151 : b96f02          >            lda absEOa,y    ;precharge accu
b154 : 28              >            plp
                        
b155 : 513a                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
b157 : 08              >            php         ;save flags
b158 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b15b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b15d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b15e : 0908            >            ora #decmode        ;ignore decimal mode bit
b160 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b162 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b165 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b167 : 88                       dey
b168 : 10e2                     bpl teor15
                                next_test
b16a : ad0002          >            lda test_case   ;previous test
b16d : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
b16f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
b171 : a928            >            lda #test_num   ;*** next tests' number
b173 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
b176 : a203                     ldx #3          ;immediate - self modifying code
b178 : b510             tora    lda zpOR,x
b17a : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
b17d : a900            >            lda #0             ;allow test to change I-flag (no mask)
b17f : 29ef            >			and #~break         ;force B flag to become 0
                       >
b181 : 48              >            pha         ;use stack to load status
b182 : bd6702          >            lda absORa,x    ;precharge accu
b185 : 28              >            plp
                        
b186 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
b189 : 08              >            php         ;save flags
b18a : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b18d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  219
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b18f : 68              >            pla         ;load status
                       >            eor_flag 0
b190 : 0908            >            ora #decmode        ;ignore decimal mode bit
b192 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b194 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b197 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b199 : ca                       dex
b19a : 10dc                     bpl tora
b19c : a203                     ldx #3
b19e : b510             tora1   lda zpOR,x
b1a0 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
b1a3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b1a5 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b1a7 : 48              >            pha         ;use stack to load status
b1a8 : bd6702          >            lda absORa,x    ;precharge accu
b1ab : 28              >            plp
                        
b1ac : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
b1af : 08              >            php         ;save flags
b1b0 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b1b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b1b5 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b1b6 : 0908            >            ora #decmode        ;ignore decimal mode bit
b1b8 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b1ba : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b1bd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b1bf : ca                       dex
b1c0 : 10dc                     bpl tora1
                            
b1c2 : a203                     ldx #3      ;zp
b1c4 : b510             tora2   lda zpOR,x
b1c6 : 8502                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
b1c8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b1ca : 29ef            >			and #~break         ;force B flag to become 0
                       >
b1cc : 48              >            pha         ;use stack to load status
b1cd : bd6702          >            lda absORa,x    ;precharge accu
b1d0 : 28              >            plp
                        
b1d1 : 0502                     ora zpt
                                tst_ax  absrlo,absflo,0
b1d3 : 08              >            php         ;save flags
b1d4 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b1d7 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  220
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
b1d9 : 68              >            pla         ;load status
                       >            eor_flag 0
b1da : 0908            >            ora #decmode        ;ignore decimal mode bit
b1dc : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b1de : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b1e1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b1e3 : ca                       dex
b1e4 : 10de                     bpl tora2
b1e6 : a203                     ldx #3
b1e8 : b510             tora3   lda zpOR,x
b1ea : 8502                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
b1ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b1ee : 29ef            >			and #~break         ;force B flag to become 0
                       >
b1f0 : 48              >            pha         ;use stack to load status
b1f1 : bd6702          >            lda absORa,x    ;precharge accu
b1f4 : 28              >            plp
                        
b1f5 : 0502                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
b1f7 : 08              >            php         ;save flags
b1f8 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b1fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b1fd : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b1fe : 0908            >            ora #decmode        ;ignore decimal mode bit
b200 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b202 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b205 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b207 : ca                       dex
b208 : 10de                     bpl tora3
                        
b20a : a203                     ldx #3      ;abs
b20c : b510             tora4   lda zpOR,x
b20e : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
b211 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b213 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b215 : 48              >            pha         ;use stack to load status
b216 : bd6702          >            lda absORa,x    ;precharge accu
b219 : 28              >            plp
                        
b21a : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
b21d : 08              >            php         ;save flags
b21e : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  221
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b221 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b223 : 68              >            pla         ;load status
                       >            eor_flag 0
b224 : 0908            >            ora #decmode        ;ignore decimal mode bit
b226 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b228 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b22b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b22d : ca                       dex
b22e : 10dc                     bpl tora4
b230 : a203                     ldx #3
b232 : b510             tora5   lda zpOR,x
b234 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
b237 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b239 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b23b : 48              >            pha         ;use stack to load status
b23c : bd6702          >            lda absORa,x    ;precharge accu
b23f : 28              >            plp
                        
b240 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
b243 : 08              >            php         ;save flags
b244 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b247 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b249 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b24a : 0908            >            ora #decmode        ;ignore decimal mode bit
b24c : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b24e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b251 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b253 : ca                       dex
b254 : 1002                     bpl tora6
                        
b256 : a203                     ldx #3      ;zp,x
b258 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
b258 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b25a : 29ef            >			and #~break         ;force B flag to become 0
                       >
b25c : 48              >            pha         ;use stack to load status
b25d : bd6702          >            lda absORa,x    ;precharge accu
b260 : 28              >            plp
                        
b261 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
b263 : 08              >            php         ;save flags
b264 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  222
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b267 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b269 : 68              >            pla         ;load status
                       >            eor_flag 0
b26a : 0908            >            ora #decmode        ;ignore decimal mode bit
b26c : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b26e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b271 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b273 : ca                       dex
b274 : 10e2                     bpl tora6
b276 : a203                     ldx #3
b278 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
b278 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b27a : 29ef            >			and #~break         ;force B flag to become 0
                       >
b27c : 48              >            pha         ;use stack to load status
b27d : bd6702          >            lda absORa,x    ;precharge accu
b280 : 28              >            plp
                        
b281 : 1510                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
b283 : 08              >            php         ;save flags
b284 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b287 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b289 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b28a : 0908            >            ora #decmode        ;ignore decimal mode bit
b28c : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b28e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b291 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b293 : ca                       dex
b294 : 10e2                     bpl tora7
                        
b296 : a203                     ldx #3      ;abs,x
b298 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
b298 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b29a : 29ef            >			and #~break         ;force B flag to become 0
                       >
b29c : 48              >            pha         ;use stack to load status
b29d : bd6702          >            lda absORa,x    ;precharge accu
b2a0 : 28              >            plp
                        
b2a1 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
b2a4 : 08              >            php         ;save flags
b2a5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b2a8 : d0fe            >        bne *           ;failed not equal (non zero)
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  223
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                       >
b2aa : 68              >            pla         ;load status
                       >            eor_flag 0
b2ab : 0908            >            ora #decmode        ;ignore decimal mode bit
b2ad : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b2af : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b2b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b2b4 : ca                       dex
b2b5 : 10e1                     bpl tora8
b2b7 : a203                     ldx #3
b2b9 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
b2b9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b2bb : 29ef            >			and #~break         ;force B flag to become 0
                       >
b2bd : 48              >            pha         ;use stack to load status
b2be : bd6702          >            lda absORa,x    ;precharge accu
b2c1 : 28              >            plp
                        
b2c2 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
b2c5 : 08              >            php         ;save flags
b2c6 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
b2c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b2cb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b2cc : 0908            >            ora #decmode        ;ignore decimal mode bit
b2ce : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b2d0 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
b2d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b2d5 : ca                       dex
b2d6 : 10e1                     bpl tora9
                        
b2d8 : a003                     ldy #3      ;abs,y
b2da :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
b2da : a900            >            lda #0             ;allow test to change I-flag (no mask)
b2dc : 29ef            >			and #~break         ;force B flag to become 0
                       >
b2de : 48              >            pha         ;use stack to load status
b2df : b96702          >            lda absORa,y    ;precharge accu
b2e2 : 28              >            plp
                        
b2e3 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
b2e6 : 08              >            php         ;save flags
b2e7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b2ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  224
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b2ec : 68              >            pla         ;load status
                       >            eor_flag 0
b2ed : 0908            >            ora #decmode        ;ignore decimal mode bit
b2ef : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b2f1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b2f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b2f6 : 88                       dey
b2f7 : 10e1                     bpl tora10
b2f9 : a003                     ldy #3
b2fb :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
b2fb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b2fd : 29ef            >			and #~break         ;force B flag to become 0
                       >
b2ff : 48              >            pha         ;use stack to load status
b300 : b96702          >            lda absORa,y    ;precharge accu
b303 : 28              >            plp
                        
b304 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
b307 : 08              >            php         ;save flags
b308 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b30b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b30d : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b30e : 0908            >            ora #decmode        ;ignore decimal mode bit
b310 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b312 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b315 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b317 : 88                       dey
b318 : 10e1                     bpl tora11
                        
b31a : a206                     ldx #6      ;(zp,x)
b31c : a003                     ldy #3
b31e :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
b31e : a900            >            lda #0             ;allow test to change I-flag (no mask)
b320 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b322 : 48              >            pha         ;use stack to load status
b323 : b96702          >            lda absORa,y    ;precharge accu
b326 : 28              >            plp
                        
b327 : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
b329 : 08              >            php         ;save flags
b32a : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b32d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  225
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b32f : 68              >            pla         ;load status
                       >            eor_flag 0
b330 : 0908            >            ora #decmode        ;ignore decimal mode bit
b332 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b334 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b337 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b339 : ca                       dex
b33a : ca                       dex
b33b : 88                       dey
b33c : 10e0                     bpl tora12
b33e : a206                     ldx #6
b340 : a003                     ldy #3
b342 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
b342 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b344 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b346 : 48              >            pha         ;use stack to load status
b347 : b96702          >            lda absORa,y    ;precharge accu
b34a : 28              >            plp
                        
b34b : 0142                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
b34d : 08              >            php         ;save flags
b34e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b351 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b353 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b354 : 0908            >            ora #decmode        ;ignore decimal mode bit
b356 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b358 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b35b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b35d : ca                       dex
b35e : ca                       dex
b35f : 88                       dey
b360 : 10e0                     bpl tora13
                        
b362 : a003                     ldy #3      ;(zp),y
b364 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
b364 : a900            >            lda #0             ;allow test to change I-flag (no mask)
b366 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b368 : 48              >            pha         ;use stack to load status
b369 : b96702          >            lda absORa,y    ;precharge accu
b36c : 28              >            plp
                        
b36d : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
b36f : 08              >            php         ;save flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  226
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b370 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b373 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b375 : 68              >            pla         ;load status
                       >            eor_flag 0
b376 : 0908            >            ora #decmode        ;ignore decimal mode bit
b378 : 4928            >            eor #(0|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b37a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b37d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b37f : 88                       dey
b380 : 10e2                     bpl tora14
b382 : a003                     ldy #3
b384 :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
b384 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b386 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b388 : 48              >            pha         ;use stack to load status
b389 : b96702          >            lda absORa,y    ;precharge accu
b38c : 28              >            plp
                        
b38d : 1142                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
b38f : 08              >            php         ;save flags
b390 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
b393 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
b395 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
b396 : 0908            >            ora #decmode        ;ignore decimal mode bit
b398 : 496d            >            eor #($ff-fnz|faod)&~break        ;invert expected flags and break disabled + always on bits
                       >
b39a : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
b39d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
b39f : 88                       dey
b3a0 : 10e2                     bpl tora15
                            if I_flag = 3
b3a2 : 58                       cli
                            endif                
                                next_test
b3a3 : ad0002          >            lda test_case   ;previous test
b3a6 : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
b3a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
b3aa : a929            >            lda #test_num   ;*** next tests' number
b3ac : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  227
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
b3af : d8                       cld
b3b0 : a204                     ldx #ad2        ;for indexed test
b3b2 : a0ff                     ldy #$ff        ;max range
b3b4 : a900                     lda #0          ;start with adding zeroes & no carry
b3b6 : 8502                     sta adfc        ;carry in - for diag
b3b8 : 8503                     sta ad1         ;operand 1 - accumulator
b3ba : 8504                     sta ad2         ;operand 2 - memory or immediate
b3bc : 8d0302                   sta ada2        ;non zp
b3bf : 8505                     sta adrl        ;expected result bits 0-7
b3c1 : 8506                     sta adrh        ;expected result bit 8 (carry out)
b3c3 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
b3c5 : 8508                     sta sb2
b3c7 : 8d0402                   sta sba2        ;non zp
b3ca : a902                     lda #2          ;expected Z-flag
b3cc : 8507                     sta adrf
b3ce : 18               tadd    clc             ;test with carry clear
b3cf : 201ab4                   jsr chkadd
b3d2 : e602                     inc adfc        ;now with carry
b3d4 : e605                     inc adrl        ;result +1
b3d6 : 08                       php             ;save N & Z from low result
b3d7 : 08                       php
b3d8 : 68                       pla             ;accu holds expected flags
b3d9 : 2982                     and #$82        ;mask N & Z
b3db : 28                       plp
b3dc : d002                     bne tadd1
b3de : e606                     inc adrh        ;result bit 8 - carry
b3e0 : 0506             tadd1   ora adrh        ;merge C to expected flags
b3e2 : 8507                     sta adrf        ;save expected flags except overflow
b3e4 : 38                       sec             ;test with carry set
b3e5 : 201ab4                   jsr chkadd
b3e8 : c602                     dec adfc        ;same for operand +1 but no carry
b3ea : e603                     inc ad1
b3ec : d0e0                     bne tadd        ;iterate op1
b3ee : a900                     lda #0          ;preset result to op2 when op1 = 0
b3f0 : 8506                     sta adrh
b3f2 : ee0302                   inc ada2
b3f5 : e604                     inc ad2
b3f7 : 08                       php             ;save NZ as operand 2 becomes the new result
b3f8 : 68                       pla
b3f9 : 2982                     and #$82        ;mask N00000Z0
b3fb : 8507                     sta adrf        ;no need to check carry as we are adding to 0
b3fd : c608                     dec sb2         ;complement subtract operand 2
b3ff : ce0402                   dec sba2
b402 : a504                     lda ad2         
b404 : 8505                     sta adrl
b406 : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  228
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  229
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  230
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
b408 : ad0002                   lda test_case
b40b : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
b40d : d0fe            >        bne *           ;failed not equal (non zero)
                        
b40f : a9f0                     lda #$f0        ;mark opcode testing complete
b411 : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
b414 : 4c14b4          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
b417 : 4c0080                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  231
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  232
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  233
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
b41a : a507             chkadd  lda adrf        ;add V-flag if overflow
b41c : 2983                     and #$83        ;keep N-----ZC / clear V
b41e : 48                       pha
b41f : a503                     lda ad1         ;test sign unequal between operands
b421 : 4504                     eor ad2
b423 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
b425 : a503                     lda ad1         ;test sign equal between operands and result
b427 : 4505                     eor adrl
b429 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
b42b : 68                       pla
b42c : 0940                     ora #$40        ;set V
b42e : 48                       pha
b42f : 68               ckad1   pla
b430 : 8507                     sta adrf        ;save expected flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  234
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; binary ADC / SBC zp
b432 : 08                       php             ;save carry for subtract
b433 : a503                     lda ad1
b435 : 6504                     adc ad2         ;perform add
b437 : 08                       php          
b438 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b43a : d0fe            >        bne *           ;failed not equal (non zero)
                        
b43c : 68                       pla             ;check flags
b43d : 29c3                     and #$c3        ;mask NV----ZC
b43f : c507                     cmp adrf
                                trap_ne         ;bad flags
b441 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b443 : 28                       plp
b444 : 08                       php             ;save carry for next add
b445 : a503                     lda ad1
b447 : e508                     sbc sb2         ;perform subtract
b449 : 08                       php          
b44a : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b44c : d0fe            >        bne *           ;failed not equal (non zero)
                        
b44e : 68                       pla             ;check flags
b44f : 29c3                     and #$c3        ;mask NV----ZC
b451 : c507                     cmp adrf
                                trap_ne         ;bad flags
b453 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b455 : 28                       plp
                        ; binary ADC / SBC abs
b456 : 08                       php             ;save carry for subtract
b457 : a503                     lda ad1
b459 : 6d0302                   adc ada2        ;perform add
b45c : 08                       php          
b45d : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b45f : d0fe            >        bne *           ;failed not equal (non zero)
                        
b461 : 68                       pla             ;check flags
b462 : 29c3                     and #$c3        ;mask NV----ZC
b464 : c507                     cmp adrf
                                trap_ne         ;bad flags
b466 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b468 : 28                       plp
b469 : 08                       php             ;save carry for next add
b46a : a503                     lda ad1
b46c : ed0402                   sbc sba2        ;perform subtract
b46f : 08                       php          
b470 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b472 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b474 : 68                       pla             ;check flags
b475 : 29c3                     and #$c3        ;mask NV----ZC
b477 : c507                     cmp adrf
                                trap_ne         ;bad flags
b479 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b47b : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  235
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; binary ADC / SBC #
b47c : 08                       php             ;save carry for subtract
b47d : a504                     lda ad2
b47f : 8d1302                   sta ex_adci+1   ;set ADC # operand
b482 : a503                     lda ad1
b484 : 201202                   jsr ex_adci     ;execute ADC # in RAM
b487 : 08                       php          
b488 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b48a : d0fe            >        bne *           ;failed not equal (non zero)
                        
b48c : 68                       pla             ;check flags
b48d : 29c3                     and #$c3        ;mask NV----ZC
b48f : c507                     cmp adrf
                                trap_ne         ;bad flags
b491 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b493 : 28                       plp
b494 : 08                       php             ;save carry for next add
b495 : a508                     lda sb2
b497 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
b49a : a503                     lda ad1
b49c : 201502                   jsr ex_sbci     ;execute SBC # in RAM
b49f : 08                       php          
b4a0 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4a2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4a4 : 68                       pla             ;check flags
b4a5 : 29c3                     and #$c3        ;mask NV----ZC
b4a7 : c507                     cmp adrf
                                trap_ne         ;bad flags
b4a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4ab : 28                       plp
                        ; binary ADC / SBC zp,x
b4ac : 08                       php             ;save carry for subtract
b4ad : a503                     lda ad1
b4af : 7500                     adc 0,x         ;perform add
b4b1 : 08                       php          
b4b2 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4b6 : 68                       pla             ;check flags
b4b7 : 29c3                     and #$c3        ;mask NV----ZC
b4b9 : c507                     cmp adrf
                                trap_ne         ;bad flags
b4bb : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4bd : 28                       plp
b4be : 08                       php             ;save carry for next add
b4bf : a503                     lda ad1
b4c1 : f504                     sbc sb2-ad2,x   ;perform subtract
b4c3 : 08                       php          
b4c4 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4c8 : 68                       pla             ;check flags
b4c9 : 29c3                     and #$c3        ;mask NV----ZC
b4cb : c507                     cmp adrf
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  236
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;bad flags
b4cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4cf : 28                       plp
                        ; binary ADC / SBC abs,x
b4d0 : 08                       php             ;save carry for subtract
b4d1 : a503                     lda ad1
b4d3 : 7dff01                   adc ada2-ad2,x  ;perform add
b4d6 : 08                       php          
b4d7 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4d9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4db : 68                       pla             ;check flags
b4dc : 29c3                     and #$c3        ;mask NV----ZC
b4de : c507                     cmp adrf
                                trap_ne         ;bad flags
b4e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4e2 : 28                       plp
b4e3 : 08                       php             ;save carry for next add
b4e4 : a503                     lda ad1
b4e6 : fd0002                   sbc sba2-ad2,x  ;perform subtract
b4e9 : 08                       php          
b4ea : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4ee : 68                       pla             ;check flags
b4ef : 29c3                     and #$c3        ;mask NV----ZC
b4f1 : c507                     cmp adrf
                                trap_ne         ;bad flags
b4f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b4f5 : 28                       plp
                        ; binary ADC / SBC abs,y
b4f6 : 08                       php             ;save carry for subtract
b4f7 : a503                     lda ad1
b4f9 : 790401                   adc ada2-$ff,y  ;perform add
b4fc : 08                       php          
b4fd : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b4ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
b501 : 68                       pla             ;check flags
b502 : 29c3                     and #$c3        ;mask NV----ZC
b504 : c507                     cmp adrf
                                trap_ne         ;bad flags
b506 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b508 : 28                       plp
b509 : 08                       php             ;save carry for next add
b50a : a503                     lda ad1
b50c : f90501                   sbc sba2-$ff,y  ;perform subtract
b50f : 08                       php          
b510 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b512 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b514 : 68                       pla             ;check flags
b515 : 29c3                     and #$c3        ;mask NV----ZC
b517 : c507                     cmp adrf
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  237
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;bad flags
b519 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b51b : 28                       plp
                        ; binary ADC / SBC (zp,x)
b51c : 08                       php             ;save carry for subtract
b51d : a503                     lda ad1
b51f : 6146                     adc (lo adi2-ad2,x) ;perform add
b521 : 08                       php          
b522 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b524 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b526 : 68                       pla             ;check flags
b527 : 29c3                     and #$c3        ;mask NV----ZC
b529 : c507                     cmp adrf
                                trap_ne         ;bad flags
b52b : d0fe            >        bne *           ;failed not equal (non zero)
                        
b52d : 28                       plp
b52e : 08                       php             ;save carry for next add
b52f : a503                     lda ad1
b531 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
b533 : 08                       php          
b534 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b536 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b538 : 68                       pla             ;check flags
b539 : 29c3                     and #$c3        ;mask NV----ZC
b53b : c507                     cmp adrf
                                trap_ne         ;bad flags
b53d : d0fe            >        bne *           ;failed not equal (non zero)
                        
b53f : 28                       plp
                        ; binary ADC / SBC (abs),y
b540 : 08                       php             ;save carry for subtract
b541 : a503                     lda ad1
b543 : 714e                     adc (adiy2),y   ;perform add
b545 : 08                       php          
b546 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b548 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b54a : 68                       pla             ;check flags
b54b : 29c3                     and #$c3        ;mask NV----ZC
b54d : c507                     cmp adrf
                                trap_ne         ;bad flags
b54f : d0fe            >        bne *           ;failed not equal (non zero)
                        
b551 : 28                       plp
b552 : 08                       php             ;save carry for next add
b553 : a503                     lda ad1
b555 : f150                     sbc (sbiy2),y   ;perform subtract
b557 : 08                       php          
b558 : c505                     cmp adrl        ;check result
                                trap_ne         ;bad result
b55a : d0fe            >        bne *           ;failed not equal (non zero)
                        
b55c : 68                       pla             ;check flags
b55d : 29c3                     and #$c3        ;mask NV----ZC
b55f : c507                     cmp adrf
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  238
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;bad flags
b561 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b563 : 28                       plp
b564 : 60                       rts
                        
                        ; target for the jump absolute test
b565 : 88                       dey
b566 : 88                       dey
b567 :                  test_far
b567 : 08                       php             ;either SP or Y count will fail, if we do not hit
b568 : 88                       dey
b569 : 88                       dey
b56a : 88                       dey
b56b : 28                       plp
                                trap_cs         ;flags loaded?
b56c : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
b56e : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
b570 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
b572 : f0fe            >        beq *           ;failed equal (zero)
                        
b574 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
b576 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b578 : e041                     cpx #'A'
                                trap_ne        
b57a : d0fe            >        bne *           ;failed not equal (non zero)
                        
b57c : c04f                     cpy #('R'-3)
                                trap_ne
b57e : d0fe            >        bne *           ;failed not equal (non zero)
                        
b580 : 48                       pha             ;save a,x
b581 : 8a                       txa
b582 : 48                       pha
b583 : ba                       tsx
b584 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
b586 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b588 : 68                       pla             ;restore x
b589 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
b58a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b58c : 29ef            >			and #~break         ;force B flag to become 0
                       >
b58e : 48              >            pha         ;use stack to load status
b58f : 28              >            plp
                        
b590 : 68                       pla             ;restore a
b591 : e8                       inx             ;return registers with modifications
b592 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
b594 : 4c2c84                   jmp far_ret
                                
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  239
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; target for the jump indirect test
b597 : 00                       align
b598 : a1b5             ptr_tst_ind dw test_ind
b59a : 8384             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
b59c : 4c9cb5          >        jmp *           ;failed anyway
                        
b59f : 88                       dey
b5a0 : 88                       dey
b5a1 :                  test_ind
b5a1 : 08                       php             ;either SP or Y count will fail, if we do not hit
b5a2 : 88                       dey
b5a3 : 88                       dey
b5a4 : 88                       dey
b5a5 : 28                       plp
                                trap_cs         ;flags loaded?
b5a6 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
b5a8 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
b5aa : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
b5ac : f0fe            >        beq *           ;failed equal (zero)
                        
b5ae : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
b5b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5b2 : e04e                     cpx #'N'
                                trap_ne        
b5b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5b6 : c041                     cpy #('D'-3)
                                trap_ne
b5b8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5ba : 48                       pha             ;save a,x
b5bb : 8a                       txa
b5bc : 48                       pha
b5bd : ba                       tsx
b5be : e0fd                     cpx #$fd        ;check SP
                                trap_ne
b5c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5c2 : 68                       pla             ;restore x
b5c3 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
b5c4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b5c6 : 29ef            >			and #~break         ;force B flag to become 0
                       >
b5c8 : 48              >            pha         ;use stack to load status
b5c9 : 28              >            plp
                        
b5ca : 68                       pla             ;restore a
b5cb : e8                       inx             ;return registers with modifications
b5cc : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
b5ce : 6c9ab5                   jmp (ptr_ind_ret)
                                trap            ;runover protection
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  240
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b5d1 : 4cd1b5          >        jmp *           ;failed anyway
                        
b5d4 : 4c0080                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
b5d7 : 88                       dey
b5d8 : 88                       dey
b5d9 :                  test_jsr
b5d9 : 08                       php             ;either SP or Y count will fail, if we do not hit
b5da : 88                       dey
b5db : 88                       dey
b5dc : 88                       dey
b5dd : 28                       plp
                                trap_cs         ;flags loaded?
b5de : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
b5e0 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
b5e2 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
b5e4 : f0fe            >        beq *           ;failed equal (zero)
                        
b5e6 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
b5e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5ea : e053                     cpx #'S'
                                trap_ne        
b5ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5ee : c04f                     cpy #('R'-3)
                                trap_ne
b5f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5f2 : 48                       pha             ;save a,x
b5f3 : 8a                       txa
b5f4 : 48                       pha       
b5f5 : ba                       tsx             ;sp -4? (return addr,a,x)
b5f6 : e0fb                     cpx #$fb
                                trap_ne
b5f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b5fa : adff01                   lda $1ff        ;propper return on stack
b5fd : c984                     cmp #hi(jsr_ret)
                                trap_ne
b5ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
b601 : adfe01                   lda $1fe
b604 : c9bb                     cmp #lo(jsr_ret)
                                trap_ne
b606 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
b608 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b60a : 29ef            >			and #~break         ;force B flag to become 0
                       >
b60c : 48              >            pha         ;use stack to load status
b60d : 28              >            plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  241
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
b60e : 68                       pla             ;pull x,a
b60f : aa                       tax
b610 : 68                       pla
b611 : e8                       inx             ;return registers with modifications
b612 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
b614 : 60                       rts
                                trap            ;runover protection
b615 : 4c15b6          >        jmp *           ;failed anyway
                        
b618 : 4c0080                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
b61b :                  nmi_trap
                                trap            ;check stack for conditions at NMI
b61b : 4c1bb6          >        jmp *           ;failed anyway
                        
b61e : 4c0080                   jmp start       ;catastrophic error - cannot continue
b621 :                  res_trap
                                trap            ;unexpected RESET
b621 : 4c21b6          >        jmp *           ;failed anyway
                        
b624 : 4c0080                   jmp start       ;catastrophic error - cannot continue
                                
b627 : 88                       dey
b628 : 88                       dey
b629 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
b629 : 08                       php             ;either SP or Y count will fail, if we do not hit
b62a : 88                       dey
b62b : 88                       dey
b62c : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
b62d : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
b62f : f04a                     beq break2
b631 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
b633 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b635 : e052                     cpx #'R'
                                trap_ne        
b637 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b639 : c048                     cpy #'K'-3
                                trap_ne
b63b : d0fe            >        bne *           ;failed not equal (non zero)
                        
b63d : 8500                     sta irq_a       ;save registers during break test
b63f : 8601                     stx irq_x
b641 : ba                       tsx             ;test break on stack
b642 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
b645 : 0908            >            ora #decmode        ;ignore decimal mode bit
b647 : c928            >            cmp #((0      |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                        		if B_flag = 0
b649 : c938             			cmp #(0|faod|break)&m8   ;redoing 'cmp_flag 0' with B=1
                        		endif
                                trap_ne         ; - no break flag on stack
b64b : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  242
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b64d : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
b64e : 0908            >            ora #decmode        ;ignore decimal mode bit
b650 : c92c            >            cmp #((intdis |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
b652 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b654 : ba                       tsx
b655 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
b657 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b659 : adff01                   lda $1ff        ;propper return on stack
b65c : c984                     cmp #hi(brk_ret0)
                                trap_ne
b65e : d0fe            >        bne *           ;failed not equal (non zero)
                        
b660 : adfe01                   lda $1fe
b663 : c9f4                     cmp #lo(brk_ret0)
                                trap_ne
b665 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
b667 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
b669 : 29ef            >			and #~break         ;force B flag to become 0
                        
b66b : 48                       pha
b66c : a601                     ldx irq_x
b66e : e8                       inx             ;return registers with modifications
b66f : a500                     lda irq_a
b671 : 49aa                     eor #$aa
b673 : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
b674 : 40                       rti
                                trap            ;runover protection
b675 : 4c75b6          >        jmp *           ;failed anyway
                        
b678 : 4c0080                   jmp start       ;catastrophic error - cannot continue
                                
b67b :                  break2                  ;BRK pass 2        
b67b : e0ad                     cpx #$ff-'R'
                                trap_ne        
b67d : d0fe            >        bne *           ;failed not equal (non zero)
                        
b67f : c0b1                     cpy #$ff-'K'-3
                                trap_ne
b681 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b683 : 8500                     sta irq_a       ;save registers during break test
b685 : 8601                     stx irq_x
b687 : ba                       tsx             ;test break on stack
b688 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
b68b : 0908            >            ora #decmode        ;ignore decimal mode bit
b68d : c9ef            >            cmp #(($ff    |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                        		if B_flag = 0
b68f : c9ff             		    cmp #($ff|faod|break)&m8   ;redoing 'cmp_flag 0' with B=1
                        		endif
                                trap_ne         ; - no break flag on stack
b691 : d0fe            >        bne *           ;failed not equal (non zero)
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  243
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

b693 : 68                       pla
b694 : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
b696 : 0908            >            ora #decmode        ;ignore decimal mode bit
b698 : c9ef            >            cmp #(($ff    |faod)&~break)&m8   ;expected flags break disabled + always on bits
                        
                                trap_ne
b69a : d0fe            >        bne *           ;failed not equal (non zero)
                        
b69c : ba                       tsx
b69d : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
b69f : d0fe            >        bne *           ;failed not equal (non zero)
                        
b6a1 : adff01                   lda $1ff        ;propper return on stack
b6a4 : c985                     cmp #hi(brk_ret1)
                                trap_ne
b6a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
b6a8 : adfe01                   lda $1fe
b6ab : c91e                     cmp #lo(brk_ret1)
                                trap_ne
b6ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
b6af : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
b6b1 : 29ef            >			and #~break         ;force B flag to become 0
                        
b6b3 : 48                       pha      
b6b4 : a601                     ldx irq_x
b6b6 : e8                       inx             ;return registers with modifications
b6b7 : a500                     lda irq_a
b6b9 : 49aa                     eor #$aa
b6bb : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
b6bc : 40                       rti
                                trap            ;runover protection
b6bd : 4cbdb6          >        jmp *           ;failed anyway
                        
b6c0 : 4c0080                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  244
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  245
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
fffa =                          org $fffa       ;vectors
fffa : 1bb6                     dw  nmi_trap
fffc : 21b6                     dw  res_trap
fffe : 29b6                     dw  irq_trap
                            endif
                        
fffa =                          end start
                                    
No errors in pass 2.
Wrote binary from address $0000 through $ffff.
Total size 65536 bytes.
Program start address is at $8000 (32768).
